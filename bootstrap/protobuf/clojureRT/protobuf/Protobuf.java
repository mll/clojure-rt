// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bytecode.proto

package clojureRT.protobuf;

public final class Protobuf {
  private Protobuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code clojureRT.protobuf.Op}
   */
  public enum Op
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>opBinding = 0;</code>
     */
    opBinding(0),
    /**
     * <code>opCase = 1;</code>
     */
    opCase(1),
    /**
     * <code>opCaseTest = 2;</code>
     */
    opCaseTest(2),
    /**
     * <code>opCaseThen = 3;</code>
     */
    opCaseThen(3),
    /**
     * <code>opCatch = 4;</code>
     */
    opCatch(4),
    /**
     * <code>opConst = 5;</code>
     */
    opConst(5),
    /**
     * <code>opDef = 6;</code>
     */
    opDef(6),
    /**
     * <code>opDeftype = 7;</code>
     */
    opDeftype(7),
    /**
     * <code>opDo = 8;</code>
     */
    opDo(8),
    /**
     * <code>opFn = 9;</code>
     */
    opFn(9),
    /**
     * <code>opFnMethod = 10;</code>
     */
    opFnMethod(10),
    /**
     * <code>opHostInterop = 11;</code>
     */
    opHostInterop(11),
    /**
     * <code>opIf = 12;</code>
     */
    opIf(12),
    /**
     * <code>opImport = 13;</code>
     */
    opImport(13),
    /**
     * <code>opInstanceCall = 14;</code>
     */
    opInstanceCall(14),
    /**
     * <code>opInstanceField = 15;</code>
     */
    opInstanceField(15),
    /**
     * <code>opIsInstance = 16;</code>
     */
    opIsInstance(16),
    /**
     * <code>opInvoke = 17;</code>
     */
    opInvoke(17),
    /**
     * <code>opKeywordInvoke = 18;</code>
     */
    opKeywordInvoke(18),
    /**
     * <code>opLet = 19;</code>
     */
    opLet(19),
    /**
     * <code>opLetfn = 20;</code>
     */
    opLetfn(20),
    /**
     * <code>opLocal = 21;</code>
     */
    opLocal(21),
    /**
     * <code>opLoop = 22;</code>
     */
    opLoop(22),
    /**
     * <code>opMap = 23;</code>
     */
    opMap(23),
    /**
     * <code>opMethod = 24;</code>
     */
    opMethod(24),
    /**
     * <code>opMonitorEnter = 25;</code>
     */
    opMonitorEnter(25),
    /**
     * <code>opMonitorExit = 26;</code>
     */
    opMonitorExit(26),
    /**
     * <code>opNew = 27;</code>
     */
    opNew(27),
    /**
     * <code>opPrimInvoke = 28;</code>
     */
    opPrimInvoke(28),
    /**
     * <code>opProtocolInvoke = 29;</code>
     */
    opProtocolInvoke(29),
    /**
     * <code>opQuote = 30;</code>
     */
    opQuote(30),
    /**
     * <code>opRecur = 31;</code>
     */
    opRecur(31),
    /**
     * <code>opReify = 32;</code>
     */
    opReify(32),
    /**
     * <code>opSet = 33;</code>
     */
    opSet(33),
    /**
     * <code>opMutateSet = 34;</code>
     */
    opMutateSet(34),
    /**
     * <code>opStaticCall = 35;</code>
     */
    opStaticCall(35),
    /**
     * <code>opStaticField = 36;</code>
     */
    opStaticField(36),
    /**
     * <code>opTheVar = 37;</code>
     */
    opTheVar(37),
    /**
     * <code>opThrow = 38;</code>
     */
    opThrow(38),
    /**
     * <code>opTry = 39;</code>
     */
    opTry(39),
    /**
     * <code>opVar = 40;</code>
     */
    opVar(40),
    /**
     * <code>opVector = 41;</code>
     */
    opVector(41),
    /**
     * <code>opWithMeta = 42;</code>
     */
    opWithMeta(42),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>opBinding = 0;</code>
     */
    public static final int opBinding_VALUE = 0;
    /**
     * <code>opCase = 1;</code>
     */
    public static final int opCase_VALUE = 1;
    /**
     * <code>opCaseTest = 2;</code>
     */
    public static final int opCaseTest_VALUE = 2;
    /**
     * <code>opCaseThen = 3;</code>
     */
    public static final int opCaseThen_VALUE = 3;
    /**
     * <code>opCatch = 4;</code>
     */
    public static final int opCatch_VALUE = 4;
    /**
     * <code>opConst = 5;</code>
     */
    public static final int opConst_VALUE = 5;
    /**
     * <code>opDef = 6;</code>
     */
    public static final int opDef_VALUE = 6;
    /**
     * <code>opDeftype = 7;</code>
     */
    public static final int opDeftype_VALUE = 7;
    /**
     * <code>opDo = 8;</code>
     */
    public static final int opDo_VALUE = 8;
    /**
     * <code>opFn = 9;</code>
     */
    public static final int opFn_VALUE = 9;
    /**
     * <code>opFnMethod = 10;</code>
     */
    public static final int opFnMethod_VALUE = 10;
    /**
     * <code>opHostInterop = 11;</code>
     */
    public static final int opHostInterop_VALUE = 11;
    /**
     * <code>opIf = 12;</code>
     */
    public static final int opIf_VALUE = 12;
    /**
     * <code>opImport = 13;</code>
     */
    public static final int opImport_VALUE = 13;
    /**
     * <code>opInstanceCall = 14;</code>
     */
    public static final int opInstanceCall_VALUE = 14;
    /**
     * <code>opInstanceField = 15;</code>
     */
    public static final int opInstanceField_VALUE = 15;
    /**
     * <code>opIsInstance = 16;</code>
     */
    public static final int opIsInstance_VALUE = 16;
    /**
     * <code>opInvoke = 17;</code>
     */
    public static final int opInvoke_VALUE = 17;
    /**
     * <code>opKeywordInvoke = 18;</code>
     */
    public static final int opKeywordInvoke_VALUE = 18;
    /**
     * <code>opLet = 19;</code>
     */
    public static final int opLet_VALUE = 19;
    /**
     * <code>opLetfn = 20;</code>
     */
    public static final int opLetfn_VALUE = 20;
    /**
     * <code>opLocal = 21;</code>
     */
    public static final int opLocal_VALUE = 21;
    /**
     * <code>opLoop = 22;</code>
     */
    public static final int opLoop_VALUE = 22;
    /**
     * <code>opMap = 23;</code>
     */
    public static final int opMap_VALUE = 23;
    /**
     * <code>opMethod = 24;</code>
     */
    public static final int opMethod_VALUE = 24;
    /**
     * <code>opMonitorEnter = 25;</code>
     */
    public static final int opMonitorEnter_VALUE = 25;
    /**
     * <code>opMonitorExit = 26;</code>
     */
    public static final int opMonitorExit_VALUE = 26;
    /**
     * <code>opNew = 27;</code>
     */
    public static final int opNew_VALUE = 27;
    /**
     * <code>opPrimInvoke = 28;</code>
     */
    public static final int opPrimInvoke_VALUE = 28;
    /**
     * <code>opProtocolInvoke = 29;</code>
     */
    public static final int opProtocolInvoke_VALUE = 29;
    /**
     * <code>opQuote = 30;</code>
     */
    public static final int opQuote_VALUE = 30;
    /**
     * <code>opRecur = 31;</code>
     */
    public static final int opRecur_VALUE = 31;
    /**
     * <code>opReify = 32;</code>
     */
    public static final int opReify_VALUE = 32;
    /**
     * <code>opSet = 33;</code>
     */
    public static final int opSet_VALUE = 33;
    /**
     * <code>opMutateSet = 34;</code>
     */
    public static final int opMutateSet_VALUE = 34;
    /**
     * <code>opStaticCall = 35;</code>
     */
    public static final int opStaticCall_VALUE = 35;
    /**
     * <code>opStaticField = 36;</code>
     */
    public static final int opStaticField_VALUE = 36;
    /**
     * <code>opTheVar = 37;</code>
     */
    public static final int opTheVar_VALUE = 37;
    /**
     * <code>opThrow = 38;</code>
     */
    public static final int opThrow_VALUE = 38;
    /**
     * <code>opTry = 39;</code>
     */
    public static final int opTry_VALUE = 39;
    /**
     * <code>opVar = 40;</code>
     */
    public static final int opVar_VALUE = 40;
    /**
     * <code>opVector = 41;</code>
     */
    public static final int opVector_VALUE = 41;
    /**
     * <code>opWithMeta = 42;</code>
     */
    public static final int opWithMeta_VALUE = 42;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Op valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Op forNumber(int value) {
      switch (value) {
        case 0: return opBinding;
        case 1: return opCase;
        case 2: return opCaseTest;
        case 3: return opCaseThen;
        case 4: return opCatch;
        case 5: return opConst;
        case 6: return opDef;
        case 7: return opDeftype;
        case 8: return opDo;
        case 9: return opFn;
        case 10: return opFnMethod;
        case 11: return opHostInterop;
        case 12: return opIf;
        case 13: return opImport;
        case 14: return opInstanceCall;
        case 15: return opInstanceField;
        case 16: return opIsInstance;
        case 17: return opInvoke;
        case 18: return opKeywordInvoke;
        case 19: return opLet;
        case 20: return opLetfn;
        case 21: return opLocal;
        case 22: return opLoop;
        case 23: return opMap;
        case 24: return opMethod;
        case 25: return opMonitorEnter;
        case 26: return opMonitorExit;
        case 27: return opNew;
        case 28: return opPrimInvoke;
        case 29: return opProtocolInvoke;
        case 30: return opQuote;
        case 31: return opRecur;
        case 32: return opReify;
        case 33: return opSet;
        case 34: return opMutateSet;
        case 35: return opStaticCall;
        case 36: return opStaticField;
        case 37: return opTheVar;
        case 38: return opThrow;
        case 39: return opTry;
        case 40: return opVar;
        case 41: return opVector;
        case 42: return opWithMeta;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Op>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Op> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Op>() {
            public Op findValueByNumber(int number) {
              return Op.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.getDescriptor().getEnumTypes().get(0);
    }

    private static final Op[] VALUES = values();

    public static Op valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Op(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clojureRT.protobuf.Op)
  }

  /**
   * Protobuf enum {@code clojureRT.protobuf.LocalType}
   */
  public enum LocalType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>localTypeArg = 0;</code>
     */
    localTypeArg(0),
    /**
     * <code>localTypeCatch = 1;</code>
     */
    localTypeCatch(1),
    /**
     * <code>localTypeFn = 2;</code>
     */
    localTypeFn(2),
    /**
     * <code>localTypeLet = 3;</code>
     */
    localTypeLet(3),
    /**
     * <code>localTypeLetfn = 4;</code>
     */
    localTypeLetfn(4),
    /**
     * <code>localTypeLoop = 5;</code>
     */
    localTypeLoop(5),
    /**
     * <code>localTypeField = 6;</code>
     */
    localTypeField(6),
    /**
     * <code>localTypeThis = 7;</code>
     */
    localTypeThis(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>localTypeArg = 0;</code>
     */
    public static final int localTypeArg_VALUE = 0;
    /**
     * <code>localTypeCatch = 1;</code>
     */
    public static final int localTypeCatch_VALUE = 1;
    /**
     * <code>localTypeFn = 2;</code>
     */
    public static final int localTypeFn_VALUE = 2;
    /**
     * <code>localTypeLet = 3;</code>
     */
    public static final int localTypeLet_VALUE = 3;
    /**
     * <code>localTypeLetfn = 4;</code>
     */
    public static final int localTypeLetfn_VALUE = 4;
    /**
     * <code>localTypeLoop = 5;</code>
     */
    public static final int localTypeLoop_VALUE = 5;
    /**
     * <code>localTypeField = 6;</code>
     */
    public static final int localTypeField_VALUE = 6;
    /**
     * <code>localTypeThis = 7;</code>
     */
    public static final int localTypeThis_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static LocalType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static LocalType forNumber(int value) {
      switch (value) {
        case 0: return localTypeArg;
        case 1: return localTypeCatch;
        case 2: return localTypeFn;
        case 3: return localTypeLet;
        case 4: return localTypeLetfn;
        case 5: return localTypeLoop;
        case 6: return localTypeField;
        case 7: return localTypeThis;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LocalType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        LocalType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LocalType>() {
            public LocalType findValueByNumber(int number) {
              return LocalType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.getDescriptor().getEnumTypes().get(1);
    }

    private static final LocalType[] VALUES = values();

    public static LocalType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private LocalType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:clojureRT.protobuf.LocalType)
  }

  public interface SubnodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.Subnode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     * @return Whether the binding field is set.
     */
    boolean hasBinding();
    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     * @return The binding.
     */
    clojureRT.protobuf.Protobuf.BindingNode getBinding();
    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     */
    clojureRT.protobuf.Protobuf.BindingNodeOrBuilder getBindingOrBuilder();

    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     * @return Whether the case field is set.
     */
    boolean hasCase();
    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     * @return The case.
     */
    clojureRT.protobuf.Protobuf.CaseNode getCase();
    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     */
    clojureRT.protobuf.Protobuf.CaseNodeOrBuilder getCaseOrBuilder();

    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     * @return Whether the caseTest field is set.
     */
    boolean hasCaseTest();
    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     * @return The caseTest.
     */
    clojureRT.protobuf.Protobuf.CaseTestNode getCaseTest();
    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     */
    clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder getCaseTestOrBuilder();

    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     * @return Whether the caseThen field is set.
     */
    boolean hasCaseThen();
    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     * @return The caseThen.
     */
    clojureRT.protobuf.Protobuf.CaseThenNode getCaseThen();
    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     */
    clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder getCaseThenOrBuilder();

    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     * @return Whether the catch field is set.
     */
    boolean hasCatch();
    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     * @return The catch.
     */
    clojureRT.protobuf.Protobuf.CatchNode getCatch();
    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     */
    clojureRT.protobuf.Protobuf.CatchNodeOrBuilder getCatchOrBuilder();

    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     * @return Whether the const field is set.
     */
    boolean hasConst();
    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     * @return The const.
     */
    clojureRT.protobuf.Protobuf.ConstNode getConst();
    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     */
    clojureRT.protobuf.Protobuf.ConstNodeOrBuilder getConstOrBuilder();

    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     * @return Whether the def field is set.
     */
    boolean hasDef();
    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     * @return The def.
     */
    clojureRT.protobuf.Protobuf.DefNode getDef();
    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     */
    clojureRT.protobuf.Protobuf.DefNodeOrBuilder getDefOrBuilder();

    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     * @return Whether the deftype field is set.
     */
    boolean hasDeftype();
    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     * @return The deftype.
     */
    clojureRT.protobuf.Protobuf.DeftypeNode getDeftype();
    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     */
    clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder getDeftypeOrBuilder();

    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     * @return Whether the do field is set.
     */
    boolean hasDo();
    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     * @return The do.
     */
    clojureRT.protobuf.Protobuf.DoNode getDo();
    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     */
    clojureRT.protobuf.Protobuf.DoNodeOrBuilder getDoOrBuilder();

    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     * @return Whether the fn field is set.
     */
    boolean hasFn();
    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     * @return The fn.
     */
    clojureRT.protobuf.Protobuf.FnNode getFn();
    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     */
    clojureRT.protobuf.Protobuf.FnNodeOrBuilder getFnOrBuilder();

    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     * @return Whether the fnMethod field is set.
     */
    boolean hasFnMethod();
    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     * @return The fnMethod.
     */
    clojureRT.protobuf.Protobuf.FnMethodNode getFnMethod();
    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     */
    clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder getFnMethodOrBuilder();

    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     * @return Whether the hostInterop field is set.
     */
    boolean hasHostInterop();
    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     * @return The hostInterop.
     */
    clojureRT.protobuf.Protobuf.HostInteropNode getHostInterop();
    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     */
    clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder getHostInteropOrBuilder();

    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     * @return Whether the if field is set.
     */
    boolean hasIf();
    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     * @return The if.
     */
    clojureRT.protobuf.Protobuf.IfNode getIf();
    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     */
    clojureRT.protobuf.Protobuf.IfNodeOrBuilder getIfOrBuilder();

    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     * @return Whether the import field is set.
     */
    boolean hasImport();
    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     * @return The import.
     */
    clojureRT.protobuf.Protobuf.ImportNode getImport();
    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     */
    clojureRT.protobuf.Protobuf.ImportNodeOrBuilder getImportOrBuilder();

    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     * @return Whether the instanceCall field is set.
     */
    boolean hasInstanceCall();
    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     * @return The instanceCall.
     */
    clojureRT.protobuf.Protobuf.InstanceCallNode getInstanceCall();
    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     */
    clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder getInstanceCallOrBuilder();

    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     * @return Whether the instanceField field is set.
     */
    boolean hasInstanceField();
    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     * @return The instanceField.
     */
    clojureRT.protobuf.Protobuf.InstanceFieldNode getInstanceField();
    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     */
    clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder getInstanceFieldOrBuilder();

    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     * @return Whether the isInstance field is set.
     */
    boolean hasIsInstance();
    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     * @return The isInstance.
     */
    clojureRT.protobuf.Protobuf.IsInstanceNode getIsInstance();
    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     */
    clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder getIsInstanceOrBuilder();

    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     * @return Whether the invoke field is set.
     */
    boolean hasInvoke();
    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     * @return The invoke.
     */
    clojureRT.protobuf.Protobuf.InvokeNode getInvoke();
    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     */
    clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder getInvokeOrBuilder();

    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     * @return Whether the keywordInvoke field is set.
     */
    boolean hasKeywordInvoke();
    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     * @return The keywordInvoke.
     */
    clojureRT.protobuf.Protobuf.KeywordInvokeNode getKeywordInvoke();
    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     */
    clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder getKeywordInvokeOrBuilder();

    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     * @return Whether the let field is set.
     */
    boolean hasLet();
    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     * @return The let.
     */
    clojureRT.protobuf.Protobuf.LetNode getLet();
    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     */
    clojureRT.protobuf.Protobuf.LetNodeOrBuilder getLetOrBuilder();

    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     * @return Whether the letfn field is set.
     */
    boolean hasLetfn();
    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     * @return The letfn.
     */
    clojureRT.protobuf.Protobuf.LetfnNode getLetfn();
    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     */
    clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder getLetfnOrBuilder();

    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     * @return Whether the local field is set.
     */
    boolean hasLocal();
    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     * @return The local.
     */
    clojureRT.protobuf.Protobuf.LocalNode getLocal();
    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     */
    clojureRT.protobuf.Protobuf.LocalNodeOrBuilder getLocalOrBuilder();

    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     * @return Whether the loop field is set.
     */
    boolean hasLoop();
    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     * @return The loop.
     */
    clojureRT.protobuf.Protobuf.LoopNode getLoop();
    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     */
    clojureRT.protobuf.Protobuf.LoopNodeOrBuilder getLoopOrBuilder();

    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     * @return Whether the map field is set.
     */
    boolean hasMap();
    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     * @return The map.
     */
    clojureRT.protobuf.Protobuf.MapNode getMap();
    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     */
    clojureRT.protobuf.Protobuf.MapNodeOrBuilder getMapOrBuilder();

    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     * @return Whether the method field is set.
     */
    boolean hasMethod();
    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     * @return The method.
     */
    clojureRT.protobuf.Protobuf.MethodNode getMethod();
    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     */
    clojureRT.protobuf.Protobuf.MethodNodeOrBuilder getMethodOrBuilder();

    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     * @return Whether the monitorEnter field is set.
     */
    boolean hasMonitorEnter();
    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     * @return The monitorEnter.
     */
    clojureRT.protobuf.Protobuf.MonitorEnterNode getMonitorEnter();
    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     */
    clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder getMonitorEnterOrBuilder();

    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     * @return Whether the monitorExit field is set.
     */
    boolean hasMonitorExit();
    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     * @return The monitorExit.
     */
    clojureRT.protobuf.Protobuf.MonitorExitNode getMonitorExit();
    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     */
    clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder getMonitorExitOrBuilder();

    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     * @return Whether the new field is set.
     */
    boolean hasNew();
    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     * @return The new.
     */
    clojureRT.protobuf.Protobuf.NewNode getNew();
    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     */
    clojureRT.protobuf.Protobuf.NewNodeOrBuilder getNewOrBuilder();

    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     * @return Whether the primInvoke field is set.
     */
    boolean hasPrimInvoke();
    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     * @return The primInvoke.
     */
    clojureRT.protobuf.Protobuf.PrimInvokeNode getPrimInvoke();
    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     */
    clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder getPrimInvokeOrBuilder();

    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     * @return Whether the protocolInvoke field is set.
     */
    boolean hasProtocolInvoke();
    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     * @return The protocolInvoke.
     */
    clojureRT.protobuf.Protobuf.ProtocolInvokeNode getProtocolInvoke();
    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     */
    clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder getProtocolInvokeOrBuilder();

    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     * @return Whether the quote field is set.
     */
    boolean hasQuote();
    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     * @return The quote.
     */
    clojureRT.protobuf.Protobuf.QuoteNode getQuote();
    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     */
    clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder getQuoteOrBuilder();

    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     * @return Whether the recur field is set.
     */
    boolean hasRecur();
    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     * @return The recur.
     */
    clojureRT.protobuf.Protobuf.RecurNode getRecur();
    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     */
    clojureRT.protobuf.Protobuf.RecurNodeOrBuilder getRecurOrBuilder();

    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     * @return Whether the reify field is set.
     */
    boolean hasReify();
    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     * @return The reify.
     */
    clojureRT.protobuf.Protobuf.ReifyNode getReify();
    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     */
    clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder getReifyOrBuilder();

    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     * @return Whether the set field is set.
     */
    boolean hasSet();
    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     * @return The set.
     */
    clojureRT.protobuf.Protobuf.SetNode getSet();
    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     */
    clojureRT.protobuf.Protobuf.SetNodeOrBuilder getSetOrBuilder();

    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     * @return Whether the mutateSet field is set.
     */
    boolean hasMutateSet();
    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     * @return The mutateSet.
     */
    clojureRT.protobuf.Protobuf.MutateSetNode getMutateSet();
    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     */
    clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder getMutateSetOrBuilder();

    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     * @return Whether the staticCall field is set.
     */
    boolean hasStaticCall();
    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     * @return The staticCall.
     */
    clojureRT.protobuf.Protobuf.StaticCallNode getStaticCall();
    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     */
    clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder getStaticCallOrBuilder();

    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     * @return Whether the staticField field is set.
     */
    boolean hasStaticField();
    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     * @return The staticField.
     */
    clojureRT.protobuf.Protobuf.StaticFieldNode getStaticField();
    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     */
    clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder getStaticFieldOrBuilder();

    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     * @return Whether the theVar field is set.
     */
    boolean hasTheVar();
    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     * @return The theVar.
     */
    clojureRT.protobuf.Protobuf.TheVarNode getTheVar();
    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     */
    clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder getTheVarOrBuilder();

    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     * @return Whether the throw field is set.
     */
    boolean hasThrow();
    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     * @return The throw.
     */
    clojureRT.protobuf.Protobuf.ThrowNode getThrow();
    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     */
    clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder getThrowOrBuilder();

    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     * @return Whether the try field is set.
     */
    boolean hasTry();
    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     * @return The try.
     */
    clojureRT.protobuf.Protobuf.TryNode getTry();
    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     */
    clojureRT.protobuf.Protobuf.TryNodeOrBuilder getTryOrBuilder();

    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     * @return Whether the var field is set.
     */
    boolean hasVar();
    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     * @return The var.
     */
    clojureRT.protobuf.Protobuf.VarNode getVar();
    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     */
    clojureRT.protobuf.Protobuf.VarNodeOrBuilder getVarOrBuilder();

    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     * @return Whether the vector field is set.
     */
    boolean hasVector();
    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     * @return The vector.
     */
    clojureRT.protobuf.Protobuf.VectorNode getVector();
    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     */
    clojureRT.protobuf.Protobuf.VectorNodeOrBuilder getVectorOrBuilder();

    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     * @return Whether the withMeta field is set.
     */
    boolean hasWithMeta();
    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     * @return The withMeta.
     */
    clojureRT.protobuf.Protobuf.WithMetaNode getWithMeta();
    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     */
    clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder getWithMetaOrBuilder();

    public clojureRT.protobuf.Protobuf.Subnode.TypesCase getTypesCase();
  }
  /**
   * Protobuf type {@code clojureRT.protobuf.Subnode}
   */
  public static final class Subnode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.Subnode)
      SubnodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Subnode.newBuilder() to construct.
    private Subnode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Subnode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Subnode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Subnode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.BindingNode.Builder subBuilder = null;
              if (typesCase_ == 1) {
                subBuilder = ((clojureRT.protobuf.Protobuf.BindingNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.BindingNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.BindingNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 1;
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.CaseNode.Builder subBuilder = null;
              if (typesCase_ == 2) {
                subBuilder = ((clojureRT.protobuf.Protobuf.CaseNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.CaseNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.CaseNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 2;
              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.CaseTestNode.Builder subBuilder = null;
              if (typesCase_ == 3) {
                subBuilder = ((clojureRT.protobuf.Protobuf.CaseTestNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.CaseTestNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.CaseTestNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 3;
              break;
            }
            case 34: {
              clojureRT.protobuf.Protobuf.CaseThenNode.Builder subBuilder = null;
              if (typesCase_ == 4) {
                subBuilder = ((clojureRT.protobuf.Protobuf.CaseThenNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.CaseThenNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.CaseThenNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 4;
              break;
            }
            case 42: {
              clojureRT.protobuf.Protobuf.CatchNode.Builder subBuilder = null;
              if (typesCase_ == 5) {
                subBuilder = ((clojureRT.protobuf.Protobuf.CatchNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.CatchNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.CatchNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 5;
              break;
            }
            case 50: {
              clojureRT.protobuf.Protobuf.ConstNode.Builder subBuilder = null;
              if (typesCase_ == 6) {
                subBuilder = ((clojureRT.protobuf.Protobuf.ConstNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.ConstNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.ConstNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 6;
              break;
            }
            case 58: {
              clojureRT.protobuf.Protobuf.DefNode.Builder subBuilder = null;
              if (typesCase_ == 7) {
                subBuilder = ((clojureRT.protobuf.Protobuf.DefNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.DefNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.DefNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 7;
              break;
            }
            case 66: {
              clojureRT.protobuf.Protobuf.DeftypeNode.Builder subBuilder = null;
              if (typesCase_ == 8) {
                subBuilder = ((clojureRT.protobuf.Protobuf.DeftypeNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.DeftypeNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.DeftypeNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 8;
              break;
            }
            case 74: {
              clojureRT.protobuf.Protobuf.DoNode.Builder subBuilder = null;
              if (typesCase_ == 9) {
                subBuilder = ((clojureRT.protobuf.Protobuf.DoNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.DoNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.DoNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 9;
              break;
            }
            case 82: {
              clojureRT.protobuf.Protobuf.FnNode.Builder subBuilder = null;
              if (typesCase_ == 10) {
                subBuilder = ((clojureRT.protobuf.Protobuf.FnNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.FnNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.FnNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 10;
              break;
            }
            case 90: {
              clojureRT.protobuf.Protobuf.FnMethodNode.Builder subBuilder = null;
              if (typesCase_ == 11) {
                subBuilder = ((clojureRT.protobuf.Protobuf.FnMethodNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.FnMethodNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.FnMethodNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 11;
              break;
            }
            case 98: {
              clojureRT.protobuf.Protobuf.HostInteropNode.Builder subBuilder = null;
              if (typesCase_ == 12) {
                subBuilder = ((clojureRT.protobuf.Protobuf.HostInteropNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.HostInteropNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.HostInteropNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 12;
              break;
            }
            case 106: {
              clojureRT.protobuf.Protobuf.IfNode.Builder subBuilder = null;
              if (typesCase_ == 13) {
                subBuilder = ((clojureRT.protobuf.Protobuf.IfNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.IfNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.IfNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 13;
              break;
            }
            case 114: {
              clojureRT.protobuf.Protobuf.ImportNode.Builder subBuilder = null;
              if (typesCase_ == 14) {
                subBuilder = ((clojureRT.protobuf.Protobuf.ImportNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.ImportNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.ImportNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 14;
              break;
            }
            case 122: {
              clojureRT.protobuf.Protobuf.InstanceCallNode.Builder subBuilder = null;
              if (typesCase_ == 15) {
                subBuilder = ((clojureRT.protobuf.Protobuf.InstanceCallNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.InstanceCallNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.InstanceCallNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 15;
              break;
            }
            case 130: {
              clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder subBuilder = null;
              if (typesCase_ == 16) {
                subBuilder = ((clojureRT.protobuf.Protobuf.InstanceFieldNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.InstanceFieldNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.InstanceFieldNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 16;
              break;
            }
            case 138: {
              clojureRT.protobuf.Protobuf.IsInstanceNode.Builder subBuilder = null;
              if (typesCase_ == 17) {
                subBuilder = ((clojureRT.protobuf.Protobuf.IsInstanceNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.IsInstanceNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.IsInstanceNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 17;
              break;
            }
            case 146: {
              clojureRT.protobuf.Protobuf.InvokeNode.Builder subBuilder = null;
              if (typesCase_ == 18) {
                subBuilder = ((clojureRT.protobuf.Protobuf.InvokeNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.InvokeNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.InvokeNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 18;
              break;
            }
            case 154: {
              clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder subBuilder = null;
              if (typesCase_ == 19) {
                subBuilder = ((clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.KeywordInvokeNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 19;
              break;
            }
            case 162: {
              clojureRT.protobuf.Protobuf.LetNode.Builder subBuilder = null;
              if (typesCase_ == 20) {
                subBuilder = ((clojureRT.protobuf.Protobuf.LetNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.LetNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.LetNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 20;
              break;
            }
            case 170: {
              clojureRT.protobuf.Protobuf.LetfnNode.Builder subBuilder = null;
              if (typesCase_ == 21) {
                subBuilder = ((clojureRT.protobuf.Protobuf.LetfnNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.LetfnNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.LetfnNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 21;
              break;
            }
            case 178: {
              clojureRT.protobuf.Protobuf.LocalNode.Builder subBuilder = null;
              if (typesCase_ == 22) {
                subBuilder = ((clojureRT.protobuf.Protobuf.LocalNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.LocalNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.LocalNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 22;
              break;
            }
            case 186: {
              clojureRT.protobuf.Protobuf.LoopNode.Builder subBuilder = null;
              if (typesCase_ == 23) {
                subBuilder = ((clojureRT.protobuf.Protobuf.LoopNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.LoopNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.LoopNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 23;
              break;
            }
            case 194: {
              clojureRT.protobuf.Protobuf.MapNode.Builder subBuilder = null;
              if (typesCase_ == 24) {
                subBuilder = ((clojureRT.protobuf.Protobuf.MapNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.MapNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.MapNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 24;
              break;
            }
            case 202: {
              clojureRT.protobuf.Protobuf.MethodNode.Builder subBuilder = null;
              if (typesCase_ == 25) {
                subBuilder = ((clojureRT.protobuf.Protobuf.MethodNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.MethodNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.MethodNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 25;
              break;
            }
            case 210: {
              clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder subBuilder = null;
              if (typesCase_ == 26) {
                subBuilder = ((clojureRT.protobuf.Protobuf.MonitorEnterNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.MonitorEnterNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.MonitorEnterNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 26;
              break;
            }
            case 218: {
              clojureRT.protobuf.Protobuf.MonitorExitNode.Builder subBuilder = null;
              if (typesCase_ == 27) {
                subBuilder = ((clojureRT.protobuf.Protobuf.MonitorExitNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.MonitorExitNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.MonitorExitNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 27;
              break;
            }
            case 226: {
              clojureRT.protobuf.Protobuf.NewNode.Builder subBuilder = null;
              if (typesCase_ == 28) {
                subBuilder = ((clojureRT.protobuf.Protobuf.NewNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.NewNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.NewNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 28;
              break;
            }
            case 234: {
              clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder subBuilder = null;
              if (typesCase_ == 29) {
                subBuilder = ((clojureRT.protobuf.Protobuf.PrimInvokeNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.PrimInvokeNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.PrimInvokeNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 29;
              break;
            }
            case 242: {
              clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder subBuilder = null;
              if (typesCase_ == 30) {
                subBuilder = ((clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.ProtocolInvokeNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 30;
              break;
            }
            case 250: {
              clojureRT.protobuf.Protobuf.QuoteNode.Builder subBuilder = null;
              if (typesCase_ == 31) {
                subBuilder = ((clojureRT.protobuf.Protobuf.QuoteNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.QuoteNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.QuoteNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 31;
              break;
            }
            case 258: {
              clojureRT.protobuf.Protobuf.RecurNode.Builder subBuilder = null;
              if (typesCase_ == 32) {
                subBuilder = ((clojureRT.protobuf.Protobuf.RecurNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.RecurNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.RecurNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 32;
              break;
            }
            case 266: {
              clojureRT.protobuf.Protobuf.ReifyNode.Builder subBuilder = null;
              if (typesCase_ == 33) {
                subBuilder = ((clojureRT.protobuf.Protobuf.ReifyNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.ReifyNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.ReifyNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 33;
              break;
            }
            case 274: {
              clojureRT.protobuf.Protobuf.SetNode.Builder subBuilder = null;
              if (typesCase_ == 34) {
                subBuilder = ((clojureRT.protobuf.Protobuf.SetNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.SetNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.SetNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 34;
              break;
            }
            case 282: {
              clojureRT.protobuf.Protobuf.MutateSetNode.Builder subBuilder = null;
              if (typesCase_ == 35) {
                subBuilder = ((clojureRT.protobuf.Protobuf.MutateSetNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.MutateSetNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.MutateSetNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 35;
              break;
            }
            case 290: {
              clojureRT.protobuf.Protobuf.StaticCallNode.Builder subBuilder = null;
              if (typesCase_ == 36) {
                subBuilder = ((clojureRT.protobuf.Protobuf.StaticCallNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.StaticCallNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.StaticCallNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 36;
              break;
            }
            case 298: {
              clojureRT.protobuf.Protobuf.StaticFieldNode.Builder subBuilder = null;
              if (typesCase_ == 37) {
                subBuilder = ((clojureRT.protobuf.Protobuf.StaticFieldNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.StaticFieldNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.StaticFieldNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 37;
              break;
            }
            case 306: {
              clojureRT.protobuf.Protobuf.TheVarNode.Builder subBuilder = null;
              if (typesCase_ == 38) {
                subBuilder = ((clojureRT.protobuf.Protobuf.TheVarNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.TheVarNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.TheVarNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 38;
              break;
            }
            case 314: {
              clojureRT.protobuf.Protobuf.ThrowNode.Builder subBuilder = null;
              if (typesCase_ == 39) {
                subBuilder = ((clojureRT.protobuf.Protobuf.ThrowNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.ThrowNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.ThrowNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 39;
              break;
            }
            case 322: {
              clojureRT.protobuf.Protobuf.TryNode.Builder subBuilder = null;
              if (typesCase_ == 40) {
                subBuilder = ((clojureRT.protobuf.Protobuf.TryNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.TryNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.TryNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 40;
              break;
            }
            case 330: {
              clojureRT.protobuf.Protobuf.VarNode.Builder subBuilder = null;
              if (typesCase_ == 41) {
                subBuilder = ((clojureRT.protobuf.Protobuf.VarNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.VarNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.VarNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 41;
              break;
            }
            case 338: {
              clojureRT.protobuf.Protobuf.VectorNode.Builder subBuilder = null;
              if (typesCase_ == 42) {
                subBuilder = ((clojureRT.protobuf.Protobuf.VectorNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.VectorNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.VectorNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 42;
              break;
            }
            case 346: {
              clojureRT.protobuf.Protobuf.WithMetaNode.Builder subBuilder = null;
              if (typesCase_ == 43) {
                subBuilder = ((clojureRT.protobuf.Protobuf.WithMetaNode) types_).toBuilder();
              }
              types_ =
                  input.readMessage(clojureRT.protobuf.Protobuf.WithMetaNode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((clojureRT.protobuf.Protobuf.WithMetaNode) types_);
                types_ = subBuilder.buildPartial();
              }
              typesCase_ = 43;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Subnode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Subnode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.Subnode.class, clojureRT.protobuf.Protobuf.Subnode.Builder.class);
    }

    private int typesCase_ = 0;
    private java.lang.Object types_;
    public enum TypesCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      BINDING(1),
      CASE(2),
      CASETEST(3),
      CASETHEN(4),
      CATCH(5),
      CONST(6),
      DEF(7),
      DEFTYPE(8),
      DO(9),
      FN(10),
      FNMETHOD(11),
      HOSTINTEROP(12),
      IF(13),
      IMPORT(14),
      INSTANCECALL(15),
      INSTANCEFIELD(16),
      ISINSTANCE(17),
      INVOKE(18),
      KEYWORDINVOKE(19),
      LET(20),
      LETFN(21),
      LOCAL(22),
      LOOP(23),
      MAP(24),
      METHOD(25),
      MONITORENTER(26),
      MONITOREXIT(27),
      NEW(28),
      PRIMINVOKE(29),
      PROTOCOLINVOKE(30),
      QUOTE(31),
      RECUR(32),
      REIFY(33),
      SET(34),
      MUTATESET(35),
      STATICCALL(36),
      STATICFIELD(37),
      THEVAR(38),
      THROW(39),
      TRY(40),
      VAR(41),
      VECTOR(42),
      WITHMETA(43),
      TYPES_NOT_SET(0);
      private final int value;
      private TypesCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TypesCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypesCase forNumber(int value) {
        switch (value) {
          case 1: return BINDING;
          case 2: return CASE;
          case 3: return CASETEST;
          case 4: return CASETHEN;
          case 5: return CATCH;
          case 6: return CONST;
          case 7: return DEF;
          case 8: return DEFTYPE;
          case 9: return DO;
          case 10: return FN;
          case 11: return FNMETHOD;
          case 12: return HOSTINTEROP;
          case 13: return IF;
          case 14: return IMPORT;
          case 15: return INSTANCECALL;
          case 16: return INSTANCEFIELD;
          case 17: return ISINSTANCE;
          case 18: return INVOKE;
          case 19: return KEYWORDINVOKE;
          case 20: return LET;
          case 21: return LETFN;
          case 22: return LOCAL;
          case 23: return LOOP;
          case 24: return MAP;
          case 25: return METHOD;
          case 26: return MONITORENTER;
          case 27: return MONITOREXIT;
          case 28: return NEW;
          case 29: return PRIMINVOKE;
          case 30: return PROTOCOLINVOKE;
          case 31: return QUOTE;
          case 32: return RECUR;
          case 33: return REIFY;
          case 34: return SET;
          case 35: return MUTATESET;
          case 36: return STATICCALL;
          case 37: return STATICFIELD;
          case 38: return THEVAR;
          case 39: return THROW;
          case 40: return TRY;
          case 41: return VAR;
          case 42: return VECTOR;
          case 43: return WITHMETA;
          case 0: return TYPES_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypesCase
    getTypesCase() {
      return TypesCase.forNumber(
          typesCase_);
    }

    public static final int BINDING_FIELD_NUMBER = 1;
    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     * @return Whether the binding field is set.
     */
    @java.lang.Override
    public boolean hasBinding() {
      return typesCase_ == 1;
    }
    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     * @return The binding.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.BindingNode getBinding() {
      if (typesCase_ == 1) {
         return (clojureRT.protobuf.Protobuf.BindingNode) types_;
      }
      return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.BindingNodeOrBuilder getBindingOrBuilder() {
      if (typesCase_ == 1) {
         return (clojureRT.protobuf.Protobuf.BindingNode) types_;
      }
      return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
    }

    public static final int CASE_FIELD_NUMBER = 2;
    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     * @return Whether the case field is set.
     */
    @java.lang.Override
    public boolean hasCase() {
      return typesCase_ == 2;
    }
    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     * @return The case.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseNode getCase() {
      if (typesCase_ == 2) {
         return (clojureRT.protobuf.Protobuf.CaseNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseNodeOrBuilder getCaseOrBuilder() {
      if (typesCase_ == 2) {
         return (clojureRT.protobuf.Protobuf.CaseNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
    }

    public static final int CASETEST_FIELD_NUMBER = 3;
    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     * @return Whether the caseTest field is set.
     */
    @java.lang.Override
    public boolean hasCaseTest() {
      return typesCase_ == 3;
    }
    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     * @return The caseTest.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseTestNode getCaseTest() {
      if (typesCase_ == 3) {
         return (clojureRT.protobuf.Protobuf.CaseTestNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder getCaseTestOrBuilder() {
      if (typesCase_ == 3) {
         return (clojureRT.protobuf.Protobuf.CaseTestNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
    }

    public static final int CASETHEN_FIELD_NUMBER = 4;
    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     * @return Whether the caseThen field is set.
     */
    @java.lang.Override
    public boolean hasCaseThen() {
      return typesCase_ == 4;
    }
    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     * @return The caseThen.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseThenNode getCaseThen() {
      if (typesCase_ == 4) {
         return (clojureRT.protobuf.Protobuf.CaseThenNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder getCaseThenOrBuilder() {
      if (typesCase_ == 4) {
         return (clojureRT.protobuf.Protobuf.CaseThenNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
    }

    public static final int CATCH_FIELD_NUMBER = 5;
    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     * @return Whether the catch field is set.
     */
    @java.lang.Override
    public boolean hasCatch() {
      return typesCase_ == 5;
    }
    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     * @return The catch.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CatchNode getCatch() {
      if (typesCase_ == 5) {
         return (clojureRT.protobuf.Protobuf.CatchNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CatchNodeOrBuilder getCatchOrBuilder() {
      if (typesCase_ == 5) {
         return (clojureRT.protobuf.Protobuf.CatchNode) types_;
      }
      return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
    }

    public static final int CONST_FIELD_NUMBER = 6;
    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     * @return Whether the const field is set.
     */
    @java.lang.Override
    public boolean hasConst() {
      return typesCase_ == 6;
    }
    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     * @return The const.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ConstNode getConst() {
      if (typesCase_ == 6) {
         return (clojureRT.protobuf.Protobuf.ConstNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ConstNodeOrBuilder getConstOrBuilder() {
      if (typesCase_ == 6) {
         return (clojureRT.protobuf.Protobuf.ConstNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
    }

    public static final int DEF_FIELD_NUMBER = 7;
    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     * @return Whether the def field is set.
     */
    @java.lang.Override
    public boolean hasDef() {
      return typesCase_ == 7;
    }
    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     * @return The def.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DefNode getDef() {
      if (typesCase_ == 7) {
         return (clojureRT.protobuf.Protobuf.DefNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.DefNode def = 7;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DefNodeOrBuilder getDefOrBuilder() {
      if (typesCase_ == 7) {
         return (clojureRT.protobuf.Protobuf.DefNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
    }

    public static final int DEFTYPE_FIELD_NUMBER = 8;
    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     * @return Whether the deftype field is set.
     */
    @java.lang.Override
    public boolean hasDeftype() {
      return typesCase_ == 8;
    }
    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     * @return The deftype.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DeftypeNode getDeftype() {
      if (typesCase_ == 8) {
         return (clojureRT.protobuf.Protobuf.DeftypeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder getDeftypeOrBuilder() {
      if (typesCase_ == 8) {
         return (clojureRT.protobuf.Protobuf.DeftypeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
    }

    public static final int DO_FIELD_NUMBER = 9;
    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     * @return Whether the do field is set.
     */
    @java.lang.Override
    public boolean hasDo() {
      return typesCase_ == 9;
    }
    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     * @return The do.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DoNode getDo() {
      if (typesCase_ == 9) {
         return (clojureRT.protobuf.Protobuf.DoNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.DoNode do = 9;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DoNodeOrBuilder getDoOrBuilder() {
      if (typesCase_ == 9) {
         return (clojureRT.protobuf.Protobuf.DoNode) types_;
      }
      return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
    }

    public static final int FN_FIELD_NUMBER = 10;
    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     * @return Whether the fn field is set.
     */
    @java.lang.Override
    public boolean hasFn() {
      return typesCase_ == 10;
    }
    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     * @return The fn.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnNode getFn() {
      if (typesCase_ == 10) {
         return (clojureRT.protobuf.Protobuf.FnNode) types_;
      }
      return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnNodeOrBuilder getFnOrBuilder() {
      if (typesCase_ == 10) {
         return (clojureRT.protobuf.Protobuf.FnNode) types_;
      }
      return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
    }

    public static final int FNMETHOD_FIELD_NUMBER = 11;
    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     * @return Whether the fnMethod field is set.
     */
    @java.lang.Override
    public boolean hasFnMethod() {
      return typesCase_ == 11;
    }
    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     * @return The fnMethod.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnMethodNode getFnMethod() {
      if (typesCase_ == 11) {
         return (clojureRT.protobuf.Protobuf.FnMethodNode) types_;
      }
      return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder getFnMethodOrBuilder() {
      if (typesCase_ == 11) {
         return (clojureRT.protobuf.Protobuf.FnMethodNode) types_;
      }
      return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
    }

    public static final int HOSTINTEROP_FIELD_NUMBER = 12;
    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     * @return Whether the hostInterop field is set.
     */
    @java.lang.Override
    public boolean hasHostInterop() {
      return typesCase_ == 12;
    }
    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     * @return The hostInterop.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.HostInteropNode getHostInterop() {
      if (typesCase_ == 12) {
         return (clojureRT.protobuf.Protobuf.HostInteropNode) types_;
      }
      return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder getHostInteropOrBuilder() {
      if (typesCase_ == 12) {
         return (clojureRT.protobuf.Protobuf.HostInteropNode) types_;
      }
      return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
    }

    public static final int IF_FIELD_NUMBER = 13;
    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     * @return Whether the if field is set.
     */
    @java.lang.Override
    public boolean hasIf() {
      return typesCase_ == 13;
    }
    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     * @return The if.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IfNode getIf() {
      if (typesCase_ == 13) {
         return (clojureRT.protobuf.Protobuf.IfNode) types_;
      }
      return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.IfNode if = 13;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IfNodeOrBuilder getIfOrBuilder() {
      if (typesCase_ == 13) {
         return (clojureRT.protobuf.Protobuf.IfNode) types_;
      }
      return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
    }

    public static final int IMPORT_FIELD_NUMBER = 14;
    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     * @return Whether the import field is set.
     */
    @java.lang.Override
    public boolean hasImport() {
      return typesCase_ == 14;
    }
    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     * @return The import.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ImportNode getImport() {
      if (typesCase_ == 14) {
         return (clojureRT.protobuf.Protobuf.ImportNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ImportNodeOrBuilder getImportOrBuilder() {
      if (typesCase_ == 14) {
         return (clojureRT.protobuf.Protobuf.ImportNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
    }

    public static final int INSTANCECALL_FIELD_NUMBER = 15;
    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     * @return Whether the instanceCall field is set.
     */
    @java.lang.Override
    public boolean hasInstanceCall() {
      return typesCase_ == 15;
    }
    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     * @return The instanceCall.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceCallNode getInstanceCall() {
      if (typesCase_ == 15) {
         return (clojureRT.protobuf.Protobuf.InstanceCallNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder getInstanceCallOrBuilder() {
      if (typesCase_ == 15) {
         return (clojureRT.protobuf.Protobuf.InstanceCallNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
    }

    public static final int INSTANCEFIELD_FIELD_NUMBER = 16;
    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     * @return Whether the instanceField field is set.
     */
    @java.lang.Override
    public boolean hasInstanceField() {
      return typesCase_ == 16;
    }
    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     * @return The instanceField.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceFieldNode getInstanceField() {
      if (typesCase_ == 16) {
         return (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder getInstanceFieldOrBuilder() {
      if (typesCase_ == 16) {
         return (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
    }

    public static final int ISINSTANCE_FIELD_NUMBER = 17;
    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     * @return Whether the isInstance field is set.
     */
    @java.lang.Override
    public boolean hasIsInstance() {
      return typesCase_ == 17;
    }
    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     * @return The isInstance.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IsInstanceNode getIsInstance() {
      if (typesCase_ == 17) {
         return (clojureRT.protobuf.Protobuf.IsInstanceNode) types_;
      }
      return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder getIsInstanceOrBuilder() {
      if (typesCase_ == 17) {
         return (clojureRT.protobuf.Protobuf.IsInstanceNode) types_;
      }
      return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
    }

    public static final int INVOKE_FIELD_NUMBER = 18;
    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     * @return Whether the invoke field is set.
     */
    @java.lang.Override
    public boolean hasInvoke() {
      return typesCase_ == 18;
    }
    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     * @return The invoke.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InvokeNode getInvoke() {
      if (typesCase_ == 18) {
         return (clojureRT.protobuf.Protobuf.InvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder getInvokeOrBuilder() {
      if (typesCase_ == 18) {
         return (clojureRT.protobuf.Protobuf.InvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
    }

    public static final int KEYWORDINVOKE_FIELD_NUMBER = 19;
    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     * @return Whether the keywordInvoke field is set.
     */
    @java.lang.Override
    public boolean hasKeywordInvoke() {
      return typesCase_ == 19;
    }
    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     * @return The keywordInvoke.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.KeywordInvokeNode getKeywordInvoke() {
      if (typesCase_ == 19) {
         return (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder getKeywordInvokeOrBuilder() {
      if (typesCase_ == 19) {
         return (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
    }

    public static final int LET_FIELD_NUMBER = 20;
    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     * @return Whether the let field is set.
     */
    @java.lang.Override
    public boolean hasLet() {
      return typesCase_ == 20;
    }
    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     * @return The let.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetNode getLet() {
      if (typesCase_ == 20) {
         return (clojureRT.protobuf.Protobuf.LetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.LetNode let = 20;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetNodeOrBuilder getLetOrBuilder() {
      if (typesCase_ == 20) {
         return (clojureRT.protobuf.Protobuf.LetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
    }

    public static final int LETFN_FIELD_NUMBER = 21;
    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     * @return Whether the letfn field is set.
     */
    @java.lang.Override
    public boolean hasLetfn() {
      return typesCase_ == 21;
    }
    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     * @return The letfn.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetfnNode getLetfn() {
      if (typesCase_ == 21) {
         return (clojureRT.protobuf.Protobuf.LetfnNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder getLetfnOrBuilder() {
      if (typesCase_ == 21) {
         return (clojureRT.protobuf.Protobuf.LetfnNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
    }

    public static final int LOCAL_FIELD_NUMBER = 22;
    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     * @return Whether the local field is set.
     */
    @java.lang.Override
    public boolean hasLocal() {
      return typesCase_ == 22;
    }
    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     * @return The local.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LocalNode getLocal() {
      if (typesCase_ == 22) {
         return (clojureRT.protobuf.Protobuf.LocalNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LocalNodeOrBuilder getLocalOrBuilder() {
      if (typesCase_ == 22) {
         return (clojureRT.protobuf.Protobuf.LocalNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
    }

    public static final int LOOP_FIELD_NUMBER = 23;
    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     * @return Whether the loop field is set.
     */
    @java.lang.Override
    public boolean hasLoop() {
      return typesCase_ == 23;
    }
    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     * @return The loop.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LoopNode getLoop() {
      if (typesCase_ == 23) {
         return (clojureRT.protobuf.Protobuf.LoopNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LoopNodeOrBuilder getLoopOrBuilder() {
      if (typesCase_ == 23) {
         return (clojureRT.protobuf.Protobuf.LoopNode) types_;
      }
      return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
    }

    public static final int MAP_FIELD_NUMBER = 24;
    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     * @return Whether the map field is set.
     */
    @java.lang.Override
    public boolean hasMap() {
      return typesCase_ == 24;
    }
    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     * @return The map.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MapNode getMap() {
      if (typesCase_ == 24) {
         return (clojureRT.protobuf.Protobuf.MapNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.MapNode map = 24;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MapNodeOrBuilder getMapOrBuilder() {
      if (typesCase_ == 24) {
         return (clojureRT.protobuf.Protobuf.MapNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
    }

    public static final int METHOD_FIELD_NUMBER = 25;
    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     * @return Whether the method field is set.
     */
    @java.lang.Override
    public boolean hasMethod() {
      return typesCase_ == 25;
    }
    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     * @return The method.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MethodNode getMethod() {
      if (typesCase_ == 25) {
         return (clojureRT.protobuf.Protobuf.MethodNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MethodNodeOrBuilder getMethodOrBuilder() {
      if (typesCase_ == 25) {
         return (clojureRT.protobuf.Protobuf.MethodNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
    }

    public static final int MONITORENTER_FIELD_NUMBER = 26;
    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     * @return Whether the monitorEnter field is set.
     */
    @java.lang.Override
    public boolean hasMonitorEnter() {
      return typesCase_ == 26;
    }
    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     * @return The monitorEnter.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorEnterNode getMonitorEnter() {
      if (typesCase_ == 26) {
         return (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder getMonitorEnterOrBuilder() {
      if (typesCase_ == 26) {
         return (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
    }

    public static final int MONITOREXIT_FIELD_NUMBER = 27;
    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     * @return Whether the monitorExit field is set.
     */
    @java.lang.Override
    public boolean hasMonitorExit() {
      return typesCase_ == 27;
    }
    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     * @return The monitorExit.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorExitNode getMonitorExit() {
      if (typesCase_ == 27) {
         return (clojureRT.protobuf.Protobuf.MonitorExitNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder getMonitorExitOrBuilder() {
      if (typesCase_ == 27) {
         return (clojureRT.protobuf.Protobuf.MonitorExitNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
    }

    public static final int NEW_FIELD_NUMBER = 28;
    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     * @return Whether the new field is set.
     */
    @java.lang.Override
    public boolean hasNew() {
      return typesCase_ == 28;
    }
    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     * @return The new.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NewNode getNew() {
      if (typesCase_ == 28) {
         return (clojureRT.protobuf.Protobuf.NewNode) types_;
      }
      return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.NewNode new = 28;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NewNodeOrBuilder getNewOrBuilder() {
      if (typesCase_ == 28) {
         return (clojureRT.protobuf.Protobuf.NewNode) types_;
      }
      return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
    }

    public static final int PRIMINVOKE_FIELD_NUMBER = 29;
    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     * @return Whether the primInvoke field is set.
     */
    @java.lang.Override
    public boolean hasPrimInvoke() {
      return typesCase_ == 29;
    }
    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     * @return The primInvoke.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.PrimInvokeNode getPrimInvoke() {
      if (typesCase_ == 29) {
         return (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder getPrimInvokeOrBuilder() {
      if (typesCase_ == 29) {
         return (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
    }

    public static final int PROTOCOLINVOKE_FIELD_NUMBER = 30;
    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     * @return Whether the protocolInvoke field is set.
     */
    @java.lang.Override
    public boolean hasProtocolInvoke() {
      return typesCase_ == 30;
    }
    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     * @return The protocolInvoke.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ProtocolInvokeNode getProtocolInvoke() {
      if (typesCase_ == 30) {
         return (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder getProtocolInvokeOrBuilder() {
      if (typesCase_ == 30) {
         return (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
    }

    public static final int QUOTE_FIELD_NUMBER = 31;
    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     * @return Whether the quote field is set.
     */
    @java.lang.Override
    public boolean hasQuote() {
      return typesCase_ == 31;
    }
    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     * @return The quote.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.QuoteNode getQuote() {
      if (typesCase_ == 31) {
         return (clojureRT.protobuf.Protobuf.QuoteNode) types_;
      }
      return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder getQuoteOrBuilder() {
      if (typesCase_ == 31) {
         return (clojureRT.protobuf.Protobuf.QuoteNode) types_;
      }
      return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
    }

    public static final int RECUR_FIELD_NUMBER = 32;
    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     * @return Whether the recur field is set.
     */
    @java.lang.Override
    public boolean hasRecur() {
      return typesCase_ == 32;
    }
    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     * @return The recur.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.RecurNode getRecur() {
      if (typesCase_ == 32) {
         return (clojureRT.protobuf.Protobuf.RecurNode) types_;
      }
      return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.RecurNodeOrBuilder getRecurOrBuilder() {
      if (typesCase_ == 32) {
         return (clojureRT.protobuf.Protobuf.RecurNode) types_;
      }
      return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
    }

    public static final int REIFY_FIELD_NUMBER = 33;
    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     * @return Whether the reify field is set.
     */
    @java.lang.Override
    public boolean hasReify() {
      return typesCase_ == 33;
    }
    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     * @return The reify.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ReifyNode getReify() {
      if (typesCase_ == 33) {
         return (clojureRT.protobuf.Protobuf.ReifyNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder getReifyOrBuilder() {
      if (typesCase_ == 33) {
         return (clojureRT.protobuf.Protobuf.ReifyNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
    }

    public static final int SET_FIELD_NUMBER = 34;
    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     * @return Whether the set field is set.
     */
    @java.lang.Override
    public boolean hasSet() {
      return typesCase_ == 34;
    }
    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     * @return The set.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.SetNode getSet() {
      if (typesCase_ == 34) {
         return (clojureRT.protobuf.Protobuf.SetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.SetNode set = 34;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.SetNodeOrBuilder getSetOrBuilder() {
      if (typesCase_ == 34) {
         return (clojureRT.protobuf.Protobuf.SetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
    }

    public static final int MUTATESET_FIELD_NUMBER = 35;
    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     * @return Whether the mutateSet field is set.
     */
    @java.lang.Override
    public boolean hasMutateSet() {
      return typesCase_ == 35;
    }
    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     * @return The mutateSet.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MutateSetNode getMutateSet() {
      if (typesCase_ == 35) {
         return (clojureRT.protobuf.Protobuf.MutateSetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder getMutateSetOrBuilder() {
      if (typesCase_ == 35) {
         return (clojureRT.protobuf.Protobuf.MutateSetNode) types_;
      }
      return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
    }

    public static final int STATICCALL_FIELD_NUMBER = 36;
    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     * @return Whether the staticCall field is set.
     */
    @java.lang.Override
    public boolean hasStaticCall() {
      return typesCase_ == 36;
    }
    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     * @return The staticCall.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticCallNode getStaticCall() {
      if (typesCase_ == 36) {
         return (clojureRT.protobuf.Protobuf.StaticCallNode) types_;
      }
      return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder getStaticCallOrBuilder() {
      if (typesCase_ == 36) {
         return (clojureRT.protobuf.Protobuf.StaticCallNode) types_;
      }
      return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
    }

    public static final int STATICFIELD_FIELD_NUMBER = 37;
    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     * @return Whether the staticField field is set.
     */
    @java.lang.Override
    public boolean hasStaticField() {
      return typesCase_ == 37;
    }
    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     * @return The staticField.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticFieldNode getStaticField() {
      if (typesCase_ == 37) {
         return (clojureRT.protobuf.Protobuf.StaticFieldNode) types_;
      }
      return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder getStaticFieldOrBuilder() {
      if (typesCase_ == 37) {
         return (clojureRT.protobuf.Protobuf.StaticFieldNode) types_;
      }
      return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
    }

    public static final int THEVAR_FIELD_NUMBER = 38;
    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     * @return Whether the theVar field is set.
     */
    @java.lang.Override
    public boolean hasTheVar() {
      return typesCase_ == 38;
    }
    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     * @return The theVar.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TheVarNode getTheVar() {
      if (typesCase_ == 38) {
         return (clojureRT.protobuf.Protobuf.TheVarNode) types_;
      }
      return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder getTheVarOrBuilder() {
      if (typesCase_ == 38) {
         return (clojureRT.protobuf.Protobuf.TheVarNode) types_;
      }
      return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
    }

    public static final int THROW_FIELD_NUMBER = 39;
    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     * @return Whether the throw field is set.
     */
    @java.lang.Override
    public boolean hasThrow() {
      return typesCase_ == 39;
    }
    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     * @return The throw.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ThrowNode getThrow() {
      if (typesCase_ == 39) {
         return (clojureRT.protobuf.Protobuf.ThrowNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder getThrowOrBuilder() {
      if (typesCase_ == 39) {
         return (clojureRT.protobuf.Protobuf.ThrowNode) types_;
      }
      return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
    }

    public static final int TRY_FIELD_NUMBER = 40;
    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     * @return Whether the try field is set.
     */
    @java.lang.Override
    public boolean hasTry() {
      return typesCase_ == 40;
    }
    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     * @return The try.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TryNode getTry() {
      if (typesCase_ == 40) {
         return (clojureRT.protobuf.Protobuf.TryNode) types_;
      }
      return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.TryNode try = 40;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TryNodeOrBuilder getTryOrBuilder() {
      if (typesCase_ == 40) {
         return (clojureRT.protobuf.Protobuf.TryNode) types_;
      }
      return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
    }

    public static final int VAR_FIELD_NUMBER = 41;
    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     * @return Whether the var field is set.
     */
    @java.lang.Override
    public boolean hasVar() {
      return typesCase_ == 41;
    }
    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     * @return The var.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VarNode getVar() {
      if (typesCase_ == 41) {
         return (clojureRT.protobuf.Protobuf.VarNode) types_;
      }
      return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.VarNode var = 41;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VarNodeOrBuilder getVarOrBuilder() {
      if (typesCase_ == 41) {
         return (clojureRT.protobuf.Protobuf.VarNode) types_;
      }
      return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
    }

    public static final int VECTOR_FIELD_NUMBER = 42;
    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     * @return Whether the vector field is set.
     */
    @java.lang.Override
    public boolean hasVector() {
      return typesCase_ == 42;
    }
    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     * @return The vector.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VectorNode getVector() {
      if (typesCase_ == 42) {
         return (clojureRT.protobuf.Protobuf.VectorNode) types_;
      }
      return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VectorNodeOrBuilder getVectorOrBuilder() {
      if (typesCase_ == 42) {
         return (clojureRT.protobuf.Protobuf.VectorNode) types_;
      }
      return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
    }

    public static final int WITHMETA_FIELD_NUMBER = 43;
    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     * @return Whether the withMeta field is set.
     */
    @java.lang.Override
    public boolean hasWithMeta() {
      return typesCase_ == 43;
    }
    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     * @return The withMeta.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.WithMetaNode getWithMeta() {
      if (typesCase_ == 43) {
         return (clojureRT.protobuf.Protobuf.WithMetaNode) types_;
      }
      return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
    }
    /**
     * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder getWithMetaOrBuilder() {
      if (typesCase_ == 43) {
         return (clojureRT.protobuf.Protobuf.WithMetaNode) types_;
      }
      return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typesCase_ == 1) {
        output.writeMessage(1, (clojureRT.protobuf.Protobuf.BindingNode) types_);
      }
      if (typesCase_ == 2) {
        output.writeMessage(2, (clojureRT.protobuf.Protobuf.CaseNode) types_);
      }
      if (typesCase_ == 3) {
        output.writeMessage(3, (clojureRT.protobuf.Protobuf.CaseTestNode) types_);
      }
      if (typesCase_ == 4) {
        output.writeMessage(4, (clojureRT.protobuf.Protobuf.CaseThenNode) types_);
      }
      if (typesCase_ == 5) {
        output.writeMessage(5, (clojureRT.protobuf.Protobuf.CatchNode) types_);
      }
      if (typesCase_ == 6) {
        output.writeMessage(6, (clojureRT.protobuf.Protobuf.ConstNode) types_);
      }
      if (typesCase_ == 7) {
        output.writeMessage(7, (clojureRT.protobuf.Protobuf.DefNode) types_);
      }
      if (typesCase_ == 8) {
        output.writeMessage(8, (clojureRT.protobuf.Protobuf.DeftypeNode) types_);
      }
      if (typesCase_ == 9) {
        output.writeMessage(9, (clojureRT.protobuf.Protobuf.DoNode) types_);
      }
      if (typesCase_ == 10) {
        output.writeMessage(10, (clojureRT.protobuf.Protobuf.FnNode) types_);
      }
      if (typesCase_ == 11) {
        output.writeMessage(11, (clojureRT.protobuf.Protobuf.FnMethodNode) types_);
      }
      if (typesCase_ == 12) {
        output.writeMessage(12, (clojureRT.protobuf.Protobuf.HostInteropNode) types_);
      }
      if (typesCase_ == 13) {
        output.writeMessage(13, (clojureRT.protobuf.Protobuf.IfNode) types_);
      }
      if (typesCase_ == 14) {
        output.writeMessage(14, (clojureRT.protobuf.Protobuf.ImportNode) types_);
      }
      if (typesCase_ == 15) {
        output.writeMessage(15, (clojureRT.protobuf.Protobuf.InstanceCallNode) types_);
      }
      if (typesCase_ == 16) {
        output.writeMessage(16, (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_);
      }
      if (typesCase_ == 17) {
        output.writeMessage(17, (clojureRT.protobuf.Protobuf.IsInstanceNode) types_);
      }
      if (typesCase_ == 18) {
        output.writeMessage(18, (clojureRT.protobuf.Protobuf.InvokeNode) types_);
      }
      if (typesCase_ == 19) {
        output.writeMessage(19, (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_);
      }
      if (typesCase_ == 20) {
        output.writeMessage(20, (clojureRT.protobuf.Protobuf.LetNode) types_);
      }
      if (typesCase_ == 21) {
        output.writeMessage(21, (clojureRT.protobuf.Protobuf.LetfnNode) types_);
      }
      if (typesCase_ == 22) {
        output.writeMessage(22, (clojureRT.protobuf.Protobuf.LocalNode) types_);
      }
      if (typesCase_ == 23) {
        output.writeMessage(23, (clojureRT.protobuf.Protobuf.LoopNode) types_);
      }
      if (typesCase_ == 24) {
        output.writeMessage(24, (clojureRT.protobuf.Protobuf.MapNode) types_);
      }
      if (typesCase_ == 25) {
        output.writeMessage(25, (clojureRT.protobuf.Protobuf.MethodNode) types_);
      }
      if (typesCase_ == 26) {
        output.writeMessage(26, (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_);
      }
      if (typesCase_ == 27) {
        output.writeMessage(27, (clojureRT.protobuf.Protobuf.MonitorExitNode) types_);
      }
      if (typesCase_ == 28) {
        output.writeMessage(28, (clojureRT.protobuf.Protobuf.NewNode) types_);
      }
      if (typesCase_ == 29) {
        output.writeMessage(29, (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_);
      }
      if (typesCase_ == 30) {
        output.writeMessage(30, (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_);
      }
      if (typesCase_ == 31) {
        output.writeMessage(31, (clojureRT.protobuf.Protobuf.QuoteNode) types_);
      }
      if (typesCase_ == 32) {
        output.writeMessage(32, (clojureRT.protobuf.Protobuf.RecurNode) types_);
      }
      if (typesCase_ == 33) {
        output.writeMessage(33, (clojureRT.protobuf.Protobuf.ReifyNode) types_);
      }
      if (typesCase_ == 34) {
        output.writeMessage(34, (clojureRT.protobuf.Protobuf.SetNode) types_);
      }
      if (typesCase_ == 35) {
        output.writeMessage(35, (clojureRT.protobuf.Protobuf.MutateSetNode) types_);
      }
      if (typesCase_ == 36) {
        output.writeMessage(36, (clojureRT.protobuf.Protobuf.StaticCallNode) types_);
      }
      if (typesCase_ == 37) {
        output.writeMessage(37, (clojureRT.protobuf.Protobuf.StaticFieldNode) types_);
      }
      if (typesCase_ == 38) {
        output.writeMessage(38, (clojureRT.protobuf.Protobuf.TheVarNode) types_);
      }
      if (typesCase_ == 39) {
        output.writeMessage(39, (clojureRT.protobuf.Protobuf.ThrowNode) types_);
      }
      if (typesCase_ == 40) {
        output.writeMessage(40, (clojureRT.protobuf.Protobuf.TryNode) types_);
      }
      if (typesCase_ == 41) {
        output.writeMessage(41, (clojureRT.protobuf.Protobuf.VarNode) types_);
      }
      if (typesCase_ == 42) {
        output.writeMessage(42, (clojureRT.protobuf.Protobuf.VectorNode) types_);
      }
      if (typesCase_ == 43) {
        output.writeMessage(43, (clojureRT.protobuf.Protobuf.WithMetaNode) types_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typesCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (clojureRT.protobuf.Protobuf.BindingNode) types_);
      }
      if (typesCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (clojureRT.protobuf.Protobuf.CaseNode) types_);
      }
      if (typesCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (clojureRT.protobuf.Protobuf.CaseTestNode) types_);
      }
      if (typesCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (clojureRT.protobuf.Protobuf.CaseThenNode) types_);
      }
      if (typesCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (clojureRT.protobuf.Protobuf.CatchNode) types_);
      }
      if (typesCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (clojureRT.protobuf.Protobuf.ConstNode) types_);
      }
      if (typesCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (clojureRT.protobuf.Protobuf.DefNode) types_);
      }
      if (typesCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, (clojureRT.protobuf.Protobuf.DeftypeNode) types_);
      }
      if (typesCase_ == 9) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, (clojureRT.protobuf.Protobuf.DoNode) types_);
      }
      if (typesCase_ == 10) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, (clojureRT.protobuf.Protobuf.FnNode) types_);
      }
      if (typesCase_ == 11) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, (clojureRT.protobuf.Protobuf.FnMethodNode) types_);
      }
      if (typesCase_ == 12) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, (clojureRT.protobuf.Protobuf.HostInteropNode) types_);
      }
      if (typesCase_ == 13) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(13, (clojureRT.protobuf.Protobuf.IfNode) types_);
      }
      if (typesCase_ == 14) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(14, (clojureRT.protobuf.Protobuf.ImportNode) types_);
      }
      if (typesCase_ == 15) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(15, (clojureRT.protobuf.Protobuf.InstanceCallNode) types_);
      }
      if (typesCase_ == 16) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(16, (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_);
      }
      if (typesCase_ == 17) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(17, (clojureRT.protobuf.Protobuf.IsInstanceNode) types_);
      }
      if (typesCase_ == 18) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(18, (clojureRT.protobuf.Protobuf.InvokeNode) types_);
      }
      if (typesCase_ == 19) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(19, (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_);
      }
      if (typesCase_ == 20) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(20, (clojureRT.protobuf.Protobuf.LetNode) types_);
      }
      if (typesCase_ == 21) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(21, (clojureRT.protobuf.Protobuf.LetfnNode) types_);
      }
      if (typesCase_ == 22) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(22, (clojureRT.protobuf.Protobuf.LocalNode) types_);
      }
      if (typesCase_ == 23) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(23, (clojureRT.protobuf.Protobuf.LoopNode) types_);
      }
      if (typesCase_ == 24) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(24, (clojureRT.protobuf.Protobuf.MapNode) types_);
      }
      if (typesCase_ == 25) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(25, (clojureRT.protobuf.Protobuf.MethodNode) types_);
      }
      if (typesCase_ == 26) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(26, (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_);
      }
      if (typesCase_ == 27) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(27, (clojureRT.protobuf.Protobuf.MonitorExitNode) types_);
      }
      if (typesCase_ == 28) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(28, (clojureRT.protobuf.Protobuf.NewNode) types_);
      }
      if (typesCase_ == 29) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(29, (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_);
      }
      if (typesCase_ == 30) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(30, (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_);
      }
      if (typesCase_ == 31) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(31, (clojureRT.protobuf.Protobuf.QuoteNode) types_);
      }
      if (typesCase_ == 32) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(32, (clojureRT.protobuf.Protobuf.RecurNode) types_);
      }
      if (typesCase_ == 33) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(33, (clojureRT.protobuf.Protobuf.ReifyNode) types_);
      }
      if (typesCase_ == 34) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(34, (clojureRT.protobuf.Protobuf.SetNode) types_);
      }
      if (typesCase_ == 35) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(35, (clojureRT.protobuf.Protobuf.MutateSetNode) types_);
      }
      if (typesCase_ == 36) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(36, (clojureRT.protobuf.Protobuf.StaticCallNode) types_);
      }
      if (typesCase_ == 37) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(37, (clojureRT.protobuf.Protobuf.StaticFieldNode) types_);
      }
      if (typesCase_ == 38) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(38, (clojureRT.protobuf.Protobuf.TheVarNode) types_);
      }
      if (typesCase_ == 39) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(39, (clojureRT.protobuf.Protobuf.ThrowNode) types_);
      }
      if (typesCase_ == 40) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(40, (clojureRT.protobuf.Protobuf.TryNode) types_);
      }
      if (typesCase_ == 41) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(41, (clojureRT.protobuf.Protobuf.VarNode) types_);
      }
      if (typesCase_ == 42) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(42, (clojureRT.protobuf.Protobuf.VectorNode) types_);
      }
      if (typesCase_ == 43) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(43, (clojureRT.protobuf.Protobuf.WithMetaNode) types_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.Subnode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.Subnode other = (clojureRT.protobuf.Protobuf.Subnode) obj;

      if (!getTypesCase().equals(other.getTypesCase())) return false;
      switch (typesCase_) {
        case 1:
          if (!getBinding()
              .equals(other.getBinding())) return false;
          break;
        case 2:
          if (!getCase()
              .equals(other.getCase())) return false;
          break;
        case 3:
          if (!getCaseTest()
              .equals(other.getCaseTest())) return false;
          break;
        case 4:
          if (!getCaseThen()
              .equals(other.getCaseThen())) return false;
          break;
        case 5:
          if (!getCatch()
              .equals(other.getCatch())) return false;
          break;
        case 6:
          if (!getConst()
              .equals(other.getConst())) return false;
          break;
        case 7:
          if (!getDef()
              .equals(other.getDef())) return false;
          break;
        case 8:
          if (!getDeftype()
              .equals(other.getDeftype())) return false;
          break;
        case 9:
          if (!getDo()
              .equals(other.getDo())) return false;
          break;
        case 10:
          if (!getFn()
              .equals(other.getFn())) return false;
          break;
        case 11:
          if (!getFnMethod()
              .equals(other.getFnMethod())) return false;
          break;
        case 12:
          if (!getHostInterop()
              .equals(other.getHostInterop())) return false;
          break;
        case 13:
          if (!getIf()
              .equals(other.getIf())) return false;
          break;
        case 14:
          if (!getImport()
              .equals(other.getImport())) return false;
          break;
        case 15:
          if (!getInstanceCall()
              .equals(other.getInstanceCall())) return false;
          break;
        case 16:
          if (!getInstanceField()
              .equals(other.getInstanceField())) return false;
          break;
        case 17:
          if (!getIsInstance()
              .equals(other.getIsInstance())) return false;
          break;
        case 18:
          if (!getInvoke()
              .equals(other.getInvoke())) return false;
          break;
        case 19:
          if (!getKeywordInvoke()
              .equals(other.getKeywordInvoke())) return false;
          break;
        case 20:
          if (!getLet()
              .equals(other.getLet())) return false;
          break;
        case 21:
          if (!getLetfn()
              .equals(other.getLetfn())) return false;
          break;
        case 22:
          if (!getLocal()
              .equals(other.getLocal())) return false;
          break;
        case 23:
          if (!getLoop()
              .equals(other.getLoop())) return false;
          break;
        case 24:
          if (!getMap()
              .equals(other.getMap())) return false;
          break;
        case 25:
          if (!getMethod()
              .equals(other.getMethod())) return false;
          break;
        case 26:
          if (!getMonitorEnter()
              .equals(other.getMonitorEnter())) return false;
          break;
        case 27:
          if (!getMonitorExit()
              .equals(other.getMonitorExit())) return false;
          break;
        case 28:
          if (!getNew()
              .equals(other.getNew())) return false;
          break;
        case 29:
          if (!getPrimInvoke()
              .equals(other.getPrimInvoke())) return false;
          break;
        case 30:
          if (!getProtocolInvoke()
              .equals(other.getProtocolInvoke())) return false;
          break;
        case 31:
          if (!getQuote()
              .equals(other.getQuote())) return false;
          break;
        case 32:
          if (!getRecur()
              .equals(other.getRecur())) return false;
          break;
        case 33:
          if (!getReify()
              .equals(other.getReify())) return false;
          break;
        case 34:
          if (!getSet()
              .equals(other.getSet())) return false;
          break;
        case 35:
          if (!getMutateSet()
              .equals(other.getMutateSet())) return false;
          break;
        case 36:
          if (!getStaticCall()
              .equals(other.getStaticCall())) return false;
          break;
        case 37:
          if (!getStaticField()
              .equals(other.getStaticField())) return false;
          break;
        case 38:
          if (!getTheVar()
              .equals(other.getTheVar())) return false;
          break;
        case 39:
          if (!getThrow()
              .equals(other.getThrow())) return false;
          break;
        case 40:
          if (!getTry()
              .equals(other.getTry())) return false;
          break;
        case 41:
          if (!getVar()
              .equals(other.getVar())) return false;
          break;
        case 42:
          if (!getVector()
              .equals(other.getVector())) return false;
          break;
        case 43:
          if (!getWithMeta()
              .equals(other.getWithMeta())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (typesCase_) {
        case 1:
          hash = (37 * hash) + BINDING_FIELD_NUMBER;
          hash = (53 * hash) + getBinding().hashCode();
          break;
        case 2:
          hash = (37 * hash) + CASE_FIELD_NUMBER;
          hash = (53 * hash) + getCase().hashCode();
          break;
        case 3:
          hash = (37 * hash) + CASETEST_FIELD_NUMBER;
          hash = (53 * hash) + getCaseTest().hashCode();
          break;
        case 4:
          hash = (37 * hash) + CASETHEN_FIELD_NUMBER;
          hash = (53 * hash) + getCaseThen().hashCode();
          break;
        case 5:
          hash = (37 * hash) + CATCH_FIELD_NUMBER;
          hash = (53 * hash) + getCatch().hashCode();
          break;
        case 6:
          hash = (37 * hash) + CONST_FIELD_NUMBER;
          hash = (53 * hash) + getConst().hashCode();
          break;
        case 7:
          hash = (37 * hash) + DEF_FIELD_NUMBER;
          hash = (53 * hash) + getDef().hashCode();
          break;
        case 8:
          hash = (37 * hash) + DEFTYPE_FIELD_NUMBER;
          hash = (53 * hash) + getDeftype().hashCode();
          break;
        case 9:
          hash = (37 * hash) + DO_FIELD_NUMBER;
          hash = (53 * hash) + getDo().hashCode();
          break;
        case 10:
          hash = (37 * hash) + FN_FIELD_NUMBER;
          hash = (53 * hash) + getFn().hashCode();
          break;
        case 11:
          hash = (37 * hash) + FNMETHOD_FIELD_NUMBER;
          hash = (53 * hash) + getFnMethod().hashCode();
          break;
        case 12:
          hash = (37 * hash) + HOSTINTEROP_FIELD_NUMBER;
          hash = (53 * hash) + getHostInterop().hashCode();
          break;
        case 13:
          hash = (37 * hash) + IF_FIELD_NUMBER;
          hash = (53 * hash) + getIf().hashCode();
          break;
        case 14:
          hash = (37 * hash) + IMPORT_FIELD_NUMBER;
          hash = (53 * hash) + getImport().hashCode();
          break;
        case 15:
          hash = (37 * hash) + INSTANCECALL_FIELD_NUMBER;
          hash = (53 * hash) + getInstanceCall().hashCode();
          break;
        case 16:
          hash = (37 * hash) + INSTANCEFIELD_FIELD_NUMBER;
          hash = (53 * hash) + getInstanceField().hashCode();
          break;
        case 17:
          hash = (37 * hash) + ISINSTANCE_FIELD_NUMBER;
          hash = (53 * hash) + getIsInstance().hashCode();
          break;
        case 18:
          hash = (37 * hash) + INVOKE_FIELD_NUMBER;
          hash = (53 * hash) + getInvoke().hashCode();
          break;
        case 19:
          hash = (37 * hash) + KEYWORDINVOKE_FIELD_NUMBER;
          hash = (53 * hash) + getKeywordInvoke().hashCode();
          break;
        case 20:
          hash = (37 * hash) + LET_FIELD_NUMBER;
          hash = (53 * hash) + getLet().hashCode();
          break;
        case 21:
          hash = (37 * hash) + LETFN_FIELD_NUMBER;
          hash = (53 * hash) + getLetfn().hashCode();
          break;
        case 22:
          hash = (37 * hash) + LOCAL_FIELD_NUMBER;
          hash = (53 * hash) + getLocal().hashCode();
          break;
        case 23:
          hash = (37 * hash) + LOOP_FIELD_NUMBER;
          hash = (53 * hash) + getLoop().hashCode();
          break;
        case 24:
          hash = (37 * hash) + MAP_FIELD_NUMBER;
          hash = (53 * hash) + getMap().hashCode();
          break;
        case 25:
          hash = (37 * hash) + METHOD_FIELD_NUMBER;
          hash = (53 * hash) + getMethod().hashCode();
          break;
        case 26:
          hash = (37 * hash) + MONITORENTER_FIELD_NUMBER;
          hash = (53 * hash) + getMonitorEnter().hashCode();
          break;
        case 27:
          hash = (37 * hash) + MONITOREXIT_FIELD_NUMBER;
          hash = (53 * hash) + getMonitorExit().hashCode();
          break;
        case 28:
          hash = (37 * hash) + NEW_FIELD_NUMBER;
          hash = (53 * hash) + getNew().hashCode();
          break;
        case 29:
          hash = (37 * hash) + PRIMINVOKE_FIELD_NUMBER;
          hash = (53 * hash) + getPrimInvoke().hashCode();
          break;
        case 30:
          hash = (37 * hash) + PROTOCOLINVOKE_FIELD_NUMBER;
          hash = (53 * hash) + getProtocolInvoke().hashCode();
          break;
        case 31:
          hash = (37 * hash) + QUOTE_FIELD_NUMBER;
          hash = (53 * hash) + getQuote().hashCode();
          break;
        case 32:
          hash = (37 * hash) + RECUR_FIELD_NUMBER;
          hash = (53 * hash) + getRecur().hashCode();
          break;
        case 33:
          hash = (37 * hash) + REIFY_FIELD_NUMBER;
          hash = (53 * hash) + getReify().hashCode();
          break;
        case 34:
          hash = (37 * hash) + SET_FIELD_NUMBER;
          hash = (53 * hash) + getSet().hashCode();
          break;
        case 35:
          hash = (37 * hash) + MUTATESET_FIELD_NUMBER;
          hash = (53 * hash) + getMutateSet().hashCode();
          break;
        case 36:
          hash = (37 * hash) + STATICCALL_FIELD_NUMBER;
          hash = (53 * hash) + getStaticCall().hashCode();
          break;
        case 37:
          hash = (37 * hash) + STATICFIELD_FIELD_NUMBER;
          hash = (53 * hash) + getStaticField().hashCode();
          break;
        case 38:
          hash = (37 * hash) + THEVAR_FIELD_NUMBER;
          hash = (53 * hash) + getTheVar().hashCode();
          break;
        case 39:
          hash = (37 * hash) + THROW_FIELD_NUMBER;
          hash = (53 * hash) + getThrow().hashCode();
          break;
        case 40:
          hash = (37 * hash) + TRY_FIELD_NUMBER;
          hash = (53 * hash) + getTry().hashCode();
          break;
        case 41:
          hash = (37 * hash) + VAR_FIELD_NUMBER;
          hash = (53 * hash) + getVar().hashCode();
          break;
        case 42:
          hash = (37 * hash) + VECTOR_FIELD_NUMBER;
          hash = (53 * hash) + getVector().hashCode();
          break;
        case 43:
          hash = (37 * hash) + WITHMETA_FIELD_NUMBER;
          hash = (53 * hash) + getWithMeta().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Subnode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.Subnode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code clojureRT.protobuf.Subnode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.Subnode)
        clojureRT.protobuf.Protobuf.SubnodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Subnode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Subnode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.Subnode.class, clojureRT.protobuf.Protobuf.Subnode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.Subnode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        typesCase_ = 0;
        types_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Subnode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Subnode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.Subnode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Subnode build() {
        clojureRT.protobuf.Protobuf.Subnode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Subnode buildPartial() {
        clojureRT.protobuf.Protobuf.Subnode result = new clojureRT.protobuf.Protobuf.Subnode(this);
        if (typesCase_ == 1) {
          if (bindingBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = bindingBuilder_.build();
          }
        }
        if (typesCase_ == 2) {
          if (caseBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = caseBuilder_.build();
          }
        }
        if (typesCase_ == 3) {
          if (caseTestBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = caseTestBuilder_.build();
          }
        }
        if (typesCase_ == 4) {
          if (caseThenBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = caseThenBuilder_.build();
          }
        }
        if (typesCase_ == 5) {
          if (catchBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = catchBuilder_.build();
          }
        }
        if (typesCase_ == 6) {
          if (constBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = constBuilder_.build();
          }
        }
        if (typesCase_ == 7) {
          if (defBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = defBuilder_.build();
          }
        }
        if (typesCase_ == 8) {
          if (deftypeBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = deftypeBuilder_.build();
          }
        }
        if (typesCase_ == 9) {
          if (doBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = doBuilder_.build();
          }
        }
        if (typesCase_ == 10) {
          if (fnBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = fnBuilder_.build();
          }
        }
        if (typesCase_ == 11) {
          if (fnMethodBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = fnMethodBuilder_.build();
          }
        }
        if (typesCase_ == 12) {
          if (hostInteropBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = hostInteropBuilder_.build();
          }
        }
        if (typesCase_ == 13) {
          if (ifBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = ifBuilder_.build();
          }
        }
        if (typesCase_ == 14) {
          if (importBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = importBuilder_.build();
          }
        }
        if (typesCase_ == 15) {
          if (instanceCallBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = instanceCallBuilder_.build();
          }
        }
        if (typesCase_ == 16) {
          if (instanceFieldBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = instanceFieldBuilder_.build();
          }
        }
        if (typesCase_ == 17) {
          if (isInstanceBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = isInstanceBuilder_.build();
          }
        }
        if (typesCase_ == 18) {
          if (invokeBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = invokeBuilder_.build();
          }
        }
        if (typesCase_ == 19) {
          if (keywordInvokeBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = keywordInvokeBuilder_.build();
          }
        }
        if (typesCase_ == 20) {
          if (letBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = letBuilder_.build();
          }
        }
        if (typesCase_ == 21) {
          if (letfnBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = letfnBuilder_.build();
          }
        }
        if (typesCase_ == 22) {
          if (localBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = localBuilder_.build();
          }
        }
        if (typesCase_ == 23) {
          if (loopBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = loopBuilder_.build();
          }
        }
        if (typesCase_ == 24) {
          if (mapBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = mapBuilder_.build();
          }
        }
        if (typesCase_ == 25) {
          if (methodBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = methodBuilder_.build();
          }
        }
        if (typesCase_ == 26) {
          if (monitorEnterBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = monitorEnterBuilder_.build();
          }
        }
        if (typesCase_ == 27) {
          if (monitorExitBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = monitorExitBuilder_.build();
          }
        }
        if (typesCase_ == 28) {
          if (newBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = newBuilder_.build();
          }
        }
        if (typesCase_ == 29) {
          if (primInvokeBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = primInvokeBuilder_.build();
          }
        }
        if (typesCase_ == 30) {
          if (protocolInvokeBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = protocolInvokeBuilder_.build();
          }
        }
        if (typesCase_ == 31) {
          if (quoteBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = quoteBuilder_.build();
          }
        }
        if (typesCase_ == 32) {
          if (recurBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = recurBuilder_.build();
          }
        }
        if (typesCase_ == 33) {
          if (reifyBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = reifyBuilder_.build();
          }
        }
        if (typesCase_ == 34) {
          if (setBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = setBuilder_.build();
          }
        }
        if (typesCase_ == 35) {
          if (mutateSetBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = mutateSetBuilder_.build();
          }
        }
        if (typesCase_ == 36) {
          if (staticCallBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = staticCallBuilder_.build();
          }
        }
        if (typesCase_ == 37) {
          if (staticFieldBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = staticFieldBuilder_.build();
          }
        }
        if (typesCase_ == 38) {
          if (theVarBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = theVarBuilder_.build();
          }
        }
        if (typesCase_ == 39) {
          if (throwBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = throwBuilder_.build();
          }
        }
        if (typesCase_ == 40) {
          if (tryBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = tryBuilder_.build();
          }
        }
        if (typesCase_ == 41) {
          if (varBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = varBuilder_.build();
          }
        }
        if (typesCase_ == 42) {
          if (vectorBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = vectorBuilder_.build();
          }
        }
        if (typesCase_ == 43) {
          if (withMetaBuilder_ == null) {
            result.types_ = types_;
          } else {
            result.types_ = withMetaBuilder_.build();
          }
        }
        result.typesCase_ = typesCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.Subnode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.Subnode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.Subnode other) {
        if (other == clojureRT.protobuf.Protobuf.Subnode.getDefaultInstance()) return this;
        switch (other.getTypesCase()) {
          case BINDING: {
            mergeBinding(other.getBinding());
            break;
          }
          case CASE: {
            mergeCase(other.getCase());
            break;
          }
          case CASETEST: {
            mergeCaseTest(other.getCaseTest());
            break;
          }
          case CASETHEN: {
            mergeCaseThen(other.getCaseThen());
            break;
          }
          case CATCH: {
            mergeCatch(other.getCatch());
            break;
          }
          case CONST: {
            mergeConst(other.getConst());
            break;
          }
          case DEF: {
            mergeDef(other.getDef());
            break;
          }
          case DEFTYPE: {
            mergeDeftype(other.getDeftype());
            break;
          }
          case DO: {
            mergeDo(other.getDo());
            break;
          }
          case FN: {
            mergeFn(other.getFn());
            break;
          }
          case FNMETHOD: {
            mergeFnMethod(other.getFnMethod());
            break;
          }
          case HOSTINTEROP: {
            mergeHostInterop(other.getHostInterop());
            break;
          }
          case IF: {
            mergeIf(other.getIf());
            break;
          }
          case IMPORT: {
            mergeImport(other.getImport());
            break;
          }
          case INSTANCECALL: {
            mergeInstanceCall(other.getInstanceCall());
            break;
          }
          case INSTANCEFIELD: {
            mergeInstanceField(other.getInstanceField());
            break;
          }
          case ISINSTANCE: {
            mergeIsInstance(other.getIsInstance());
            break;
          }
          case INVOKE: {
            mergeInvoke(other.getInvoke());
            break;
          }
          case KEYWORDINVOKE: {
            mergeKeywordInvoke(other.getKeywordInvoke());
            break;
          }
          case LET: {
            mergeLet(other.getLet());
            break;
          }
          case LETFN: {
            mergeLetfn(other.getLetfn());
            break;
          }
          case LOCAL: {
            mergeLocal(other.getLocal());
            break;
          }
          case LOOP: {
            mergeLoop(other.getLoop());
            break;
          }
          case MAP: {
            mergeMap(other.getMap());
            break;
          }
          case METHOD: {
            mergeMethod(other.getMethod());
            break;
          }
          case MONITORENTER: {
            mergeMonitorEnter(other.getMonitorEnter());
            break;
          }
          case MONITOREXIT: {
            mergeMonitorExit(other.getMonitorExit());
            break;
          }
          case NEW: {
            mergeNew(other.getNew());
            break;
          }
          case PRIMINVOKE: {
            mergePrimInvoke(other.getPrimInvoke());
            break;
          }
          case PROTOCOLINVOKE: {
            mergeProtocolInvoke(other.getProtocolInvoke());
            break;
          }
          case QUOTE: {
            mergeQuote(other.getQuote());
            break;
          }
          case RECUR: {
            mergeRecur(other.getRecur());
            break;
          }
          case REIFY: {
            mergeReify(other.getReify());
            break;
          }
          case SET: {
            mergeSet(other.getSet());
            break;
          }
          case MUTATESET: {
            mergeMutateSet(other.getMutateSet());
            break;
          }
          case STATICCALL: {
            mergeStaticCall(other.getStaticCall());
            break;
          }
          case STATICFIELD: {
            mergeStaticField(other.getStaticField());
            break;
          }
          case THEVAR: {
            mergeTheVar(other.getTheVar());
            break;
          }
          case THROW: {
            mergeThrow(other.getThrow());
            break;
          }
          case TRY: {
            mergeTry(other.getTry());
            break;
          }
          case VAR: {
            mergeVar(other.getVar());
            break;
          }
          case VECTOR: {
            mergeVector(other.getVector());
            break;
          }
          case WITHMETA: {
            mergeWithMeta(other.getWithMeta());
            break;
          }
          case TYPES_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.Subnode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.Subnode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int typesCase_ = 0;
      private java.lang.Object types_;
      public TypesCase
          getTypesCase() {
        return TypesCase.forNumber(
            typesCase_);
      }

      public Builder clearTypes() {
        typesCase_ = 0;
        types_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.BindingNode, clojureRT.protobuf.Protobuf.BindingNode.Builder, clojureRT.protobuf.Protobuf.BindingNodeOrBuilder> bindingBuilder_;
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       * @return Whether the binding field is set.
       */
      @java.lang.Override
      public boolean hasBinding() {
        return typesCase_ == 1;
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       * @return The binding.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.BindingNode getBinding() {
        if (bindingBuilder_ == null) {
          if (typesCase_ == 1) {
            return (clojureRT.protobuf.Protobuf.BindingNode) types_;
          }
          return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
        } else {
          if (typesCase_ == 1) {
            return bindingBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      public Builder setBinding(clojureRT.protobuf.Protobuf.BindingNode value) {
        if (bindingBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          bindingBuilder_.setMessage(value);
        }
        typesCase_ = 1;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      public Builder setBinding(
          clojureRT.protobuf.Protobuf.BindingNode.Builder builderForValue) {
        if (bindingBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          bindingBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 1;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      public Builder mergeBinding(clojureRT.protobuf.Protobuf.BindingNode value) {
        if (bindingBuilder_ == null) {
          if (typesCase_ == 1 &&
              types_ != clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.BindingNode.newBuilder((clojureRT.protobuf.Protobuf.BindingNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 1) {
            bindingBuilder_.mergeFrom(value);
          } else {
            bindingBuilder_.setMessage(value);
          }
        }
        typesCase_ = 1;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      public Builder clearBinding() {
        if (bindingBuilder_ == null) {
          if (typesCase_ == 1) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 1) {
            typesCase_ = 0;
            types_ = null;
          }
          bindingBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.BindingNode.Builder getBindingBuilder() {
        return getBindingFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.BindingNodeOrBuilder getBindingOrBuilder() {
        if ((typesCase_ == 1) && (bindingBuilder_ != null)) {
          return bindingBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 1) {
            return (clojureRT.protobuf.Protobuf.BindingNode) types_;
          }
          return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.BindingNode binding = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.BindingNode, clojureRT.protobuf.Protobuf.BindingNode.Builder, clojureRT.protobuf.Protobuf.BindingNodeOrBuilder> 
          getBindingFieldBuilder() {
        if (bindingBuilder_ == null) {
          if (!(typesCase_ == 1)) {
            types_ = clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
          }
          bindingBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.BindingNode, clojureRT.protobuf.Protobuf.BindingNode.Builder, clojureRT.protobuf.Protobuf.BindingNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.BindingNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 1;
        onChanged();;
        return bindingBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseNode, clojureRT.protobuf.Protobuf.CaseNode.Builder, clojureRT.protobuf.Protobuf.CaseNodeOrBuilder> caseBuilder_;
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       * @return Whether the case field is set.
       */
      @java.lang.Override
      public boolean hasCase() {
        return typesCase_ == 2;
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       * @return The case.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode getCase() {
        if (caseBuilder_ == null) {
          if (typesCase_ == 2) {
            return (clojureRT.protobuf.Protobuf.CaseNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
        } else {
          if (typesCase_ == 2) {
            return caseBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      public Builder setCase(clojureRT.protobuf.Protobuf.CaseNode value) {
        if (caseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          caseBuilder_.setMessage(value);
        }
        typesCase_ = 2;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      public Builder setCase(
          clojureRT.protobuf.Protobuf.CaseNode.Builder builderForValue) {
        if (caseBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          caseBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 2;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      public Builder mergeCase(clojureRT.protobuf.Protobuf.CaseNode value) {
        if (caseBuilder_ == null) {
          if (typesCase_ == 2 &&
              types_ != clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.CaseNode.newBuilder((clojureRT.protobuf.Protobuf.CaseNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 2) {
            caseBuilder_.mergeFrom(value);
          } else {
            caseBuilder_.setMessage(value);
          }
        }
        typesCase_ = 2;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      public Builder clearCase() {
        if (caseBuilder_ == null) {
          if (typesCase_ == 2) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 2) {
            typesCase_ = 0;
            types_ = null;
          }
          caseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.CaseNode.Builder getCaseBuilder() {
        return getCaseFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNodeOrBuilder getCaseOrBuilder() {
        if ((typesCase_ == 2) && (caseBuilder_ != null)) {
          return caseBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 2) {
            return (clojureRT.protobuf.Protobuf.CaseNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseNode case = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseNode, clojureRT.protobuf.Protobuf.CaseNode.Builder, clojureRT.protobuf.Protobuf.CaseNodeOrBuilder> 
          getCaseFieldBuilder() {
        if (caseBuilder_ == null) {
          if (!(typesCase_ == 2)) {
            types_ = clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
          }
          caseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.CaseNode, clojureRT.protobuf.Protobuf.CaseNode.Builder, clojureRT.protobuf.Protobuf.CaseNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.CaseNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 2;
        onChanged();;
        return caseBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseTestNode, clojureRT.protobuf.Protobuf.CaseTestNode.Builder, clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder> caseTestBuilder_;
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       * @return Whether the caseTest field is set.
       */
      @java.lang.Override
      public boolean hasCaseTest() {
        return typesCase_ == 3;
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       * @return The caseTest.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseTestNode getCaseTest() {
        if (caseTestBuilder_ == null) {
          if (typesCase_ == 3) {
            return (clojureRT.protobuf.Protobuf.CaseTestNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
        } else {
          if (typesCase_ == 3) {
            return caseTestBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      public Builder setCaseTest(clojureRT.protobuf.Protobuf.CaseTestNode value) {
        if (caseTestBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          caseTestBuilder_.setMessage(value);
        }
        typesCase_ = 3;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      public Builder setCaseTest(
          clojureRT.protobuf.Protobuf.CaseTestNode.Builder builderForValue) {
        if (caseTestBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          caseTestBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 3;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      public Builder mergeCaseTest(clojureRT.protobuf.Protobuf.CaseTestNode value) {
        if (caseTestBuilder_ == null) {
          if (typesCase_ == 3 &&
              types_ != clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.CaseTestNode.newBuilder((clojureRT.protobuf.Protobuf.CaseTestNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 3) {
            caseTestBuilder_.mergeFrom(value);
          } else {
            caseTestBuilder_.setMessage(value);
          }
        }
        typesCase_ = 3;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      public Builder clearCaseTest() {
        if (caseTestBuilder_ == null) {
          if (typesCase_ == 3) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 3) {
            typesCase_ = 0;
            types_ = null;
          }
          caseTestBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.CaseTestNode.Builder getCaseTestBuilder() {
        return getCaseTestFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder getCaseTestOrBuilder() {
        if ((typesCase_ == 3) && (caseTestBuilder_ != null)) {
          return caseTestBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 3) {
            return (clojureRT.protobuf.Protobuf.CaseTestNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseTestNode caseTest = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseTestNode, clojureRT.protobuf.Protobuf.CaseTestNode.Builder, clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder> 
          getCaseTestFieldBuilder() {
        if (caseTestBuilder_ == null) {
          if (!(typesCase_ == 3)) {
            types_ = clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
          }
          caseTestBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.CaseTestNode, clojureRT.protobuf.Protobuf.CaseTestNode.Builder, clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.CaseTestNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 3;
        onChanged();;
        return caseTestBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseThenNode, clojureRT.protobuf.Protobuf.CaseThenNode.Builder, clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder> caseThenBuilder_;
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       * @return Whether the caseThen field is set.
       */
      @java.lang.Override
      public boolean hasCaseThen() {
        return typesCase_ == 4;
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       * @return The caseThen.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseThenNode getCaseThen() {
        if (caseThenBuilder_ == null) {
          if (typesCase_ == 4) {
            return (clojureRT.protobuf.Protobuf.CaseThenNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
        } else {
          if (typesCase_ == 4) {
            return caseThenBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      public Builder setCaseThen(clojureRT.protobuf.Protobuf.CaseThenNode value) {
        if (caseThenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          caseThenBuilder_.setMessage(value);
        }
        typesCase_ = 4;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      public Builder setCaseThen(
          clojureRT.protobuf.Protobuf.CaseThenNode.Builder builderForValue) {
        if (caseThenBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          caseThenBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 4;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      public Builder mergeCaseThen(clojureRT.protobuf.Protobuf.CaseThenNode value) {
        if (caseThenBuilder_ == null) {
          if (typesCase_ == 4 &&
              types_ != clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.CaseThenNode.newBuilder((clojureRT.protobuf.Protobuf.CaseThenNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 4) {
            caseThenBuilder_.mergeFrom(value);
          } else {
            caseThenBuilder_.setMessage(value);
          }
        }
        typesCase_ = 4;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      public Builder clearCaseThen() {
        if (caseThenBuilder_ == null) {
          if (typesCase_ == 4) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 4) {
            typesCase_ = 0;
            types_ = null;
          }
          caseThenBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.CaseThenNode.Builder getCaseThenBuilder() {
        return getCaseThenFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder getCaseThenOrBuilder() {
        if ((typesCase_ == 4) && (caseThenBuilder_ != null)) {
          return caseThenBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 4) {
            return (clojureRT.protobuf.Protobuf.CaseThenNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CaseThenNode caseThen = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CaseThenNode, clojureRT.protobuf.Protobuf.CaseThenNode.Builder, clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder> 
          getCaseThenFieldBuilder() {
        if (caseThenBuilder_ == null) {
          if (!(typesCase_ == 4)) {
            types_ = clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
          }
          caseThenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.CaseThenNode, clojureRT.protobuf.Protobuf.CaseThenNode.Builder, clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.CaseThenNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 4;
        onChanged();;
        return caseThenBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CatchNode, clojureRT.protobuf.Protobuf.CatchNode.Builder, clojureRT.protobuf.Protobuf.CatchNodeOrBuilder> catchBuilder_;
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       * @return Whether the catch field is set.
       */
      @java.lang.Override
      public boolean hasCatch() {
        return typesCase_ == 5;
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       * @return The catch.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CatchNode getCatch() {
        if (catchBuilder_ == null) {
          if (typesCase_ == 5) {
            return (clojureRT.protobuf.Protobuf.CatchNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
        } else {
          if (typesCase_ == 5) {
            return catchBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      public Builder setCatch(clojureRT.protobuf.Protobuf.CatchNode value) {
        if (catchBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          catchBuilder_.setMessage(value);
        }
        typesCase_ = 5;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      public Builder setCatch(
          clojureRT.protobuf.Protobuf.CatchNode.Builder builderForValue) {
        if (catchBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          catchBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 5;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      public Builder mergeCatch(clojureRT.protobuf.Protobuf.CatchNode value) {
        if (catchBuilder_ == null) {
          if (typesCase_ == 5 &&
              types_ != clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.CatchNode.newBuilder((clojureRT.protobuf.Protobuf.CatchNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 5) {
            catchBuilder_.mergeFrom(value);
          } else {
            catchBuilder_.setMessage(value);
          }
        }
        typesCase_ = 5;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      public Builder clearCatch() {
        if (catchBuilder_ == null) {
          if (typesCase_ == 5) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 5) {
            typesCase_ = 0;
            types_ = null;
          }
          catchBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      public clojureRT.protobuf.Protobuf.CatchNode.Builder getCatchBuilder() {
        return getCatchFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CatchNodeOrBuilder getCatchOrBuilder() {
        if ((typesCase_ == 5) && (catchBuilder_ != null)) {
          return catchBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 5) {
            return (clojureRT.protobuf.Protobuf.CatchNode) types_;
          }
          return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.CatchNode catch = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.CatchNode, clojureRT.protobuf.Protobuf.CatchNode.Builder, clojureRT.protobuf.Protobuf.CatchNodeOrBuilder> 
          getCatchFieldBuilder() {
        if (catchBuilder_ == null) {
          if (!(typesCase_ == 5)) {
            types_ = clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
          }
          catchBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.CatchNode, clojureRT.protobuf.Protobuf.CatchNode.Builder, clojureRT.protobuf.Protobuf.CatchNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.CatchNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 5;
        onChanged();;
        return catchBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ConstNode, clojureRT.protobuf.Protobuf.ConstNode.Builder, clojureRT.protobuf.Protobuf.ConstNodeOrBuilder> constBuilder_;
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       * @return Whether the const field is set.
       */
      @java.lang.Override
      public boolean hasConst() {
        return typesCase_ == 6;
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       * @return The const.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNode getConst() {
        if (constBuilder_ == null) {
          if (typesCase_ == 6) {
            return (clojureRT.protobuf.Protobuf.ConstNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
        } else {
          if (typesCase_ == 6) {
            return constBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      public Builder setConst(clojureRT.protobuf.Protobuf.ConstNode value) {
        if (constBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          constBuilder_.setMessage(value);
        }
        typesCase_ = 6;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      public Builder setConst(
          clojureRT.protobuf.Protobuf.ConstNode.Builder builderForValue) {
        if (constBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          constBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 6;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      public Builder mergeConst(clojureRT.protobuf.Protobuf.ConstNode value) {
        if (constBuilder_ == null) {
          if (typesCase_ == 6 &&
              types_ != clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.ConstNode.newBuilder((clojureRT.protobuf.Protobuf.ConstNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 6) {
            constBuilder_.mergeFrom(value);
          } else {
            constBuilder_.setMessage(value);
          }
        }
        typesCase_ = 6;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      public Builder clearConst() {
        if (constBuilder_ == null) {
          if (typesCase_ == 6) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 6) {
            typesCase_ = 0;
            types_ = null;
          }
          constBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      public clojureRT.protobuf.Protobuf.ConstNode.Builder getConstBuilder() {
        return getConstFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNodeOrBuilder getConstOrBuilder() {
        if ((typesCase_ == 6) && (constBuilder_ != null)) {
          return constBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 6) {
            return (clojureRT.protobuf.Protobuf.ConstNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ConstNode const = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ConstNode, clojureRT.protobuf.Protobuf.ConstNode.Builder, clojureRT.protobuf.Protobuf.ConstNodeOrBuilder> 
          getConstFieldBuilder() {
        if (constBuilder_ == null) {
          if (!(typesCase_ == 6)) {
            types_ = clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
          }
          constBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.ConstNode, clojureRT.protobuf.Protobuf.ConstNode.Builder, clojureRT.protobuf.Protobuf.ConstNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.ConstNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 6;
        onChanged();;
        return constBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DefNode, clojureRT.protobuf.Protobuf.DefNode.Builder, clojureRT.protobuf.Protobuf.DefNodeOrBuilder> defBuilder_;
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       * @return Whether the def field is set.
       */
      @java.lang.Override
      public boolean hasDef() {
        return typesCase_ == 7;
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       * @return The def.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DefNode getDef() {
        if (defBuilder_ == null) {
          if (typesCase_ == 7) {
            return (clojureRT.protobuf.Protobuf.DefNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
        } else {
          if (typesCase_ == 7) {
            return defBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      public Builder setDef(clojureRT.protobuf.Protobuf.DefNode value) {
        if (defBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          defBuilder_.setMessage(value);
        }
        typesCase_ = 7;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      public Builder setDef(
          clojureRT.protobuf.Protobuf.DefNode.Builder builderForValue) {
        if (defBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          defBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 7;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      public Builder mergeDef(clojureRT.protobuf.Protobuf.DefNode value) {
        if (defBuilder_ == null) {
          if (typesCase_ == 7 &&
              types_ != clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.DefNode.newBuilder((clojureRT.protobuf.Protobuf.DefNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 7) {
            defBuilder_.mergeFrom(value);
          } else {
            defBuilder_.setMessage(value);
          }
        }
        typesCase_ = 7;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      public Builder clearDef() {
        if (defBuilder_ == null) {
          if (typesCase_ == 7) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 7) {
            typesCase_ = 0;
            types_ = null;
          }
          defBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.DefNode.Builder getDefBuilder() {
        return getDefFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DefNodeOrBuilder getDefOrBuilder() {
        if ((typesCase_ == 7) && (defBuilder_ != null)) {
          return defBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 7) {
            return (clojureRT.protobuf.Protobuf.DefNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DefNode def = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DefNode, clojureRT.protobuf.Protobuf.DefNode.Builder, clojureRT.protobuf.Protobuf.DefNodeOrBuilder> 
          getDefFieldBuilder() {
        if (defBuilder_ == null) {
          if (!(typesCase_ == 7)) {
            types_ = clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
          }
          defBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.DefNode, clojureRT.protobuf.Protobuf.DefNode.Builder, clojureRT.protobuf.Protobuf.DefNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.DefNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 7;
        onChanged();;
        return defBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DeftypeNode, clojureRT.protobuf.Protobuf.DeftypeNode.Builder, clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder> deftypeBuilder_;
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       * @return Whether the deftype field is set.
       */
      @java.lang.Override
      public boolean hasDeftype() {
        return typesCase_ == 8;
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       * @return The deftype.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DeftypeNode getDeftype() {
        if (deftypeBuilder_ == null) {
          if (typesCase_ == 8) {
            return (clojureRT.protobuf.Protobuf.DeftypeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
        } else {
          if (typesCase_ == 8) {
            return deftypeBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      public Builder setDeftype(clojureRT.protobuf.Protobuf.DeftypeNode value) {
        if (deftypeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          deftypeBuilder_.setMessage(value);
        }
        typesCase_ = 8;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      public Builder setDeftype(
          clojureRT.protobuf.Protobuf.DeftypeNode.Builder builderForValue) {
        if (deftypeBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          deftypeBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 8;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      public Builder mergeDeftype(clojureRT.protobuf.Protobuf.DeftypeNode value) {
        if (deftypeBuilder_ == null) {
          if (typesCase_ == 8 &&
              types_ != clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.DeftypeNode.newBuilder((clojureRT.protobuf.Protobuf.DeftypeNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 8) {
            deftypeBuilder_.mergeFrom(value);
          } else {
            deftypeBuilder_.setMessage(value);
          }
        }
        typesCase_ = 8;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      public Builder clearDeftype() {
        if (deftypeBuilder_ == null) {
          if (typesCase_ == 8) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 8) {
            typesCase_ = 0;
            types_ = null;
          }
          deftypeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.DeftypeNode.Builder getDeftypeBuilder() {
        return getDeftypeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder getDeftypeOrBuilder() {
        if ((typesCase_ == 8) && (deftypeBuilder_ != null)) {
          return deftypeBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 8) {
            return (clojureRT.protobuf.Protobuf.DeftypeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DeftypeNode deftype = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DeftypeNode, clojureRT.protobuf.Protobuf.DeftypeNode.Builder, clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder> 
          getDeftypeFieldBuilder() {
        if (deftypeBuilder_ == null) {
          if (!(typesCase_ == 8)) {
            types_ = clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
          }
          deftypeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.DeftypeNode, clojureRT.protobuf.Protobuf.DeftypeNode.Builder, clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.DeftypeNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 8;
        onChanged();;
        return deftypeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DoNode, clojureRT.protobuf.Protobuf.DoNode.Builder, clojureRT.protobuf.Protobuf.DoNodeOrBuilder> doBuilder_;
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       * @return Whether the do field is set.
       */
      @java.lang.Override
      public boolean hasDo() {
        return typesCase_ == 9;
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       * @return The do.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DoNode getDo() {
        if (doBuilder_ == null) {
          if (typesCase_ == 9) {
            return (clojureRT.protobuf.Protobuf.DoNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
        } else {
          if (typesCase_ == 9) {
            return doBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      public Builder setDo(clojureRT.protobuf.Protobuf.DoNode value) {
        if (doBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          doBuilder_.setMessage(value);
        }
        typesCase_ = 9;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      public Builder setDo(
          clojureRT.protobuf.Protobuf.DoNode.Builder builderForValue) {
        if (doBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          doBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 9;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      public Builder mergeDo(clojureRT.protobuf.Protobuf.DoNode value) {
        if (doBuilder_ == null) {
          if (typesCase_ == 9 &&
              types_ != clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.DoNode.newBuilder((clojureRT.protobuf.Protobuf.DoNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 9) {
            doBuilder_.mergeFrom(value);
          } else {
            doBuilder_.setMessage(value);
          }
        }
        typesCase_ = 9;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      public Builder clearDo() {
        if (doBuilder_ == null) {
          if (typesCase_ == 9) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 9) {
            typesCase_ = 0;
            types_ = null;
          }
          doBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      public clojureRT.protobuf.Protobuf.DoNode.Builder getDoBuilder() {
        return getDoFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DoNodeOrBuilder getDoOrBuilder() {
        if ((typesCase_ == 9) && (doBuilder_ != null)) {
          return doBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 9) {
            return (clojureRT.protobuf.Protobuf.DoNode) types_;
          }
          return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.DoNode do = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.DoNode, clojureRT.protobuf.Protobuf.DoNode.Builder, clojureRT.protobuf.Protobuf.DoNodeOrBuilder> 
          getDoFieldBuilder() {
        if (doBuilder_ == null) {
          if (!(typesCase_ == 9)) {
            types_ = clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
          }
          doBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.DoNode, clojureRT.protobuf.Protobuf.DoNode.Builder, clojureRT.protobuf.Protobuf.DoNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.DoNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 9;
        onChanged();;
        return doBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.FnNode, clojureRT.protobuf.Protobuf.FnNode.Builder, clojureRT.protobuf.Protobuf.FnNodeOrBuilder> fnBuilder_;
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       * @return Whether the fn field is set.
       */
      @java.lang.Override
      public boolean hasFn() {
        return typesCase_ == 10;
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       * @return The fn.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnNode getFn() {
        if (fnBuilder_ == null) {
          if (typesCase_ == 10) {
            return (clojureRT.protobuf.Protobuf.FnNode) types_;
          }
          return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
        } else {
          if (typesCase_ == 10) {
            return fnBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      public Builder setFn(clojureRT.protobuf.Protobuf.FnNode value) {
        if (fnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          fnBuilder_.setMessage(value);
        }
        typesCase_ = 10;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      public Builder setFn(
          clojureRT.protobuf.Protobuf.FnNode.Builder builderForValue) {
        if (fnBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          fnBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 10;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      public Builder mergeFn(clojureRT.protobuf.Protobuf.FnNode value) {
        if (fnBuilder_ == null) {
          if (typesCase_ == 10 &&
              types_ != clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.FnNode.newBuilder((clojureRT.protobuf.Protobuf.FnNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 10) {
            fnBuilder_.mergeFrom(value);
          } else {
            fnBuilder_.setMessage(value);
          }
        }
        typesCase_ = 10;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      public Builder clearFn() {
        if (fnBuilder_ == null) {
          if (typesCase_ == 10) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 10) {
            typesCase_ = 0;
            types_ = null;
          }
          fnBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.FnNode.Builder getFnBuilder() {
        return getFnFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnNodeOrBuilder getFnOrBuilder() {
        if ((typesCase_ == 10) && (fnBuilder_ != null)) {
          return fnBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 10) {
            return (clojureRT.protobuf.Protobuf.FnNode) types_;
          }
          return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.FnNode fn = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.FnNode, clojureRT.protobuf.Protobuf.FnNode.Builder, clojureRT.protobuf.Protobuf.FnNodeOrBuilder> 
          getFnFieldBuilder() {
        if (fnBuilder_ == null) {
          if (!(typesCase_ == 10)) {
            types_ = clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
          }
          fnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.FnNode, clojureRT.protobuf.Protobuf.FnNode.Builder, clojureRT.protobuf.Protobuf.FnNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.FnNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 10;
        onChanged();;
        return fnBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.FnMethodNode, clojureRT.protobuf.Protobuf.FnMethodNode.Builder, clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder> fnMethodBuilder_;
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       * @return Whether the fnMethod field is set.
       */
      @java.lang.Override
      public boolean hasFnMethod() {
        return typesCase_ == 11;
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       * @return The fnMethod.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnMethodNode getFnMethod() {
        if (fnMethodBuilder_ == null) {
          if (typesCase_ == 11) {
            return (clojureRT.protobuf.Protobuf.FnMethodNode) types_;
          }
          return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
        } else {
          if (typesCase_ == 11) {
            return fnMethodBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      public Builder setFnMethod(clojureRT.protobuf.Protobuf.FnMethodNode value) {
        if (fnMethodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          fnMethodBuilder_.setMessage(value);
        }
        typesCase_ = 11;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      public Builder setFnMethod(
          clojureRT.protobuf.Protobuf.FnMethodNode.Builder builderForValue) {
        if (fnMethodBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          fnMethodBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 11;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      public Builder mergeFnMethod(clojureRT.protobuf.Protobuf.FnMethodNode value) {
        if (fnMethodBuilder_ == null) {
          if (typesCase_ == 11 &&
              types_ != clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.FnMethodNode.newBuilder((clojureRT.protobuf.Protobuf.FnMethodNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 11) {
            fnMethodBuilder_.mergeFrom(value);
          } else {
            fnMethodBuilder_.setMessage(value);
          }
        }
        typesCase_ = 11;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      public Builder clearFnMethod() {
        if (fnMethodBuilder_ == null) {
          if (typesCase_ == 11) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 11) {
            typesCase_ = 0;
            types_ = null;
          }
          fnMethodBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.FnMethodNode.Builder getFnMethodBuilder() {
        return getFnMethodFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder getFnMethodOrBuilder() {
        if ((typesCase_ == 11) && (fnMethodBuilder_ != null)) {
          return fnMethodBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 11) {
            return (clojureRT.protobuf.Protobuf.FnMethodNode) types_;
          }
          return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.FnMethodNode fnMethod = 11;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.FnMethodNode, clojureRT.protobuf.Protobuf.FnMethodNode.Builder, clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder> 
          getFnMethodFieldBuilder() {
        if (fnMethodBuilder_ == null) {
          if (!(typesCase_ == 11)) {
            types_ = clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
          }
          fnMethodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.FnMethodNode, clojureRT.protobuf.Protobuf.FnMethodNode.Builder, clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.FnMethodNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 11;
        onChanged();;
        return fnMethodBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.HostInteropNode, clojureRT.protobuf.Protobuf.HostInteropNode.Builder, clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder> hostInteropBuilder_;
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       * @return Whether the hostInterop field is set.
       */
      @java.lang.Override
      public boolean hasHostInterop() {
        return typesCase_ == 12;
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       * @return The hostInterop.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.HostInteropNode getHostInterop() {
        if (hostInteropBuilder_ == null) {
          if (typesCase_ == 12) {
            return (clojureRT.protobuf.Protobuf.HostInteropNode) types_;
          }
          return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
        } else {
          if (typesCase_ == 12) {
            return hostInteropBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      public Builder setHostInterop(clojureRT.protobuf.Protobuf.HostInteropNode value) {
        if (hostInteropBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          hostInteropBuilder_.setMessage(value);
        }
        typesCase_ = 12;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      public Builder setHostInterop(
          clojureRT.protobuf.Protobuf.HostInteropNode.Builder builderForValue) {
        if (hostInteropBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          hostInteropBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 12;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      public Builder mergeHostInterop(clojureRT.protobuf.Protobuf.HostInteropNode value) {
        if (hostInteropBuilder_ == null) {
          if (typesCase_ == 12 &&
              types_ != clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.HostInteropNode.newBuilder((clojureRT.protobuf.Protobuf.HostInteropNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 12) {
            hostInteropBuilder_.mergeFrom(value);
          } else {
            hostInteropBuilder_.setMessage(value);
          }
        }
        typesCase_ = 12;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      public Builder clearHostInterop() {
        if (hostInteropBuilder_ == null) {
          if (typesCase_ == 12) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 12) {
            typesCase_ = 0;
            types_ = null;
          }
          hostInteropBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      public clojureRT.protobuf.Protobuf.HostInteropNode.Builder getHostInteropBuilder() {
        return getHostInteropFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder getHostInteropOrBuilder() {
        if ((typesCase_ == 12) && (hostInteropBuilder_ != null)) {
          return hostInteropBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 12) {
            return (clojureRT.protobuf.Protobuf.HostInteropNode) types_;
          }
          return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.HostInteropNode hostInterop = 12;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.HostInteropNode, clojureRT.protobuf.Protobuf.HostInteropNode.Builder, clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder> 
          getHostInteropFieldBuilder() {
        if (hostInteropBuilder_ == null) {
          if (!(typesCase_ == 12)) {
            types_ = clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
          }
          hostInteropBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.HostInteropNode, clojureRT.protobuf.Protobuf.HostInteropNode.Builder, clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.HostInteropNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 12;
        onChanged();;
        return hostInteropBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.IfNode, clojureRT.protobuf.Protobuf.IfNode.Builder, clojureRT.protobuf.Protobuf.IfNodeOrBuilder> ifBuilder_;
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       * @return Whether the if field is set.
       */
      @java.lang.Override
      public boolean hasIf() {
        return typesCase_ == 13;
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       * @return The if.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IfNode getIf() {
        if (ifBuilder_ == null) {
          if (typesCase_ == 13) {
            return (clojureRT.protobuf.Protobuf.IfNode) types_;
          }
          return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
        } else {
          if (typesCase_ == 13) {
            return ifBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      public Builder setIf(clojureRT.protobuf.Protobuf.IfNode value) {
        if (ifBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          ifBuilder_.setMessage(value);
        }
        typesCase_ = 13;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      public Builder setIf(
          clojureRT.protobuf.Protobuf.IfNode.Builder builderForValue) {
        if (ifBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          ifBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 13;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      public Builder mergeIf(clojureRT.protobuf.Protobuf.IfNode value) {
        if (ifBuilder_ == null) {
          if (typesCase_ == 13 &&
              types_ != clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.IfNode.newBuilder((clojureRT.protobuf.Protobuf.IfNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 13) {
            ifBuilder_.mergeFrom(value);
          } else {
            ifBuilder_.setMessage(value);
          }
        }
        typesCase_ = 13;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      public Builder clearIf() {
        if (ifBuilder_ == null) {
          if (typesCase_ == 13) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 13) {
            typesCase_ = 0;
            types_ = null;
          }
          ifBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      public clojureRT.protobuf.Protobuf.IfNode.Builder getIfBuilder() {
        return getIfFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IfNodeOrBuilder getIfOrBuilder() {
        if ((typesCase_ == 13) && (ifBuilder_ != null)) {
          return ifBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 13) {
            return (clojureRT.protobuf.Protobuf.IfNode) types_;
          }
          return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.IfNode if = 13;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.IfNode, clojureRT.protobuf.Protobuf.IfNode.Builder, clojureRT.protobuf.Protobuf.IfNodeOrBuilder> 
          getIfFieldBuilder() {
        if (ifBuilder_ == null) {
          if (!(typesCase_ == 13)) {
            types_ = clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
          }
          ifBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.IfNode, clojureRT.protobuf.Protobuf.IfNode.Builder, clojureRT.protobuf.Protobuf.IfNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.IfNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 13;
        onChanged();;
        return ifBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ImportNode, clojureRT.protobuf.Protobuf.ImportNode.Builder, clojureRT.protobuf.Protobuf.ImportNodeOrBuilder> importBuilder_;
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       * @return Whether the import field is set.
       */
      @java.lang.Override
      public boolean hasImport() {
        return typesCase_ == 14;
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       * @return The import.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ImportNode getImport() {
        if (importBuilder_ == null) {
          if (typesCase_ == 14) {
            return (clojureRT.protobuf.Protobuf.ImportNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
        } else {
          if (typesCase_ == 14) {
            return importBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      public Builder setImport(clojureRT.protobuf.Protobuf.ImportNode value) {
        if (importBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          importBuilder_.setMessage(value);
        }
        typesCase_ = 14;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      public Builder setImport(
          clojureRT.protobuf.Protobuf.ImportNode.Builder builderForValue) {
        if (importBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          importBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 14;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      public Builder mergeImport(clojureRT.protobuf.Protobuf.ImportNode value) {
        if (importBuilder_ == null) {
          if (typesCase_ == 14 &&
              types_ != clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.ImportNode.newBuilder((clojureRT.protobuf.Protobuf.ImportNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 14) {
            importBuilder_.mergeFrom(value);
          } else {
            importBuilder_.setMessage(value);
          }
        }
        typesCase_ = 14;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      public Builder clearImport() {
        if (importBuilder_ == null) {
          if (typesCase_ == 14) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 14) {
            typesCase_ = 0;
            types_ = null;
          }
          importBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      public clojureRT.protobuf.Protobuf.ImportNode.Builder getImportBuilder() {
        return getImportFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ImportNodeOrBuilder getImportOrBuilder() {
        if ((typesCase_ == 14) && (importBuilder_ != null)) {
          return importBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 14) {
            return (clojureRT.protobuf.Protobuf.ImportNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ImportNode import = 14;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ImportNode, clojureRT.protobuf.Protobuf.ImportNode.Builder, clojureRT.protobuf.Protobuf.ImportNodeOrBuilder> 
          getImportFieldBuilder() {
        if (importBuilder_ == null) {
          if (!(typesCase_ == 14)) {
            types_ = clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
          }
          importBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.ImportNode, clojureRT.protobuf.Protobuf.ImportNode.Builder, clojureRT.protobuf.Protobuf.ImportNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.ImportNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 14;
        onChanged();;
        return importBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InstanceCallNode, clojureRT.protobuf.Protobuf.InstanceCallNode.Builder, clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder> instanceCallBuilder_;
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       * @return Whether the instanceCall field is set.
       */
      @java.lang.Override
      public boolean hasInstanceCall() {
        return typesCase_ == 15;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       * @return The instanceCall.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceCallNode getInstanceCall() {
        if (instanceCallBuilder_ == null) {
          if (typesCase_ == 15) {
            return (clojureRT.protobuf.Protobuf.InstanceCallNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
        } else {
          if (typesCase_ == 15) {
            return instanceCallBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      public Builder setInstanceCall(clojureRT.protobuf.Protobuf.InstanceCallNode value) {
        if (instanceCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          instanceCallBuilder_.setMessage(value);
        }
        typesCase_ = 15;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      public Builder setInstanceCall(
          clojureRT.protobuf.Protobuf.InstanceCallNode.Builder builderForValue) {
        if (instanceCallBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          instanceCallBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 15;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      public Builder mergeInstanceCall(clojureRT.protobuf.Protobuf.InstanceCallNode value) {
        if (instanceCallBuilder_ == null) {
          if (typesCase_ == 15 &&
              types_ != clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.InstanceCallNode.newBuilder((clojureRT.protobuf.Protobuf.InstanceCallNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 15) {
            instanceCallBuilder_.mergeFrom(value);
          } else {
            instanceCallBuilder_.setMessage(value);
          }
        }
        typesCase_ = 15;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      public Builder clearInstanceCall() {
        if (instanceCallBuilder_ == null) {
          if (typesCase_ == 15) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 15) {
            typesCase_ = 0;
            types_ = null;
          }
          instanceCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      public clojureRT.protobuf.Protobuf.InstanceCallNode.Builder getInstanceCallBuilder() {
        return getInstanceCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder getInstanceCallOrBuilder() {
        if ((typesCase_ == 15) && (instanceCallBuilder_ != null)) {
          return instanceCallBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 15) {
            return (clojureRT.protobuf.Protobuf.InstanceCallNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InstanceCallNode instanceCall = 15;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InstanceCallNode, clojureRT.protobuf.Protobuf.InstanceCallNode.Builder, clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder> 
          getInstanceCallFieldBuilder() {
        if (instanceCallBuilder_ == null) {
          if (!(typesCase_ == 15)) {
            types_ = clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
          }
          instanceCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.InstanceCallNode, clojureRT.protobuf.Protobuf.InstanceCallNode.Builder, clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.InstanceCallNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 15;
        onChanged();;
        return instanceCallBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InstanceFieldNode, clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder, clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder> instanceFieldBuilder_;
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       * @return Whether the instanceField field is set.
       */
      @java.lang.Override
      public boolean hasInstanceField() {
        return typesCase_ == 16;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       * @return The instanceField.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceFieldNode getInstanceField() {
        if (instanceFieldBuilder_ == null) {
          if (typesCase_ == 16) {
            return (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
        } else {
          if (typesCase_ == 16) {
            return instanceFieldBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      public Builder setInstanceField(clojureRT.protobuf.Protobuf.InstanceFieldNode value) {
        if (instanceFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          instanceFieldBuilder_.setMessage(value);
        }
        typesCase_ = 16;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      public Builder setInstanceField(
          clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder builderForValue) {
        if (instanceFieldBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          instanceFieldBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 16;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      public Builder mergeInstanceField(clojureRT.protobuf.Protobuf.InstanceFieldNode value) {
        if (instanceFieldBuilder_ == null) {
          if (typesCase_ == 16 &&
              types_ != clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.InstanceFieldNode.newBuilder((clojureRT.protobuf.Protobuf.InstanceFieldNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 16) {
            instanceFieldBuilder_.mergeFrom(value);
          } else {
            instanceFieldBuilder_.setMessage(value);
          }
        }
        typesCase_ = 16;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      public Builder clearInstanceField() {
        if (instanceFieldBuilder_ == null) {
          if (typesCase_ == 16) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 16) {
            typesCase_ = 0;
            types_ = null;
          }
          instanceFieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      public clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder getInstanceFieldBuilder() {
        return getInstanceFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder getInstanceFieldOrBuilder() {
        if ((typesCase_ == 16) && (instanceFieldBuilder_ != null)) {
          return instanceFieldBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 16) {
            return (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InstanceFieldNode instanceField = 16;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InstanceFieldNode, clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder, clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder> 
          getInstanceFieldFieldBuilder() {
        if (instanceFieldBuilder_ == null) {
          if (!(typesCase_ == 16)) {
            types_ = clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
          }
          instanceFieldBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.InstanceFieldNode, clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder, clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.InstanceFieldNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 16;
        onChanged();;
        return instanceFieldBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.IsInstanceNode, clojureRT.protobuf.Protobuf.IsInstanceNode.Builder, clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder> isInstanceBuilder_;
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       * @return Whether the isInstance field is set.
       */
      @java.lang.Override
      public boolean hasIsInstance() {
        return typesCase_ == 17;
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       * @return The isInstance.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IsInstanceNode getIsInstance() {
        if (isInstanceBuilder_ == null) {
          if (typesCase_ == 17) {
            return (clojureRT.protobuf.Protobuf.IsInstanceNode) types_;
          }
          return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
        } else {
          if (typesCase_ == 17) {
            return isInstanceBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      public Builder setIsInstance(clojureRT.protobuf.Protobuf.IsInstanceNode value) {
        if (isInstanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          isInstanceBuilder_.setMessage(value);
        }
        typesCase_ = 17;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      public Builder setIsInstance(
          clojureRT.protobuf.Protobuf.IsInstanceNode.Builder builderForValue) {
        if (isInstanceBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          isInstanceBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 17;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      public Builder mergeIsInstance(clojureRT.protobuf.Protobuf.IsInstanceNode value) {
        if (isInstanceBuilder_ == null) {
          if (typesCase_ == 17 &&
              types_ != clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.IsInstanceNode.newBuilder((clojureRT.protobuf.Protobuf.IsInstanceNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 17) {
            isInstanceBuilder_.mergeFrom(value);
          } else {
            isInstanceBuilder_.setMessage(value);
          }
        }
        typesCase_ = 17;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      public Builder clearIsInstance() {
        if (isInstanceBuilder_ == null) {
          if (typesCase_ == 17) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 17) {
            typesCase_ = 0;
            types_ = null;
          }
          isInstanceBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      public clojureRT.protobuf.Protobuf.IsInstanceNode.Builder getIsInstanceBuilder() {
        return getIsInstanceFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder getIsInstanceOrBuilder() {
        if ((typesCase_ == 17) && (isInstanceBuilder_ != null)) {
          return isInstanceBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 17) {
            return (clojureRT.protobuf.Protobuf.IsInstanceNode) types_;
          }
          return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.IsInstanceNode isInstance = 17;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.IsInstanceNode, clojureRT.protobuf.Protobuf.IsInstanceNode.Builder, clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder> 
          getIsInstanceFieldBuilder() {
        if (isInstanceBuilder_ == null) {
          if (!(typesCase_ == 17)) {
            types_ = clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
          }
          isInstanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.IsInstanceNode, clojureRT.protobuf.Protobuf.IsInstanceNode.Builder, clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.IsInstanceNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 17;
        onChanged();;
        return isInstanceBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InvokeNode, clojureRT.protobuf.Protobuf.InvokeNode.Builder, clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder> invokeBuilder_;
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       * @return Whether the invoke field is set.
       */
      @java.lang.Override
      public boolean hasInvoke() {
        return typesCase_ == 18;
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       * @return The invoke.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InvokeNode getInvoke() {
        if (invokeBuilder_ == null) {
          if (typesCase_ == 18) {
            return (clojureRT.protobuf.Protobuf.InvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
        } else {
          if (typesCase_ == 18) {
            return invokeBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      public Builder setInvoke(clojureRT.protobuf.Protobuf.InvokeNode value) {
        if (invokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          invokeBuilder_.setMessage(value);
        }
        typesCase_ = 18;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      public Builder setInvoke(
          clojureRT.protobuf.Protobuf.InvokeNode.Builder builderForValue) {
        if (invokeBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          invokeBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 18;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      public Builder mergeInvoke(clojureRT.protobuf.Protobuf.InvokeNode value) {
        if (invokeBuilder_ == null) {
          if (typesCase_ == 18 &&
              types_ != clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.InvokeNode.newBuilder((clojureRT.protobuf.Protobuf.InvokeNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 18) {
            invokeBuilder_.mergeFrom(value);
          } else {
            invokeBuilder_.setMessage(value);
          }
        }
        typesCase_ = 18;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      public Builder clearInvoke() {
        if (invokeBuilder_ == null) {
          if (typesCase_ == 18) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 18) {
            typesCase_ = 0;
            types_ = null;
          }
          invokeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      public clojureRT.protobuf.Protobuf.InvokeNode.Builder getInvokeBuilder() {
        return getInvokeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder getInvokeOrBuilder() {
        if ((typesCase_ == 18) && (invokeBuilder_ != null)) {
          return invokeBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 18) {
            return (clojureRT.protobuf.Protobuf.InvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.InvokeNode invoke = 18;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.InvokeNode, clojureRT.protobuf.Protobuf.InvokeNode.Builder, clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder> 
          getInvokeFieldBuilder() {
        if (invokeBuilder_ == null) {
          if (!(typesCase_ == 18)) {
            types_ = clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
          }
          invokeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.InvokeNode, clojureRT.protobuf.Protobuf.InvokeNode.Builder, clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.InvokeNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 18;
        onChanged();;
        return invokeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.KeywordInvokeNode, clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder, clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder> keywordInvokeBuilder_;
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       * @return Whether the keywordInvoke field is set.
       */
      @java.lang.Override
      public boolean hasKeywordInvoke() {
        return typesCase_ == 19;
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       * @return The keywordInvoke.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.KeywordInvokeNode getKeywordInvoke() {
        if (keywordInvokeBuilder_ == null) {
          if (typesCase_ == 19) {
            return (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
        } else {
          if (typesCase_ == 19) {
            return keywordInvokeBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      public Builder setKeywordInvoke(clojureRT.protobuf.Protobuf.KeywordInvokeNode value) {
        if (keywordInvokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          keywordInvokeBuilder_.setMessage(value);
        }
        typesCase_ = 19;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      public Builder setKeywordInvoke(
          clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder builderForValue) {
        if (keywordInvokeBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          keywordInvokeBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 19;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      public Builder mergeKeywordInvoke(clojureRT.protobuf.Protobuf.KeywordInvokeNode value) {
        if (keywordInvokeBuilder_ == null) {
          if (typesCase_ == 19 &&
              types_ != clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.KeywordInvokeNode.newBuilder((clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 19) {
            keywordInvokeBuilder_.mergeFrom(value);
          } else {
            keywordInvokeBuilder_.setMessage(value);
          }
        }
        typesCase_ = 19;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      public Builder clearKeywordInvoke() {
        if (keywordInvokeBuilder_ == null) {
          if (typesCase_ == 19) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 19) {
            typesCase_ = 0;
            types_ = null;
          }
          keywordInvokeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      public clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder getKeywordInvokeBuilder() {
        return getKeywordInvokeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder getKeywordInvokeOrBuilder() {
        if ((typesCase_ == 19) && (keywordInvokeBuilder_ != null)) {
          return keywordInvokeBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 19) {
            return (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.KeywordInvokeNode keywordInvoke = 19;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.KeywordInvokeNode, clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder, clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder> 
          getKeywordInvokeFieldBuilder() {
        if (keywordInvokeBuilder_ == null) {
          if (!(typesCase_ == 19)) {
            types_ = clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
          }
          keywordInvokeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.KeywordInvokeNode, clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder, clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.KeywordInvokeNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 19;
        onChanged();;
        return keywordInvokeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LetNode, clojureRT.protobuf.Protobuf.LetNode.Builder, clojureRT.protobuf.Protobuf.LetNodeOrBuilder> letBuilder_;
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       * @return Whether the let field is set.
       */
      @java.lang.Override
      public boolean hasLet() {
        return typesCase_ == 20;
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       * @return The let.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetNode getLet() {
        if (letBuilder_ == null) {
          if (typesCase_ == 20) {
            return (clojureRT.protobuf.Protobuf.LetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
        } else {
          if (typesCase_ == 20) {
            return letBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      public Builder setLet(clojureRT.protobuf.Protobuf.LetNode value) {
        if (letBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          letBuilder_.setMessage(value);
        }
        typesCase_ = 20;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      public Builder setLet(
          clojureRT.protobuf.Protobuf.LetNode.Builder builderForValue) {
        if (letBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          letBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 20;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      public Builder mergeLet(clojureRT.protobuf.Protobuf.LetNode value) {
        if (letBuilder_ == null) {
          if (typesCase_ == 20 &&
              types_ != clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.LetNode.newBuilder((clojureRT.protobuf.Protobuf.LetNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 20) {
            letBuilder_.mergeFrom(value);
          } else {
            letBuilder_.setMessage(value);
          }
        }
        typesCase_ = 20;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      public Builder clearLet() {
        if (letBuilder_ == null) {
          if (typesCase_ == 20) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 20) {
            typesCase_ = 0;
            types_ = null;
          }
          letBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      public clojureRT.protobuf.Protobuf.LetNode.Builder getLetBuilder() {
        return getLetFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetNodeOrBuilder getLetOrBuilder() {
        if ((typesCase_ == 20) && (letBuilder_ != null)) {
          return letBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 20) {
            return (clojureRT.protobuf.Protobuf.LetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LetNode let = 20;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LetNode, clojureRT.protobuf.Protobuf.LetNode.Builder, clojureRT.protobuf.Protobuf.LetNodeOrBuilder> 
          getLetFieldBuilder() {
        if (letBuilder_ == null) {
          if (!(typesCase_ == 20)) {
            types_ = clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
          }
          letBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.LetNode, clojureRT.protobuf.Protobuf.LetNode.Builder, clojureRT.protobuf.Protobuf.LetNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.LetNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 20;
        onChanged();;
        return letBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LetfnNode, clojureRT.protobuf.Protobuf.LetfnNode.Builder, clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder> letfnBuilder_;
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       * @return Whether the letfn field is set.
       */
      @java.lang.Override
      public boolean hasLetfn() {
        return typesCase_ == 21;
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       * @return The letfn.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetfnNode getLetfn() {
        if (letfnBuilder_ == null) {
          if (typesCase_ == 21) {
            return (clojureRT.protobuf.Protobuf.LetfnNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
        } else {
          if (typesCase_ == 21) {
            return letfnBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      public Builder setLetfn(clojureRT.protobuf.Protobuf.LetfnNode value) {
        if (letfnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          letfnBuilder_.setMessage(value);
        }
        typesCase_ = 21;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      public Builder setLetfn(
          clojureRT.protobuf.Protobuf.LetfnNode.Builder builderForValue) {
        if (letfnBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          letfnBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 21;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      public Builder mergeLetfn(clojureRT.protobuf.Protobuf.LetfnNode value) {
        if (letfnBuilder_ == null) {
          if (typesCase_ == 21 &&
              types_ != clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.LetfnNode.newBuilder((clojureRT.protobuf.Protobuf.LetfnNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 21) {
            letfnBuilder_.mergeFrom(value);
          } else {
            letfnBuilder_.setMessage(value);
          }
        }
        typesCase_ = 21;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      public Builder clearLetfn() {
        if (letfnBuilder_ == null) {
          if (typesCase_ == 21) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 21) {
            typesCase_ = 0;
            types_ = null;
          }
          letfnBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      public clojureRT.protobuf.Protobuf.LetfnNode.Builder getLetfnBuilder() {
        return getLetfnFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder getLetfnOrBuilder() {
        if ((typesCase_ == 21) && (letfnBuilder_ != null)) {
          return letfnBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 21) {
            return (clojureRT.protobuf.Protobuf.LetfnNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LetfnNode letfn = 21;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LetfnNode, clojureRT.protobuf.Protobuf.LetfnNode.Builder, clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder> 
          getLetfnFieldBuilder() {
        if (letfnBuilder_ == null) {
          if (!(typesCase_ == 21)) {
            types_ = clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
          }
          letfnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.LetfnNode, clojureRT.protobuf.Protobuf.LetfnNode.Builder, clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.LetfnNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 21;
        onChanged();;
        return letfnBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LocalNode, clojureRT.protobuf.Protobuf.LocalNode.Builder, clojureRT.protobuf.Protobuf.LocalNodeOrBuilder> localBuilder_;
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       * @return Whether the local field is set.
       */
      @java.lang.Override
      public boolean hasLocal() {
        return typesCase_ == 22;
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       * @return The local.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalNode getLocal() {
        if (localBuilder_ == null) {
          if (typesCase_ == 22) {
            return (clojureRT.protobuf.Protobuf.LocalNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
        } else {
          if (typesCase_ == 22) {
            return localBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      public Builder setLocal(clojureRT.protobuf.Protobuf.LocalNode value) {
        if (localBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          localBuilder_.setMessage(value);
        }
        typesCase_ = 22;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      public Builder setLocal(
          clojureRT.protobuf.Protobuf.LocalNode.Builder builderForValue) {
        if (localBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          localBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 22;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      public Builder mergeLocal(clojureRT.protobuf.Protobuf.LocalNode value) {
        if (localBuilder_ == null) {
          if (typesCase_ == 22 &&
              types_ != clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.LocalNode.newBuilder((clojureRT.protobuf.Protobuf.LocalNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 22) {
            localBuilder_.mergeFrom(value);
          } else {
            localBuilder_.setMessage(value);
          }
        }
        typesCase_ = 22;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      public Builder clearLocal() {
        if (localBuilder_ == null) {
          if (typesCase_ == 22) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 22) {
            typesCase_ = 0;
            types_ = null;
          }
          localBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      public clojureRT.protobuf.Protobuf.LocalNode.Builder getLocalBuilder() {
        return getLocalFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalNodeOrBuilder getLocalOrBuilder() {
        if ((typesCase_ == 22) && (localBuilder_ != null)) {
          return localBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 22) {
            return (clojureRT.protobuf.Protobuf.LocalNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LocalNode local = 22;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LocalNode, clojureRT.protobuf.Protobuf.LocalNode.Builder, clojureRT.protobuf.Protobuf.LocalNodeOrBuilder> 
          getLocalFieldBuilder() {
        if (localBuilder_ == null) {
          if (!(typesCase_ == 22)) {
            types_ = clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
          }
          localBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.LocalNode, clojureRT.protobuf.Protobuf.LocalNode.Builder, clojureRT.protobuf.Protobuf.LocalNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.LocalNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 22;
        onChanged();;
        return localBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LoopNode, clojureRT.protobuf.Protobuf.LoopNode.Builder, clojureRT.protobuf.Protobuf.LoopNodeOrBuilder> loopBuilder_;
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       * @return Whether the loop field is set.
       */
      @java.lang.Override
      public boolean hasLoop() {
        return typesCase_ == 23;
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       * @return The loop.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LoopNode getLoop() {
        if (loopBuilder_ == null) {
          if (typesCase_ == 23) {
            return (clojureRT.protobuf.Protobuf.LoopNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
        } else {
          if (typesCase_ == 23) {
            return loopBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      public Builder setLoop(clojureRT.protobuf.Protobuf.LoopNode value) {
        if (loopBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          loopBuilder_.setMessage(value);
        }
        typesCase_ = 23;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      public Builder setLoop(
          clojureRT.protobuf.Protobuf.LoopNode.Builder builderForValue) {
        if (loopBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          loopBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 23;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      public Builder mergeLoop(clojureRT.protobuf.Protobuf.LoopNode value) {
        if (loopBuilder_ == null) {
          if (typesCase_ == 23 &&
              types_ != clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.LoopNode.newBuilder((clojureRT.protobuf.Protobuf.LoopNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 23) {
            loopBuilder_.mergeFrom(value);
          } else {
            loopBuilder_.setMessage(value);
          }
        }
        typesCase_ = 23;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      public Builder clearLoop() {
        if (loopBuilder_ == null) {
          if (typesCase_ == 23) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 23) {
            typesCase_ = 0;
            types_ = null;
          }
          loopBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      public clojureRT.protobuf.Protobuf.LoopNode.Builder getLoopBuilder() {
        return getLoopFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LoopNodeOrBuilder getLoopOrBuilder() {
        if ((typesCase_ == 23) && (loopBuilder_ != null)) {
          return loopBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 23) {
            return (clojureRT.protobuf.Protobuf.LoopNode) types_;
          }
          return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.LoopNode loop = 23;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.LoopNode, clojureRT.protobuf.Protobuf.LoopNode.Builder, clojureRT.protobuf.Protobuf.LoopNodeOrBuilder> 
          getLoopFieldBuilder() {
        if (loopBuilder_ == null) {
          if (!(typesCase_ == 23)) {
            types_ = clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
          }
          loopBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.LoopNode, clojureRT.protobuf.Protobuf.LoopNode.Builder, clojureRT.protobuf.Protobuf.LoopNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.LoopNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 23;
        onChanged();;
        return loopBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MapNode, clojureRT.protobuf.Protobuf.MapNode.Builder, clojureRT.protobuf.Protobuf.MapNodeOrBuilder> mapBuilder_;
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       * @return Whether the map field is set.
       */
      @java.lang.Override
      public boolean hasMap() {
        return typesCase_ == 24;
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       * @return The map.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MapNode getMap() {
        if (mapBuilder_ == null) {
          if (typesCase_ == 24) {
            return (clojureRT.protobuf.Protobuf.MapNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
        } else {
          if (typesCase_ == 24) {
            return mapBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      public Builder setMap(clojureRT.protobuf.Protobuf.MapNode value) {
        if (mapBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          mapBuilder_.setMessage(value);
        }
        typesCase_ = 24;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      public Builder setMap(
          clojureRT.protobuf.Protobuf.MapNode.Builder builderForValue) {
        if (mapBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          mapBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 24;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      public Builder mergeMap(clojureRT.protobuf.Protobuf.MapNode value) {
        if (mapBuilder_ == null) {
          if (typesCase_ == 24 &&
              types_ != clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.MapNode.newBuilder((clojureRT.protobuf.Protobuf.MapNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 24) {
            mapBuilder_.mergeFrom(value);
          } else {
            mapBuilder_.setMessage(value);
          }
        }
        typesCase_ = 24;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      public Builder clearMap() {
        if (mapBuilder_ == null) {
          if (typesCase_ == 24) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 24) {
            typesCase_ = 0;
            types_ = null;
          }
          mapBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      public clojureRT.protobuf.Protobuf.MapNode.Builder getMapBuilder() {
        return getMapFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MapNodeOrBuilder getMapOrBuilder() {
        if ((typesCase_ == 24) && (mapBuilder_ != null)) {
          return mapBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 24) {
            return (clojureRT.protobuf.Protobuf.MapNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MapNode map = 24;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MapNode, clojureRT.protobuf.Protobuf.MapNode.Builder, clojureRT.protobuf.Protobuf.MapNodeOrBuilder> 
          getMapFieldBuilder() {
        if (mapBuilder_ == null) {
          if (!(typesCase_ == 24)) {
            types_ = clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
          }
          mapBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.MapNode, clojureRT.protobuf.Protobuf.MapNode.Builder, clojureRT.protobuf.Protobuf.MapNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.MapNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 24;
        onChanged();;
        return mapBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MethodNode, clojureRT.protobuf.Protobuf.MethodNode.Builder, clojureRT.protobuf.Protobuf.MethodNodeOrBuilder> methodBuilder_;
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       * @return Whether the method field is set.
       */
      @java.lang.Override
      public boolean hasMethod() {
        return typesCase_ == 25;
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       * @return The method.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MethodNode getMethod() {
        if (methodBuilder_ == null) {
          if (typesCase_ == 25) {
            return (clojureRT.protobuf.Protobuf.MethodNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
        } else {
          if (typesCase_ == 25) {
            return methodBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      public Builder setMethod(clojureRT.protobuf.Protobuf.MethodNode value) {
        if (methodBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          methodBuilder_.setMessage(value);
        }
        typesCase_ = 25;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      public Builder setMethod(
          clojureRT.protobuf.Protobuf.MethodNode.Builder builderForValue) {
        if (methodBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          methodBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 25;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      public Builder mergeMethod(clojureRT.protobuf.Protobuf.MethodNode value) {
        if (methodBuilder_ == null) {
          if (typesCase_ == 25 &&
              types_ != clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.MethodNode.newBuilder((clojureRT.protobuf.Protobuf.MethodNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 25) {
            methodBuilder_.mergeFrom(value);
          } else {
            methodBuilder_.setMessage(value);
          }
        }
        typesCase_ = 25;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      public Builder clearMethod() {
        if (methodBuilder_ == null) {
          if (typesCase_ == 25) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 25) {
            typesCase_ = 0;
            types_ = null;
          }
          methodBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      public clojureRT.protobuf.Protobuf.MethodNode.Builder getMethodBuilder() {
        return getMethodFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MethodNodeOrBuilder getMethodOrBuilder() {
        if ((typesCase_ == 25) && (methodBuilder_ != null)) {
          return methodBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 25) {
            return (clojureRT.protobuf.Protobuf.MethodNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MethodNode method = 25;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MethodNode, clojureRT.protobuf.Protobuf.MethodNode.Builder, clojureRT.protobuf.Protobuf.MethodNodeOrBuilder> 
          getMethodFieldBuilder() {
        if (methodBuilder_ == null) {
          if (!(typesCase_ == 25)) {
            types_ = clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
          }
          methodBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.MethodNode, clojureRT.protobuf.Protobuf.MethodNode.Builder, clojureRT.protobuf.Protobuf.MethodNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.MethodNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 25;
        onChanged();;
        return methodBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MonitorEnterNode, clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder, clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder> monitorEnterBuilder_;
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       * @return Whether the monitorEnter field is set.
       */
      @java.lang.Override
      public boolean hasMonitorEnter() {
        return typesCase_ == 26;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       * @return The monitorEnter.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorEnterNode getMonitorEnter() {
        if (monitorEnterBuilder_ == null) {
          if (typesCase_ == 26) {
            return (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
        } else {
          if (typesCase_ == 26) {
            return monitorEnterBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      public Builder setMonitorEnter(clojureRT.protobuf.Protobuf.MonitorEnterNode value) {
        if (monitorEnterBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          monitorEnterBuilder_.setMessage(value);
        }
        typesCase_ = 26;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      public Builder setMonitorEnter(
          clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder builderForValue) {
        if (monitorEnterBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          monitorEnterBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 26;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      public Builder mergeMonitorEnter(clojureRT.protobuf.Protobuf.MonitorEnterNode value) {
        if (monitorEnterBuilder_ == null) {
          if (typesCase_ == 26 &&
              types_ != clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.MonitorEnterNode.newBuilder((clojureRT.protobuf.Protobuf.MonitorEnterNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 26) {
            monitorEnterBuilder_.mergeFrom(value);
          } else {
            monitorEnterBuilder_.setMessage(value);
          }
        }
        typesCase_ = 26;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      public Builder clearMonitorEnter() {
        if (monitorEnterBuilder_ == null) {
          if (typesCase_ == 26) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 26) {
            typesCase_ = 0;
            types_ = null;
          }
          monitorEnterBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      public clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder getMonitorEnterBuilder() {
        return getMonitorEnterFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder getMonitorEnterOrBuilder() {
        if ((typesCase_ == 26) && (monitorEnterBuilder_ != null)) {
          return monitorEnterBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 26) {
            return (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MonitorEnterNode monitorEnter = 26;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MonitorEnterNode, clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder, clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder> 
          getMonitorEnterFieldBuilder() {
        if (monitorEnterBuilder_ == null) {
          if (!(typesCase_ == 26)) {
            types_ = clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
          }
          monitorEnterBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.MonitorEnterNode, clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder, clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.MonitorEnterNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 26;
        onChanged();;
        return monitorEnterBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MonitorExitNode, clojureRT.protobuf.Protobuf.MonitorExitNode.Builder, clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder> monitorExitBuilder_;
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       * @return Whether the monitorExit field is set.
       */
      @java.lang.Override
      public boolean hasMonitorExit() {
        return typesCase_ == 27;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       * @return The monitorExit.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorExitNode getMonitorExit() {
        if (monitorExitBuilder_ == null) {
          if (typesCase_ == 27) {
            return (clojureRT.protobuf.Protobuf.MonitorExitNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
        } else {
          if (typesCase_ == 27) {
            return monitorExitBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      public Builder setMonitorExit(clojureRT.protobuf.Protobuf.MonitorExitNode value) {
        if (monitorExitBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          monitorExitBuilder_.setMessage(value);
        }
        typesCase_ = 27;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      public Builder setMonitorExit(
          clojureRT.protobuf.Protobuf.MonitorExitNode.Builder builderForValue) {
        if (monitorExitBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          monitorExitBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 27;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      public Builder mergeMonitorExit(clojureRT.protobuf.Protobuf.MonitorExitNode value) {
        if (monitorExitBuilder_ == null) {
          if (typesCase_ == 27 &&
              types_ != clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.MonitorExitNode.newBuilder((clojureRT.protobuf.Protobuf.MonitorExitNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 27) {
            monitorExitBuilder_.mergeFrom(value);
          } else {
            monitorExitBuilder_.setMessage(value);
          }
        }
        typesCase_ = 27;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      public Builder clearMonitorExit() {
        if (monitorExitBuilder_ == null) {
          if (typesCase_ == 27) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 27) {
            typesCase_ = 0;
            types_ = null;
          }
          monitorExitBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      public clojureRT.protobuf.Protobuf.MonitorExitNode.Builder getMonitorExitBuilder() {
        return getMonitorExitFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder getMonitorExitOrBuilder() {
        if ((typesCase_ == 27) && (monitorExitBuilder_ != null)) {
          return monitorExitBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 27) {
            return (clojureRT.protobuf.Protobuf.MonitorExitNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MonitorExitNode monitorExit = 27;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MonitorExitNode, clojureRT.protobuf.Protobuf.MonitorExitNode.Builder, clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder> 
          getMonitorExitFieldBuilder() {
        if (monitorExitBuilder_ == null) {
          if (!(typesCase_ == 27)) {
            types_ = clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
          }
          monitorExitBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.MonitorExitNode, clojureRT.protobuf.Protobuf.MonitorExitNode.Builder, clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.MonitorExitNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 27;
        onChanged();;
        return monitorExitBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.NewNode, clojureRT.protobuf.Protobuf.NewNode.Builder, clojureRT.protobuf.Protobuf.NewNodeOrBuilder> newBuilder_;
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       * @return Whether the new field is set.
       */
      @java.lang.Override
      public boolean hasNew() {
        return typesCase_ == 28;
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       * @return The new.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.NewNode getNew() {
        if (newBuilder_ == null) {
          if (typesCase_ == 28) {
            return (clojureRT.protobuf.Protobuf.NewNode) types_;
          }
          return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
        } else {
          if (typesCase_ == 28) {
            return newBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      public Builder setNew(clojureRT.protobuf.Protobuf.NewNode value) {
        if (newBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          newBuilder_.setMessage(value);
        }
        typesCase_ = 28;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      public Builder setNew(
          clojureRT.protobuf.Protobuf.NewNode.Builder builderForValue) {
        if (newBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          newBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 28;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      public Builder mergeNew(clojureRT.protobuf.Protobuf.NewNode value) {
        if (newBuilder_ == null) {
          if (typesCase_ == 28 &&
              types_ != clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.NewNode.newBuilder((clojureRT.protobuf.Protobuf.NewNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 28) {
            newBuilder_.mergeFrom(value);
          } else {
            newBuilder_.setMessage(value);
          }
        }
        typesCase_ = 28;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      public Builder clearNew() {
        if (newBuilder_ == null) {
          if (typesCase_ == 28) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 28) {
            typesCase_ = 0;
            types_ = null;
          }
          newBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      public clojureRT.protobuf.Protobuf.NewNode.Builder getNewBuilder() {
        return getNewFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.NewNodeOrBuilder getNewOrBuilder() {
        if ((typesCase_ == 28) && (newBuilder_ != null)) {
          return newBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 28) {
            return (clojureRT.protobuf.Protobuf.NewNode) types_;
          }
          return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.NewNode new = 28;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.NewNode, clojureRT.protobuf.Protobuf.NewNode.Builder, clojureRT.protobuf.Protobuf.NewNodeOrBuilder> 
          getNewFieldBuilder() {
        if (newBuilder_ == null) {
          if (!(typesCase_ == 28)) {
            types_ = clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
          }
          newBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.NewNode, clojureRT.protobuf.Protobuf.NewNode.Builder, clojureRT.protobuf.Protobuf.NewNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.NewNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 28;
        onChanged();;
        return newBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.PrimInvokeNode, clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder, clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder> primInvokeBuilder_;
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       * @return Whether the primInvoke field is set.
       */
      @java.lang.Override
      public boolean hasPrimInvoke() {
        return typesCase_ == 29;
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       * @return The primInvoke.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.PrimInvokeNode getPrimInvoke() {
        if (primInvokeBuilder_ == null) {
          if (typesCase_ == 29) {
            return (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
        } else {
          if (typesCase_ == 29) {
            return primInvokeBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      public Builder setPrimInvoke(clojureRT.protobuf.Protobuf.PrimInvokeNode value) {
        if (primInvokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          primInvokeBuilder_.setMessage(value);
        }
        typesCase_ = 29;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      public Builder setPrimInvoke(
          clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder builderForValue) {
        if (primInvokeBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          primInvokeBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 29;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      public Builder mergePrimInvoke(clojureRT.protobuf.Protobuf.PrimInvokeNode value) {
        if (primInvokeBuilder_ == null) {
          if (typesCase_ == 29 &&
              types_ != clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.PrimInvokeNode.newBuilder((clojureRT.protobuf.Protobuf.PrimInvokeNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 29) {
            primInvokeBuilder_.mergeFrom(value);
          } else {
            primInvokeBuilder_.setMessage(value);
          }
        }
        typesCase_ = 29;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      public Builder clearPrimInvoke() {
        if (primInvokeBuilder_ == null) {
          if (typesCase_ == 29) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 29) {
            typesCase_ = 0;
            types_ = null;
          }
          primInvokeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      public clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder getPrimInvokeBuilder() {
        return getPrimInvokeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder getPrimInvokeOrBuilder() {
        if ((typesCase_ == 29) && (primInvokeBuilder_ != null)) {
          return primInvokeBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 29) {
            return (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.PrimInvokeNode primInvoke = 29;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.PrimInvokeNode, clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder, clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder> 
          getPrimInvokeFieldBuilder() {
        if (primInvokeBuilder_ == null) {
          if (!(typesCase_ == 29)) {
            types_ = clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
          }
          primInvokeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.PrimInvokeNode, clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder, clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.PrimInvokeNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 29;
        onChanged();;
        return primInvokeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ProtocolInvokeNode, clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder, clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder> protocolInvokeBuilder_;
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       * @return Whether the protocolInvoke field is set.
       */
      @java.lang.Override
      public boolean hasProtocolInvoke() {
        return typesCase_ == 30;
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       * @return The protocolInvoke.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNode getProtocolInvoke() {
        if (protocolInvokeBuilder_ == null) {
          if (typesCase_ == 30) {
            return (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
        } else {
          if (typesCase_ == 30) {
            return protocolInvokeBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      public Builder setProtocolInvoke(clojureRT.protobuf.Protobuf.ProtocolInvokeNode value) {
        if (protocolInvokeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          protocolInvokeBuilder_.setMessage(value);
        }
        typesCase_ = 30;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      public Builder setProtocolInvoke(
          clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder builderForValue) {
        if (protocolInvokeBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          protocolInvokeBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 30;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      public Builder mergeProtocolInvoke(clojureRT.protobuf.Protobuf.ProtocolInvokeNode value) {
        if (protocolInvokeBuilder_ == null) {
          if (typesCase_ == 30 &&
              types_ != clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.ProtocolInvokeNode.newBuilder((clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 30) {
            protocolInvokeBuilder_.mergeFrom(value);
          } else {
            protocolInvokeBuilder_.setMessage(value);
          }
        }
        typesCase_ = 30;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      public Builder clearProtocolInvoke() {
        if (protocolInvokeBuilder_ == null) {
          if (typesCase_ == 30) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 30) {
            typesCase_ = 0;
            types_ = null;
          }
          protocolInvokeBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder getProtocolInvokeBuilder() {
        return getProtocolInvokeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder getProtocolInvokeOrBuilder() {
        if ((typesCase_ == 30) && (protocolInvokeBuilder_ != null)) {
          return protocolInvokeBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 30) {
            return (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ProtocolInvokeNode protocolInvoke = 30;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ProtocolInvokeNode, clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder, clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder> 
          getProtocolInvokeFieldBuilder() {
        if (protocolInvokeBuilder_ == null) {
          if (!(typesCase_ == 30)) {
            types_ = clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
          }
          protocolInvokeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.ProtocolInvokeNode, clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder, clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 30;
        onChanged();;
        return protocolInvokeBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.QuoteNode, clojureRT.protobuf.Protobuf.QuoteNode.Builder, clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder> quoteBuilder_;
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       * @return Whether the quote field is set.
       */
      @java.lang.Override
      public boolean hasQuote() {
        return typesCase_ == 31;
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       * @return The quote.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.QuoteNode getQuote() {
        if (quoteBuilder_ == null) {
          if (typesCase_ == 31) {
            return (clojureRT.protobuf.Protobuf.QuoteNode) types_;
          }
          return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
        } else {
          if (typesCase_ == 31) {
            return quoteBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      public Builder setQuote(clojureRT.protobuf.Protobuf.QuoteNode value) {
        if (quoteBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          quoteBuilder_.setMessage(value);
        }
        typesCase_ = 31;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      public Builder setQuote(
          clojureRT.protobuf.Protobuf.QuoteNode.Builder builderForValue) {
        if (quoteBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          quoteBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 31;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      public Builder mergeQuote(clojureRT.protobuf.Protobuf.QuoteNode value) {
        if (quoteBuilder_ == null) {
          if (typesCase_ == 31 &&
              types_ != clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.QuoteNode.newBuilder((clojureRT.protobuf.Protobuf.QuoteNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 31) {
            quoteBuilder_.mergeFrom(value);
          } else {
            quoteBuilder_.setMessage(value);
          }
        }
        typesCase_ = 31;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      public Builder clearQuote() {
        if (quoteBuilder_ == null) {
          if (typesCase_ == 31) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 31) {
            typesCase_ = 0;
            types_ = null;
          }
          quoteBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      public clojureRT.protobuf.Protobuf.QuoteNode.Builder getQuoteBuilder() {
        return getQuoteFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder getQuoteOrBuilder() {
        if ((typesCase_ == 31) && (quoteBuilder_ != null)) {
          return quoteBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 31) {
            return (clojureRT.protobuf.Protobuf.QuoteNode) types_;
          }
          return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.QuoteNode quote = 31;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.QuoteNode, clojureRT.protobuf.Protobuf.QuoteNode.Builder, clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder> 
          getQuoteFieldBuilder() {
        if (quoteBuilder_ == null) {
          if (!(typesCase_ == 31)) {
            types_ = clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
          }
          quoteBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.QuoteNode, clojureRT.protobuf.Protobuf.QuoteNode.Builder, clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.QuoteNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 31;
        onChanged();;
        return quoteBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.RecurNode, clojureRT.protobuf.Protobuf.RecurNode.Builder, clojureRT.protobuf.Protobuf.RecurNodeOrBuilder> recurBuilder_;
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       * @return Whether the recur field is set.
       */
      @java.lang.Override
      public boolean hasRecur() {
        return typesCase_ == 32;
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       * @return The recur.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.RecurNode getRecur() {
        if (recurBuilder_ == null) {
          if (typesCase_ == 32) {
            return (clojureRT.protobuf.Protobuf.RecurNode) types_;
          }
          return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
        } else {
          if (typesCase_ == 32) {
            return recurBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      public Builder setRecur(clojureRT.protobuf.Protobuf.RecurNode value) {
        if (recurBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          recurBuilder_.setMessage(value);
        }
        typesCase_ = 32;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      public Builder setRecur(
          clojureRT.protobuf.Protobuf.RecurNode.Builder builderForValue) {
        if (recurBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          recurBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 32;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      public Builder mergeRecur(clojureRT.protobuf.Protobuf.RecurNode value) {
        if (recurBuilder_ == null) {
          if (typesCase_ == 32 &&
              types_ != clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.RecurNode.newBuilder((clojureRT.protobuf.Protobuf.RecurNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 32) {
            recurBuilder_.mergeFrom(value);
          } else {
            recurBuilder_.setMessage(value);
          }
        }
        typesCase_ = 32;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      public Builder clearRecur() {
        if (recurBuilder_ == null) {
          if (typesCase_ == 32) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 32) {
            typesCase_ = 0;
            types_ = null;
          }
          recurBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      public clojureRT.protobuf.Protobuf.RecurNode.Builder getRecurBuilder() {
        return getRecurFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.RecurNodeOrBuilder getRecurOrBuilder() {
        if ((typesCase_ == 32) && (recurBuilder_ != null)) {
          return recurBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 32) {
            return (clojureRT.protobuf.Protobuf.RecurNode) types_;
          }
          return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.RecurNode recur = 32;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.RecurNode, clojureRT.protobuf.Protobuf.RecurNode.Builder, clojureRT.protobuf.Protobuf.RecurNodeOrBuilder> 
          getRecurFieldBuilder() {
        if (recurBuilder_ == null) {
          if (!(typesCase_ == 32)) {
            types_ = clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
          }
          recurBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.RecurNode, clojureRT.protobuf.Protobuf.RecurNode.Builder, clojureRT.protobuf.Protobuf.RecurNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.RecurNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 32;
        onChanged();;
        return recurBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ReifyNode, clojureRT.protobuf.Protobuf.ReifyNode.Builder, clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder> reifyBuilder_;
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       * @return Whether the reify field is set.
       */
      @java.lang.Override
      public boolean hasReify() {
        return typesCase_ == 33;
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       * @return The reify.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ReifyNode getReify() {
        if (reifyBuilder_ == null) {
          if (typesCase_ == 33) {
            return (clojureRT.protobuf.Protobuf.ReifyNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
        } else {
          if (typesCase_ == 33) {
            return reifyBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      public Builder setReify(clojureRT.protobuf.Protobuf.ReifyNode value) {
        if (reifyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          reifyBuilder_.setMessage(value);
        }
        typesCase_ = 33;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      public Builder setReify(
          clojureRT.protobuf.Protobuf.ReifyNode.Builder builderForValue) {
        if (reifyBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          reifyBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 33;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      public Builder mergeReify(clojureRT.protobuf.Protobuf.ReifyNode value) {
        if (reifyBuilder_ == null) {
          if (typesCase_ == 33 &&
              types_ != clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.ReifyNode.newBuilder((clojureRT.protobuf.Protobuf.ReifyNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 33) {
            reifyBuilder_.mergeFrom(value);
          } else {
            reifyBuilder_.setMessage(value);
          }
        }
        typesCase_ = 33;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      public Builder clearReify() {
        if (reifyBuilder_ == null) {
          if (typesCase_ == 33) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 33) {
            typesCase_ = 0;
            types_ = null;
          }
          reifyBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      public clojureRT.protobuf.Protobuf.ReifyNode.Builder getReifyBuilder() {
        return getReifyFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder getReifyOrBuilder() {
        if ((typesCase_ == 33) && (reifyBuilder_ != null)) {
          return reifyBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 33) {
            return (clojureRT.protobuf.Protobuf.ReifyNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ReifyNode reify = 33;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ReifyNode, clojureRT.protobuf.Protobuf.ReifyNode.Builder, clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder> 
          getReifyFieldBuilder() {
        if (reifyBuilder_ == null) {
          if (!(typesCase_ == 33)) {
            types_ = clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
          }
          reifyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.ReifyNode, clojureRT.protobuf.Protobuf.ReifyNode.Builder, clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.ReifyNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 33;
        onChanged();;
        return reifyBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.SetNode, clojureRT.protobuf.Protobuf.SetNode.Builder, clojureRT.protobuf.Protobuf.SetNodeOrBuilder> setBuilder_;
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       * @return Whether the set field is set.
       */
      @java.lang.Override
      public boolean hasSet() {
        return typesCase_ == 34;
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       * @return The set.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.SetNode getSet() {
        if (setBuilder_ == null) {
          if (typesCase_ == 34) {
            return (clojureRT.protobuf.Protobuf.SetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
        } else {
          if (typesCase_ == 34) {
            return setBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      public Builder setSet(clojureRT.protobuf.Protobuf.SetNode value) {
        if (setBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          setBuilder_.setMessage(value);
        }
        typesCase_ = 34;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      public Builder setSet(
          clojureRT.protobuf.Protobuf.SetNode.Builder builderForValue) {
        if (setBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          setBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 34;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      public Builder mergeSet(clojureRT.protobuf.Protobuf.SetNode value) {
        if (setBuilder_ == null) {
          if (typesCase_ == 34 &&
              types_ != clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.SetNode.newBuilder((clojureRT.protobuf.Protobuf.SetNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 34) {
            setBuilder_.mergeFrom(value);
          } else {
            setBuilder_.setMessage(value);
          }
        }
        typesCase_ = 34;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      public Builder clearSet() {
        if (setBuilder_ == null) {
          if (typesCase_ == 34) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 34) {
            typesCase_ = 0;
            types_ = null;
          }
          setBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      public clojureRT.protobuf.Protobuf.SetNode.Builder getSetBuilder() {
        return getSetFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.SetNodeOrBuilder getSetOrBuilder() {
        if ((typesCase_ == 34) && (setBuilder_ != null)) {
          return setBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 34) {
            return (clojureRT.protobuf.Protobuf.SetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.SetNode set = 34;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.SetNode, clojureRT.protobuf.Protobuf.SetNode.Builder, clojureRT.protobuf.Protobuf.SetNodeOrBuilder> 
          getSetFieldBuilder() {
        if (setBuilder_ == null) {
          if (!(typesCase_ == 34)) {
            types_ = clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
          }
          setBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.SetNode, clojureRT.protobuf.Protobuf.SetNode.Builder, clojureRT.protobuf.Protobuf.SetNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.SetNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 34;
        onChanged();;
        return setBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MutateSetNode, clojureRT.protobuf.Protobuf.MutateSetNode.Builder, clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder> mutateSetBuilder_;
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       * @return Whether the mutateSet field is set.
       */
      @java.lang.Override
      public boolean hasMutateSet() {
        return typesCase_ == 35;
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       * @return The mutateSet.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MutateSetNode getMutateSet() {
        if (mutateSetBuilder_ == null) {
          if (typesCase_ == 35) {
            return (clojureRT.protobuf.Protobuf.MutateSetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
        } else {
          if (typesCase_ == 35) {
            return mutateSetBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      public Builder setMutateSet(clojureRT.protobuf.Protobuf.MutateSetNode value) {
        if (mutateSetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          mutateSetBuilder_.setMessage(value);
        }
        typesCase_ = 35;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      public Builder setMutateSet(
          clojureRT.protobuf.Protobuf.MutateSetNode.Builder builderForValue) {
        if (mutateSetBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          mutateSetBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 35;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      public Builder mergeMutateSet(clojureRT.protobuf.Protobuf.MutateSetNode value) {
        if (mutateSetBuilder_ == null) {
          if (typesCase_ == 35 &&
              types_ != clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.MutateSetNode.newBuilder((clojureRT.protobuf.Protobuf.MutateSetNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 35) {
            mutateSetBuilder_.mergeFrom(value);
          } else {
            mutateSetBuilder_.setMessage(value);
          }
        }
        typesCase_ = 35;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      public Builder clearMutateSet() {
        if (mutateSetBuilder_ == null) {
          if (typesCase_ == 35) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 35) {
            typesCase_ = 0;
            types_ = null;
          }
          mutateSetBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      public clojureRT.protobuf.Protobuf.MutateSetNode.Builder getMutateSetBuilder() {
        return getMutateSetFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder getMutateSetOrBuilder() {
        if ((typesCase_ == 35) && (mutateSetBuilder_ != null)) {
          return mutateSetBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 35) {
            return (clojureRT.protobuf.Protobuf.MutateSetNode) types_;
          }
          return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.MutateSetNode mutateSet = 35;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.MutateSetNode, clojureRT.protobuf.Protobuf.MutateSetNode.Builder, clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder> 
          getMutateSetFieldBuilder() {
        if (mutateSetBuilder_ == null) {
          if (!(typesCase_ == 35)) {
            types_ = clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
          }
          mutateSetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.MutateSetNode, clojureRT.protobuf.Protobuf.MutateSetNode.Builder, clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.MutateSetNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 35;
        onChanged();;
        return mutateSetBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.StaticCallNode, clojureRT.protobuf.Protobuf.StaticCallNode.Builder, clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder> staticCallBuilder_;
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       * @return Whether the staticCall field is set.
       */
      @java.lang.Override
      public boolean hasStaticCall() {
        return typesCase_ == 36;
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       * @return The staticCall.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticCallNode getStaticCall() {
        if (staticCallBuilder_ == null) {
          if (typesCase_ == 36) {
            return (clojureRT.protobuf.Protobuf.StaticCallNode) types_;
          }
          return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
        } else {
          if (typesCase_ == 36) {
            return staticCallBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      public Builder setStaticCall(clojureRT.protobuf.Protobuf.StaticCallNode value) {
        if (staticCallBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          staticCallBuilder_.setMessage(value);
        }
        typesCase_ = 36;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      public Builder setStaticCall(
          clojureRT.protobuf.Protobuf.StaticCallNode.Builder builderForValue) {
        if (staticCallBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          staticCallBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 36;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      public Builder mergeStaticCall(clojureRT.protobuf.Protobuf.StaticCallNode value) {
        if (staticCallBuilder_ == null) {
          if (typesCase_ == 36 &&
              types_ != clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.StaticCallNode.newBuilder((clojureRT.protobuf.Protobuf.StaticCallNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 36) {
            staticCallBuilder_.mergeFrom(value);
          } else {
            staticCallBuilder_.setMessage(value);
          }
        }
        typesCase_ = 36;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      public Builder clearStaticCall() {
        if (staticCallBuilder_ == null) {
          if (typesCase_ == 36) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 36) {
            typesCase_ = 0;
            types_ = null;
          }
          staticCallBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      public clojureRT.protobuf.Protobuf.StaticCallNode.Builder getStaticCallBuilder() {
        return getStaticCallFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder getStaticCallOrBuilder() {
        if ((typesCase_ == 36) && (staticCallBuilder_ != null)) {
          return staticCallBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 36) {
            return (clojureRT.protobuf.Protobuf.StaticCallNode) types_;
          }
          return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.StaticCallNode staticCall = 36;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.StaticCallNode, clojureRT.protobuf.Protobuf.StaticCallNode.Builder, clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder> 
          getStaticCallFieldBuilder() {
        if (staticCallBuilder_ == null) {
          if (!(typesCase_ == 36)) {
            types_ = clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
          }
          staticCallBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.StaticCallNode, clojureRT.protobuf.Protobuf.StaticCallNode.Builder, clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.StaticCallNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 36;
        onChanged();;
        return staticCallBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.StaticFieldNode, clojureRT.protobuf.Protobuf.StaticFieldNode.Builder, clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder> staticFieldBuilder_;
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       * @return Whether the staticField field is set.
       */
      @java.lang.Override
      public boolean hasStaticField() {
        return typesCase_ == 37;
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       * @return The staticField.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticFieldNode getStaticField() {
        if (staticFieldBuilder_ == null) {
          if (typesCase_ == 37) {
            return (clojureRT.protobuf.Protobuf.StaticFieldNode) types_;
          }
          return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
        } else {
          if (typesCase_ == 37) {
            return staticFieldBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      public Builder setStaticField(clojureRT.protobuf.Protobuf.StaticFieldNode value) {
        if (staticFieldBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          staticFieldBuilder_.setMessage(value);
        }
        typesCase_ = 37;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      public Builder setStaticField(
          clojureRT.protobuf.Protobuf.StaticFieldNode.Builder builderForValue) {
        if (staticFieldBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          staticFieldBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 37;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      public Builder mergeStaticField(clojureRT.protobuf.Protobuf.StaticFieldNode value) {
        if (staticFieldBuilder_ == null) {
          if (typesCase_ == 37 &&
              types_ != clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.StaticFieldNode.newBuilder((clojureRT.protobuf.Protobuf.StaticFieldNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 37) {
            staticFieldBuilder_.mergeFrom(value);
          } else {
            staticFieldBuilder_.setMessage(value);
          }
        }
        typesCase_ = 37;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      public Builder clearStaticField() {
        if (staticFieldBuilder_ == null) {
          if (typesCase_ == 37) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 37) {
            typesCase_ = 0;
            types_ = null;
          }
          staticFieldBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      public clojureRT.protobuf.Protobuf.StaticFieldNode.Builder getStaticFieldBuilder() {
        return getStaticFieldFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder getStaticFieldOrBuilder() {
        if ((typesCase_ == 37) && (staticFieldBuilder_ != null)) {
          return staticFieldBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 37) {
            return (clojureRT.protobuf.Protobuf.StaticFieldNode) types_;
          }
          return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.StaticFieldNode staticField = 37;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.StaticFieldNode, clojureRT.protobuf.Protobuf.StaticFieldNode.Builder, clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder> 
          getStaticFieldFieldBuilder() {
        if (staticFieldBuilder_ == null) {
          if (!(typesCase_ == 37)) {
            types_ = clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
          }
          staticFieldBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.StaticFieldNode, clojureRT.protobuf.Protobuf.StaticFieldNode.Builder, clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.StaticFieldNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 37;
        onChanged();;
        return staticFieldBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.TheVarNode, clojureRT.protobuf.Protobuf.TheVarNode.Builder, clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder> theVarBuilder_;
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       * @return Whether the theVar field is set.
       */
      @java.lang.Override
      public boolean hasTheVar() {
        return typesCase_ == 38;
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       * @return The theVar.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TheVarNode getTheVar() {
        if (theVarBuilder_ == null) {
          if (typesCase_ == 38) {
            return (clojureRT.protobuf.Protobuf.TheVarNode) types_;
          }
          return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
        } else {
          if (typesCase_ == 38) {
            return theVarBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      public Builder setTheVar(clojureRT.protobuf.Protobuf.TheVarNode value) {
        if (theVarBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          theVarBuilder_.setMessage(value);
        }
        typesCase_ = 38;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      public Builder setTheVar(
          clojureRT.protobuf.Protobuf.TheVarNode.Builder builderForValue) {
        if (theVarBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          theVarBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 38;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      public Builder mergeTheVar(clojureRT.protobuf.Protobuf.TheVarNode value) {
        if (theVarBuilder_ == null) {
          if (typesCase_ == 38 &&
              types_ != clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.TheVarNode.newBuilder((clojureRT.protobuf.Protobuf.TheVarNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 38) {
            theVarBuilder_.mergeFrom(value);
          } else {
            theVarBuilder_.setMessage(value);
          }
        }
        typesCase_ = 38;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      public Builder clearTheVar() {
        if (theVarBuilder_ == null) {
          if (typesCase_ == 38) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 38) {
            typesCase_ = 0;
            types_ = null;
          }
          theVarBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      public clojureRT.protobuf.Protobuf.TheVarNode.Builder getTheVarBuilder() {
        return getTheVarFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder getTheVarOrBuilder() {
        if ((typesCase_ == 38) && (theVarBuilder_ != null)) {
          return theVarBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 38) {
            return (clojureRT.protobuf.Protobuf.TheVarNode) types_;
          }
          return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.TheVarNode theVar = 38;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.TheVarNode, clojureRT.protobuf.Protobuf.TheVarNode.Builder, clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder> 
          getTheVarFieldBuilder() {
        if (theVarBuilder_ == null) {
          if (!(typesCase_ == 38)) {
            types_ = clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
          }
          theVarBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.TheVarNode, clojureRT.protobuf.Protobuf.TheVarNode.Builder, clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.TheVarNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 38;
        onChanged();;
        return theVarBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ThrowNode, clojureRT.protobuf.Protobuf.ThrowNode.Builder, clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder> throwBuilder_;
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       * @return Whether the throw field is set.
       */
      @java.lang.Override
      public boolean hasThrow() {
        return typesCase_ == 39;
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       * @return The throw.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ThrowNode getThrow() {
        if (throwBuilder_ == null) {
          if (typesCase_ == 39) {
            return (clojureRT.protobuf.Protobuf.ThrowNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
        } else {
          if (typesCase_ == 39) {
            return throwBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      public Builder setThrow(clojureRT.protobuf.Protobuf.ThrowNode value) {
        if (throwBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          throwBuilder_.setMessage(value);
        }
        typesCase_ = 39;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      public Builder setThrow(
          clojureRT.protobuf.Protobuf.ThrowNode.Builder builderForValue) {
        if (throwBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          throwBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 39;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      public Builder mergeThrow(clojureRT.protobuf.Protobuf.ThrowNode value) {
        if (throwBuilder_ == null) {
          if (typesCase_ == 39 &&
              types_ != clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.ThrowNode.newBuilder((clojureRT.protobuf.Protobuf.ThrowNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 39) {
            throwBuilder_.mergeFrom(value);
          } else {
            throwBuilder_.setMessage(value);
          }
        }
        typesCase_ = 39;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      public Builder clearThrow() {
        if (throwBuilder_ == null) {
          if (typesCase_ == 39) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 39) {
            typesCase_ = 0;
            types_ = null;
          }
          throwBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      public clojureRT.protobuf.Protobuf.ThrowNode.Builder getThrowBuilder() {
        return getThrowFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder getThrowOrBuilder() {
        if ((typesCase_ == 39) && (throwBuilder_ != null)) {
          return throwBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 39) {
            return (clojureRT.protobuf.Protobuf.ThrowNode) types_;
          }
          return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.ThrowNode throw = 39;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.ThrowNode, clojureRT.protobuf.Protobuf.ThrowNode.Builder, clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder> 
          getThrowFieldBuilder() {
        if (throwBuilder_ == null) {
          if (!(typesCase_ == 39)) {
            types_ = clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
          }
          throwBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.ThrowNode, clojureRT.protobuf.Protobuf.ThrowNode.Builder, clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.ThrowNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 39;
        onChanged();;
        return throwBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.TryNode, clojureRT.protobuf.Protobuf.TryNode.Builder, clojureRT.protobuf.Protobuf.TryNodeOrBuilder> tryBuilder_;
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       * @return Whether the try field is set.
       */
      @java.lang.Override
      public boolean hasTry() {
        return typesCase_ == 40;
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       * @return The try.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TryNode getTry() {
        if (tryBuilder_ == null) {
          if (typesCase_ == 40) {
            return (clojureRT.protobuf.Protobuf.TryNode) types_;
          }
          return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
        } else {
          if (typesCase_ == 40) {
            return tryBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      public Builder setTry(clojureRT.protobuf.Protobuf.TryNode value) {
        if (tryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          tryBuilder_.setMessage(value);
        }
        typesCase_ = 40;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      public Builder setTry(
          clojureRT.protobuf.Protobuf.TryNode.Builder builderForValue) {
        if (tryBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          tryBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 40;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      public Builder mergeTry(clojureRT.protobuf.Protobuf.TryNode value) {
        if (tryBuilder_ == null) {
          if (typesCase_ == 40 &&
              types_ != clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.TryNode.newBuilder((clojureRT.protobuf.Protobuf.TryNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 40) {
            tryBuilder_.mergeFrom(value);
          } else {
            tryBuilder_.setMessage(value);
          }
        }
        typesCase_ = 40;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      public Builder clearTry() {
        if (tryBuilder_ == null) {
          if (typesCase_ == 40) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 40) {
            typesCase_ = 0;
            types_ = null;
          }
          tryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      public clojureRT.protobuf.Protobuf.TryNode.Builder getTryBuilder() {
        return getTryFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TryNodeOrBuilder getTryOrBuilder() {
        if ((typesCase_ == 40) && (tryBuilder_ != null)) {
          return tryBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 40) {
            return (clojureRT.protobuf.Protobuf.TryNode) types_;
          }
          return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.TryNode try = 40;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.TryNode, clojureRT.protobuf.Protobuf.TryNode.Builder, clojureRT.protobuf.Protobuf.TryNodeOrBuilder> 
          getTryFieldBuilder() {
        if (tryBuilder_ == null) {
          if (!(typesCase_ == 40)) {
            types_ = clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
          }
          tryBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.TryNode, clojureRT.protobuf.Protobuf.TryNode.Builder, clojureRT.protobuf.Protobuf.TryNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.TryNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 40;
        onChanged();;
        return tryBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.VarNode, clojureRT.protobuf.Protobuf.VarNode.Builder, clojureRT.protobuf.Protobuf.VarNodeOrBuilder> varBuilder_;
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       * @return Whether the var field is set.
       */
      @java.lang.Override
      public boolean hasVar() {
        return typesCase_ == 41;
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       * @return The var.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VarNode getVar() {
        if (varBuilder_ == null) {
          if (typesCase_ == 41) {
            return (clojureRT.protobuf.Protobuf.VarNode) types_;
          }
          return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
        } else {
          if (typesCase_ == 41) {
            return varBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      public Builder setVar(clojureRT.protobuf.Protobuf.VarNode value) {
        if (varBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          varBuilder_.setMessage(value);
        }
        typesCase_ = 41;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      public Builder setVar(
          clojureRT.protobuf.Protobuf.VarNode.Builder builderForValue) {
        if (varBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          varBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 41;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      public Builder mergeVar(clojureRT.protobuf.Protobuf.VarNode value) {
        if (varBuilder_ == null) {
          if (typesCase_ == 41 &&
              types_ != clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.VarNode.newBuilder((clojureRT.protobuf.Protobuf.VarNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 41) {
            varBuilder_.mergeFrom(value);
          } else {
            varBuilder_.setMessage(value);
          }
        }
        typesCase_ = 41;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      public Builder clearVar() {
        if (varBuilder_ == null) {
          if (typesCase_ == 41) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 41) {
            typesCase_ = 0;
            types_ = null;
          }
          varBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      public clojureRT.protobuf.Protobuf.VarNode.Builder getVarBuilder() {
        return getVarFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VarNodeOrBuilder getVarOrBuilder() {
        if ((typesCase_ == 41) && (varBuilder_ != null)) {
          return varBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 41) {
            return (clojureRT.protobuf.Protobuf.VarNode) types_;
          }
          return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.VarNode var = 41;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.VarNode, clojureRT.protobuf.Protobuf.VarNode.Builder, clojureRT.protobuf.Protobuf.VarNodeOrBuilder> 
          getVarFieldBuilder() {
        if (varBuilder_ == null) {
          if (!(typesCase_ == 41)) {
            types_ = clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
          }
          varBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.VarNode, clojureRT.protobuf.Protobuf.VarNode.Builder, clojureRT.protobuf.Protobuf.VarNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.VarNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 41;
        onChanged();;
        return varBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.VectorNode, clojureRT.protobuf.Protobuf.VectorNode.Builder, clojureRT.protobuf.Protobuf.VectorNodeOrBuilder> vectorBuilder_;
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       * @return Whether the vector field is set.
       */
      @java.lang.Override
      public boolean hasVector() {
        return typesCase_ == 42;
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       * @return The vector.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VectorNode getVector() {
        if (vectorBuilder_ == null) {
          if (typesCase_ == 42) {
            return (clojureRT.protobuf.Protobuf.VectorNode) types_;
          }
          return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
        } else {
          if (typesCase_ == 42) {
            return vectorBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      public Builder setVector(clojureRT.protobuf.Protobuf.VectorNode value) {
        if (vectorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          vectorBuilder_.setMessage(value);
        }
        typesCase_ = 42;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      public Builder setVector(
          clojureRT.protobuf.Protobuf.VectorNode.Builder builderForValue) {
        if (vectorBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          vectorBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 42;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      public Builder mergeVector(clojureRT.protobuf.Protobuf.VectorNode value) {
        if (vectorBuilder_ == null) {
          if (typesCase_ == 42 &&
              types_ != clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.VectorNode.newBuilder((clojureRT.protobuf.Protobuf.VectorNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 42) {
            vectorBuilder_.mergeFrom(value);
          } else {
            vectorBuilder_.setMessage(value);
          }
        }
        typesCase_ = 42;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      public Builder clearVector() {
        if (vectorBuilder_ == null) {
          if (typesCase_ == 42) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 42) {
            typesCase_ = 0;
            types_ = null;
          }
          vectorBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      public clojureRT.protobuf.Protobuf.VectorNode.Builder getVectorBuilder() {
        return getVectorFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VectorNodeOrBuilder getVectorOrBuilder() {
        if ((typesCase_ == 42) && (vectorBuilder_ != null)) {
          return vectorBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 42) {
            return (clojureRT.protobuf.Protobuf.VectorNode) types_;
          }
          return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.VectorNode vector = 42;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.VectorNode, clojureRT.protobuf.Protobuf.VectorNode.Builder, clojureRT.protobuf.Protobuf.VectorNodeOrBuilder> 
          getVectorFieldBuilder() {
        if (vectorBuilder_ == null) {
          if (!(typesCase_ == 42)) {
            types_ = clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
          }
          vectorBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.VectorNode, clojureRT.protobuf.Protobuf.VectorNode.Builder, clojureRT.protobuf.Protobuf.VectorNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.VectorNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 42;
        onChanged();;
        return vectorBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.WithMetaNode, clojureRT.protobuf.Protobuf.WithMetaNode.Builder, clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder> withMetaBuilder_;
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       * @return Whether the withMeta field is set.
       */
      @java.lang.Override
      public boolean hasWithMeta() {
        return typesCase_ == 43;
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       * @return The withMeta.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.WithMetaNode getWithMeta() {
        if (withMetaBuilder_ == null) {
          if (typesCase_ == 43) {
            return (clojureRT.protobuf.Protobuf.WithMetaNode) types_;
          }
          return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
        } else {
          if (typesCase_ == 43) {
            return withMetaBuilder_.getMessage();
          }
          return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      public Builder setWithMeta(clojureRT.protobuf.Protobuf.WithMetaNode value) {
        if (withMetaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          types_ = value;
          onChanged();
        } else {
          withMetaBuilder_.setMessage(value);
        }
        typesCase_ = 43;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      public Builder setWithMeta(
          clojureRT.protobuf.Protobuf.WithMetaNode.Builder builderForValue) {
        if (withMetaBuilder_ == null) {
          types_ = builderForValue.build();
          onChanged();
        } else {
          withMetaBuilder_.setMessage(builderForValue.build());
        }
        typesCase_ = 43;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      public Builder mergeWithMeta(clojureRT.protobuf.Protobuf.WithMetaNode value) {
        if (withMetaBuilder_ == null) {
          if (typesCase_ == 43 &&
              types_ != clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance()) {
            types_ = clojureRT.protobuf.Protobuf.WithMetaNode.newBuilder((clojureRT.protobuf.Protobuf.WithMetaNode) types_)
                .mergeFrom(value).buildPartial();
          } else {
            types_ = value;
          }
          onChanged();
        } else {
          if (typesCase_ == 43) {
            withMetaBuilder_.mergeFrom(value);
          } else {
            withMetaBuilder_.setMessage(value);
          }
        }
        typesCase_ = 43;
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      public Builder clearWithMeta() {
        if (withMetaBuilder_ == null) {
          if (typesCase_ == 43) {
            typesCase_ = 0;
            types_ = null;
            onChanged();
          }
        } else {
          if (typesCase_ == 43) {
            typesCase_ = 0;
            types_ = null;
          }
          withMetaBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      public clojureRT.protobuf.Protobuf.WithMetaNode.Builder getWithMetaBuilder() {
        return getWithMetaFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder getWithMetaOrBuilder() {
        if ((typesCase_ == 43) && (withMetaBuilder_ != null)) {
          return withMetaBuilder_.getMessageOrBuilder();
        } else {
          if (typesCase_ == 43) {
            return (clojureRT.protobuf.Protobuf.WithMetaNode) types_;
          }
          return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
        }
      }
      /**
       * <code>.clojureRT.protobuf.WithMetaNode withMeta = 43;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.WithMetaNode, clojureRT.protobuf.Protobuf.WithMetaNode.Builder, clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder> 
          getWithMetaFieldBuilder() {
        if (withMetaBuilder_ == null) {
          if (!(typesCase_ == 43)) {
            types_ = clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
          }
          withMetaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.WithMetaNode, clojureRT.protobuf.Protobuf.WithMetaNode.Builder, clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder>(
                  (clojureRT.protobuf.Protobuf.WithMetaNode) types_,
                  getParentForChildren(),
                  isClean());
          types_ = null;
        }
        typesCase_ = 43;
        onChanged();;
        return withMetaBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.Subnode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.Subnode)
    private static final clojureRT.protobuf.Protobuf.Subnode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.Subnode();
    }

    public static clojureRT.protobuf.Protobuf.Subnode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Subnode>
        PARSER = new com.google.protobuf.AbstractParser<Subnode>() {
      @java.lang.Override
      public Subnode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Subnode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Subnode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Subnode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Subnode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface BindingNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.BindingNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return Whether the argId field is set.
     */
    boolean hasArgId();
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return The argId.
     */
    int getArgId();

    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return Whether the init field is set.
     */
    boolean hasInit();
    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return The init.
     */
    clojureRT.protobuf.Protobuf.Node getInit();
    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder();

    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The enum numeric value on the wire for local.
     */
    int getLocalValue();
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The local.
     */
    clojureRT.protobuf.Protobuf.LocalType getLocal();

    /**
     * <pre>
     * The uniquified binding symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The uniquified binding symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return Whether the isVariadic field is set.
     */
    boolean hasIsVariadic();
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    boolean getIsVariadic();
  }
  /**
   * <pre>
   * Node for a binding symbol 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.BindingNode}
   */
  public static final class BindingNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.BindingNode)
      BindingNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use BindingNode.newBuilder() to construct.
    private BindingNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private BindingNode() {
      local_ = 0;
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new BindingNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private BindingNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              argId_ = input.readUInt32();
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) != 0)) {
                subBuilder = init_.toBuilder();
              }
              init_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(init_);
                init_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              local_ = rawValue;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000004;
              isVariadic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_BindingNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_BindingNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.BindingNode.class, clojureRT.protobuf.Protobuf.BindingNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGID_FIELD_NUMBER = 1;
    private int argId_;
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return Whether the argId field is set.
     */
    @java.lang.Override
    public boolean hasArgId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return The argId.
     */
    @java.lang.Override
    public int getArgId() {
      return argId_;
    }

    public static final int INIT_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node init_;
    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return Whether the init field is set.
     */
    @java.lang.Override
    public boolean hasInit() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return The init.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getInit() {
      return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
    }
    /**
     * <pre>
     * When :local is :let, :letfn or :loop, an AST node representing the bound value 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder() {
      return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
    }

    public static final int LOCAL_FIELD_NUMBER = 3;
    private int local_;
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The enum numeric value on the wire for local.
     */
    @java.lang.Override public int getLocalValue() {
      return local_;
    }
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The local.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.LocalType getLocal() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.LocalType result = clojureRT.protobuf.Protobuf.LocalType.valueOf(local_);
      return result == null ? clojureRT.protobuf.Protobuf.LocalType.UNRECOGNIZED : result;
    }

    public static final int NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The uniquified binding symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The uniquified binding symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ISVARIADIC_FIELD_NUMBER = 5;
    private boolean isVariadic_;
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return Whether the isVariadic field is set.
     */
    @java.lang.Override
    public boolean hasIsVariadic() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    @java.lang.Override
    public boolean getIsVariadic() {
      return isVariadic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, argId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getInit());
      }
      if (local_ != clojureRT.protobuf.Protobuf.LocalType.localTypeArg.getNumber()) {
        output.writeEnum(3, local_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeBool(5, isVariadic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, argId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInit());
      }
      if (local_ != clojureRT.protobuf.Protobuf.LocalType.localTypeArg.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, local_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, name_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isVariadic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.BindingNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.BindingNode other = (clojureRT.protobuf.Protobuf.BindingNode) obj;

      if (hasArgId() != other.hasArgId()) return false;
      if (hasArgId()) {
        if (getArgId()
            != other.getArgId()) return false;
      }
      if (hasInit() != other.hasInit()) return false;
      if (hasInit()) {
        if (!getInit()
            .equals(other.getInit())) return false;
      }
      if (local_ != other.local_) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (hasIsVariadic() != other.hasIsVariadic()) return false;
      if (hasIsVariadic()) {
        if (getIsVariadic()
            != other.getIsVariadic()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasArgId()) {
        hash = (37 * hash) + ARGID_FIELD_NUMBER;
        hash = (53 * hash) + getArgId();
      }
      if (hasInit()) {
        hash = (37 * hash) + INIT_FIELD_NUMBER;
        hash = (53 * hash) + getInit().hashCode();
      }
      hash = (37 * hash) + LOCAL_FIELD_NUMBER;
      hash = (53 * hash) + local_;
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasIsVariadic()) {
        hash = (37 * hash) + ISVARIADIC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsVariadic());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.BindingNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.BindingNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a binding symbol 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.BindingNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.BindingNode)
        clojureRT.protobuf.Protobuf.BindingNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_BindingNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_BindingNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.BindingNode.class, clojureRT.protobuf.Protobuf.BindingNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.BindingNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInitFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        argId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (initBuilder_ == null) {
          init_ = null;
        } else {
          initBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        local_ = 0;

        name_ = "";

        isVariadic_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_BindingNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.BindingNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.BindingNode build() {
        clojureRT.protobuf.Protobuf.BindingNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.BindingNode buildPartial() {
        clojureRT.protobuf.Protobuf.BindingNode result = new clojureRT.protobuf.Protobuf.BindingNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.argId_ = argId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (initBuilder_ == null) {
            result.init_ = init_;
          } else {
            result.init_ = initBuilder_.build();
          }
          to_bitField0_ |= 0x00000002;
        }
        result.local_ = local_;
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.isVariadic_ = isVariadic_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.BindingNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.BindingNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.BindingNode other) {
        if (other == clojureRT.protobuf.Protobuf.BindingNode.getDefaultInstance()) return this;
        if (other.hasArgId()) {
          setArgId(other.getArgId());
        }
        if (other.hasInit()) {
          mergeInit(other.getInit());
        }
        if (other.local_ != 0) {
          setLocalValue(other.getLocalValue());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasIsVariadic()) {
          setIsVariadic(other.getIsVariadic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.BindingNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.BindingNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int argId_ ;
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return Whether the argId field is set.
       */
      @java.lang.Override
      public boolean hasArgId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return The argId.
       */
      @java.lang.Override
      public int getArgId() {
        return argId_;
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @param value The argId to set.
       * @return This builder for chaining.
       */
      public Builder setArgId(int value) {
        bitField0_ |= 0x00000001;
        argId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearArgId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        argId_ = 0;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node init_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> initBuilder_;
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       * @return Whether the init field is set.
       */
      public boolean hasInit() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       * @return The init.
       */
      public clojureRT.protobuf.Protobuf.Node getInit() {
        if (initBuilder_ == null) {
          return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
        } else {
          return initBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder setInit(clojureRT.protobuf.Protobuf.Node value) {
        if (initBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          init_ = value;
          onChanged();
        } else {
          initBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder setInit(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (initBuilder_ == null) {
          init_ = builderForValue.build();
          onChanged();
        } else {
          initBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder mergeInit(clojureRT.protobuf.Protobuf.Node value) {
        if (initBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              init_ != null &&
              init_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            init_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(init_).mergeFrom(value).buildPartial();
          } else {
            init_ = value;
          }
          onChanged();
        } else {
          initBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder clearInit() {
        if (initBuilder_ == null) {
          init_ = null;
          onChanged();
        } else {
          initBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getInitBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder() {
        if (initBuilder_ != null) {
          return initBuilder_.getMessageOrBuilder();
        } else {
          return init_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
        }
      }
      /**
       * <pre>
       * When :local is :let, :letfn or :loop, an AST node representing the bound value 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getInitFieldBuilder() {
        if (initBuilder_ == null) {
          initBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getInit(),
                  getParentForChildren(),
                  isClean());
          init_ = null;
        }
        return initBuilder_;
      }

      private int local_ = 0;
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return The enum numeric value on the wire for local.
       */
      @java.lang.Override public int getLocalValue() {
        return local_;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @param value The enum numeric value on the wire for local to set.
       * @return This builder for chaining.
       */
      public Builder setLocalValue(int value) {
        
        local_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return The local.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalType getLocal() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.LocalType result = clojureRT.protobuf.Protobuf.LocalType.valueOf(local_);
        return result == null ? clojureRT.protobuf.Protobuf.LocalType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @param value The local to set.
       * @return This builder for chaining.
       */
      public Builder setLocal(clojureRT.protobuf.Protobuf.LocalType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        local_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocal() {
        
        local_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The uniquified binding symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The uniquified binding symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The uniquified binding symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The uniquified binding symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The uniquified binding symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private boolean isVariadic_ ;
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return Whether the isVariadic field is set.
       */
      @java.lang.Override
      public boolean hasIsVariadic() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return The isVariadic.
       */
      @java.lang.Override
      public boolean getIsVariadic() {
        return isVariadic_;
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @param value The isVariadic to set.
       * @return This builder for chaining.
       */
      public Builder setIsVariadic(boolean value) {
        bitField0_ |= 0x00000004;
        isVariadic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVariadic() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isVariadic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.BindingNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.BindingNode)
    private static final clojureRT.protobuf.Protobuf.BindingNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.BindingNode();
    }

    public static clojureRT.protobuf.Protobuf.BindingNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<BindingNode>
        PARSER = new com.google.protobuf.AbstractParser<BindingNode>() {
      @java.lang.Override
      public BindingNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new BindingNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<BindingNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<BindingNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.BindingNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CaseNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.CaseNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     * @return Whether the default field is set.
     */
    boolean hasDefault();
    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     * @return The default.
     */
    clojureRT.protobuf.Protobuf.Node getDefault();
    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getDefaultOrBuilder();

    /**
     * <code>string high = 2;</code>
     * @return The high.
     */
    java.lang.String getHigh();
    /**
     * <code>string high = 2;</code>
     * @return The bytes for high.
     */
    com.google.protobuf.ByteString
        getHighBytes();

    /**
     * <code>string low = 3;</code>
     * @return The low.
     */
    java.lang.String getLow();
    /**
     * <code>string low = 3;</code>
     * @return The bytes for low.
     */
    com.google.protobuf.ByteString
        getLowBytes();

    /**
     * <code>uint32 mask = 4;</code>
     * @return The mask.
     */
    int getMask();

    /**
     * <code>uint32 shift = 5;</code>
     * @return The shift.
     */
    int getShift();

    /**
     * <pre>
     * A set of case ints for which equivalence checking should not be done 
     * </pre>
     *
     * <code>string isSkipCheck = 6;</code>
     * @return The isSkipCheck.
     */
    java.lang.String getIsSkipCheck();
    /**
     * <pre>
     * A set of case ints for which equivalence checking should not be done 
     * </pre>
     *
     * <code>string isSkipCheck = 6;</code>
     * @return The bytes for isSkipCheck.
     */
    com.google.protobuf.ByteString
        getIsSkipCheckBytes();

    /**
     * <pre>
     * One of :sparse or :compact 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
     * @return The enum numeric value on the wire for switchType.
     */
    int getSwitchTypeValue();
    /**
     * <pre>
     * One of :sparse or :compact 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
     * @return The switchType.
     */
    clojureRT.protobuf.Protobuf.CaseNode.SwitchType getSwitchType();

    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     * @return Whether the test field is set.
     */
    boolean hasTest();
    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     * @return The test.
     */
    clojureRT.protobuf.Protobuf.Node getTest();
    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder();

    /**
     * <pre>
     * One of :int, :hash-equiv or :hash-identity 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
     * @return The enum numeric value on the wire for testType.
     */
    int getTestTypeValue();
    /**
     * <pre>
     * One of :int, :hash-equiv or :hash-identity 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
     * @return The testType.
     */
    clojureRT.protobuf.Protobuf.CaseNode.TestType getTestType();

    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getTestsList();
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    clojureRT.protobuf.Protobuf.Node getTests(int index);
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    int getTestsCount();
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getTestsOrBuilderList();
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTestsOrBuilder(
        int index);

    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getThensList();
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    clojureRT.protobuf.Protobuf.Node getThens(int index);
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    int getThensCount();
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getThensOrBuilderList();
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getThensOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a case* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.CaseNode}
   */
  public static final class CaseNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.CaseNode)
      CaseNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CaseNode.newBuilder() to construct.
    private CaseNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CaseNode() {
      high_ = "";
      low_ = "";
      isSkipCheck_ = "";
      switchType_ = 0;
      testType_ = 0;
      tests_ = java.util.Collections.emptyList();
      thens_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CaseNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CaseNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (default_ != null) {
                subBuilder = default_.toBuilder();
              }
              default_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(default_);
                default_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              high_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              low_ = s;
              break;
            }
            case 32: {

              mask_ = input.readUInt32();
              break;
            }
            case 40: {

              shift_ = input.readUInt32();
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              isSkipCheck_ = s;
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              switchType_ = rawValue;
              break;
            }
            case 66: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (test_ != null) {
                subBuilder = test_.toBuilder();
              }
              test_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(test_);
                test_ = subBuilder.buildPartial();
              }

              break;
            }
            case 72: {
              int rawValue = input.readEnum();

              testType_ = rawValue;
              break;
            }
            case 82: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                tests_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              tests_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 90: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                thens_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              thens_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          tests_ = java.util.Collections.unmodifiableList(tests_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          thens_ = java.util.Collections.unmodifiableList(thens_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.CaseNode.class, clojureRT.protobuf.Protobuf.CaseNode.Builder.class);
    }

    /**
     * Protobuf enum {@code clojureRT.protobuf.CaseNode.SwitchType}
     */
    public enum SwitchType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>switchTypeSparse = 0;</code>
       */
      switchTypeSparse(0),
      /**
       * <code>switchTypeCompact = 1;</code>
       */
      switchTypeCompact(1),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>switchTypeSparse = 0;</code>
       */
      public static final int switchTypeSparse_VALUE = 0;
      /**
       * <code>switchTypeCompact = 1;</code>
       */
      public static final int switchTypeCompact_VALUE = 1;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static SwitchType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static SwitchType forNumber(int value) {
        switch (value) {
          case 0: return switchTypeSparse;
          case 1: return switchTypeCompact;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<SwitchType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          SwitchType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<SwitchType>() {
              public SwitchType findValueByNumber(int number) {
                return SwitchType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.CaseNode.getDescriptor().getEnumTypes().get(0);
      }

      private static final SwitchType[] VALUES = values();

      public static SwitchType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private SwitchType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clojureRT.protobuf.CaseNode.SwitchType)
    }

    /**
     * Protobuf enum {@code clojureRT.protobuf.CaseNode.TestType}
     */
    public enum TestType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>testTypeInt = 0;</code>
       */
      testTypeInt(0),
      /**
       * <code>testTypeHashEquiv = 1;</code>
       */
      testTypeHashEquiv(1),
      /**
       * <code>testTypeHashIdentity = 2;</code>
       */
      testTypeHashIdentity(2),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>testTypeInt = 0;</code>
       */
      public static final int testTypeInt_VALUE = 0;
      /**
       * <code>testTypeHashEquiv = 1;</code>
       */
      public static final int testTypeHashEquiv_VALUE = 1;
      /**
       * <code>testTypeHashIdentity = 2;</code>
       */
      public static final int testTypeHashIdentity_VALUE = 2;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TestType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TestType forNumber(int value) {
        switch (value) {
          case 0: return testTypeInt;
          case 1: return testTypeHashEquiv;
          case 2: return testTypeHashIdentity;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TestType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TestType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TestType>() {
              public TestType findValueByNumber(int number) {
                return TestType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.CaseNode.getDescriptor().getEnumTypes().get(1);
      }

      private static final TestType[] VALUES = values();

      public static TestType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TestType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clojureRT.protobuf.CaseNode.TestType)
    }

    public static final int DEFAULT_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node default_;
    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     * @return Whether the default field is set.
     */
    @java.lang.Override
    public boolean hasDefault() {
      return default_ != null;
    }
    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     * @return The default.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getDefault() {
      return default_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : default_;
    }
    /**
     * <pre>
     * An AST node representing the default value of the case expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node default = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getDefaultOrBuilder() {
      return getDefault();
    }

    public static final int HIGH_FIELD_NUMBER = 2;
    private volatile java.lang.Object high_;
    /**
     * <code>string high = 2;</code>
     * @return The high.
     */
    @java.lang.Override
    public java.lang.String getHigh() {
      java.lang.Object ref = high_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        high_ = s;
        return s;
      }
    }
    /**
     * <code>string high = 2;</code>
     * @return The bytes for high.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getHighBytes() {
      java.lang.Object ref = high_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        high_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOW_FIELD_NUMBER = 3;
    private volatile java.lang.Object low_;
    /**
     * <code>string low = 3;</code>
     * @return The low.
     */
    @java.lang.Override
    public java.lang.String getLow() {
      java.lang.Object ref = low_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        low_ = s;
        return s;
      }
    }
    /**
     * <code>string low = 3;</code>
     * @return The bytes for low.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLowBytes() {
      java.lang.Object ref = low_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        low_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MASK_FIELD_NUMBER = 4;
    private int mask_;
    /**
     * <code>uint32 mask = 4;</code>
     * @return The mask.
     */
    @java.lang.Override
    public int getMask() {
      return mask_;
    }

    public static final int SHIFT_FIELD_NUMBER = 5;
    private int shift_;
    /**
     * <code>uint32 shift = 5;</code>
     * @return The shift.
     */
    @java.lang.Override
    public int getShift() {
      return shift_;
    }

    public static final int ISSKIPCHECK_FIELD_NUMBER = 6;
    private volatile java.lang.Object isSkipCheck_;
    /**
     * <pre>
     * A set of case ints for which equivalence checking should not be done 
     * </pre>
     *
     * <code>string isSkipCheck = 6;</code>
     * @return The isSkipCheck.
     */
    @java.lang.Override
    public java.lang.String getIsSkipCheck() {
      java.lang.Object ref = isSkipCheck_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        isSkipCheck_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A set of case ints for which equivalence checking should not be done 
     * </pre>
     *
     * <code>string isSkipCheck = 6;</code>
     * @return The bytes for isSkipCheck.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIsSkipCheckBytes() {
      java.lang.Object ref = isSkipCheck_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        isSkipCheck_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SWITCHTYPE_FIELD_NUMBER = 7;
    private int switchType_;
    /**
     * <pre>
     * One of :sparse or :compact 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
     * @return The enum numeric value on the wire for switchType.
     */
    @java.lang.Override public int getSwitchTypeValue() {
      return switchType_;
    }
    /**
     * <pre>
     * One of :sparse or :compact 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
     * @return The switchType.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.CaseNode.SwitchType getSwitchType() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.CaseNode.SwitchType result = clojureRT.protobuf.Protobuf.CaseNode.SwitchType.valueOf(switchType_);
      return result == null ? clojureRT.protobuf.Protobuf.CaseNode.SwitchType.UNRECOGNIZED : result;
    }

    public static final int TEST_FIELD_NUMBER = 8;
    private clojureRT.protobuf.Protobuf.Node test_;
    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     * @return Whether the test field is set.
     */
    @java.lang.Override
    public boolean hasTest() {
      return test_ != null;
    }
    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     * @return The test.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTest() {
      return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
    }
    /**
     * <pre>
     * The AST node for the expression to test against 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 8;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
      return getTest();
    }

    public static final int TESTTYPE_FIELD_NUMBER = 9;
    private int testType_;
    /**
     * <pre>
     * One of :int, :hash-equiv or :hash-identity 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
     * @return The enum numeric value on the wire for testType.
     */
    @java.lang.Override public int getTestTypeValue() {
      return testType_;
    }
    /**
     * <pre>
     * One of :int, :hash-equiv or :hash-identity 
     * </pre>
     *
     * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
     * @return The testType.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.CaseNode.TestType getTestType() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.CaseNode.TestType result = clojureRT.protobuf.Protobuf.CaseNode.TestType.valueOf(testType_);
      return result == null ? clojureRT.protobuf.Protobuf.CaseNode.TestType.UNRECOGNIZED : result;
    }

    public static final int TESTS_FIELD_NUMBER = 10;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> tests_;
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getTestsList() {
      return tests_;
    }
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getTestsOrBuilderList() {
      return tests_;
    }
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    @java.lang.Override
    public int getTestsCount() {
      return tests_.size();
    }
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTests(int index) {
      return tests_.get(index);
    }
    /**
     * <pre>
     * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestsOrBuilder(
        int index) {
      return tests_.get(index);
    }

    public static final int THENS_FIELD_NUMBER = 11;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> thens_;
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getThensList() {
      return thens_;
    }
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getThensOrBuilderList() {
      return thens_;
    }
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    @java.lang.Override
    public int getThensCount() {
      return thens_.size();
    }
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getThens(int index) {
      return thens_.get(index);
    }
    /**
     * <pre>
     * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getThensOrBuilder(
        int index) {
      return thens_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (default_ != null) {
        output.writeMessage(1, getDefault());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(high_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, high_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(low_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, low_);
      }
      if (mask_ != 0) {
        output.writeUInt32(4, mask_);
      }
      if (shift_ != 0) {
        output.writeUInt32(5, shift_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(isSkipCheck_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, isSkipCheck_);
      }
      if (switchType_ != clojureRT.protobuf.Protobuf.CaseNode.SwitchType.switchTypeSparse.getNumber()) {
        output.writeEnum(7, switchType_);
      }
      if (test_ != null) {
        output.writeMessage(8, getTest());
      }
      if (testType_ != clojureRT.protobuf.Protobuf.CaseNode.TestType.testTypeInt.getNumber()) {
        output.writeEnum(9, testType_);
      }
      for (int i = 0; i < tests_.size(); i++) {
        output.writeMessage(10, tests_.get(i));
      }
      for (int i = 0; i < thens_.size(); i++) {
        output.writeMessage(11, thens_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (default_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getDefault());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(high_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, high_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(low_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, low_);
      }
      if (mask_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, mask_);
      }
      if (shift_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, shift_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(isSkipCheck_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, isSkipCheck_);
      }
      if (switchType_ != clojureRT.protobuf.Protobuf.CaseNode.SwitchType.switchTypeSparse.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, switchType_);
      }
      if (test_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getTest());
      }
      if (testType_ != clojureRT.protobuf.Protobuf.CaseNode.TestType.testTypeInt.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, testType_);
      }
      for (int i = 0; i < tests_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, tests_.get(i));
      }
      for (int i = 0; i < thens_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(11, thens_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.CaseNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.CaseNode other = (clojureRT.protobuf.Protobuf.CaseNode) obj;

      if (hasDefault() != other.hasDefault()) return false;
      if (hasDefault()) {
        if (!getDefault()
            .equals(other.getDefault())) return false;
      }
      if (!getHigh()
          .equals(other.getHigh())) return false;
      if (!getLow()
          .equals(other.getLow())) return false;
      if (getMask()
          != other.getMask()) return false;
      if (getShift()
          != other.getShift()) return false;
      if (!getIsSkipCheck()
          .equals(other.getIsSkipCheck())) return false;
      if (switchType_ != other.switchType_) return false;
      if (hasTest() != other.hasTest()) return false;
      if (hasTest()) {
        if (!getTest()
            .equals(other.getTest())) return false;
      }
      if (testType_ != other.testType_) return false;
      if (!getTestsList()
          .equals(other.getTestsList())) return false;
      if (!getThensList()
          .equals(other.getThensList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDefault()) {
        hash = (37 * hash) + DEFAULT_FIELD_NUMBER;
        hash = (53 * hash) + getDefault().hashCode();
      }
      hash = (37 * hash) + HIGH_FIELD_NUMBER;
      hash = (53 * hash) + getHigh().hashCode();
      hash = (37 * hash) + LOW_FIELD_NUMBER;
      hash = (53 * hash) + getLow().hashCode();
      hash = (37 * hash) + MASK_FIELD_NUMBER;
      hash = (53 * hash) + getMask();
      hash = (37 * hash) + SHIFT_FIELD_NUMBER;
      hash = (53 * hash) + getShift();
      hash = (37 * hash) + ISSKIPCHECK_FIELD_NUMBER;
      hash = (53 * hash) + getIsSkipCheck().hashCode();
      hash = (37 * hash) + SWITCHTYPE_FIELD_NUMBER;
      hash = (53 * hash) + switchType_;
      if (hasTest()) {
        hash = (37 * hash) + TEST_FIELD_NUMBER;
        hash = (53 * hash) + getTest().hashCode();
      }
      hash = (37 * hash) + TESTTYPE_FIELD_NUMBER;
      hash = (53 * hash) + testType_;
      if (getTestsCount() > 0) {
        hash = (37 * hash) + TESTS_FIELD_NUMBER;
        hash = (53 * hash) + getTestsList().hashCode();
      }
      if (getThensCount() > 0) {
        hash = (37 * hash) + THENS_FIELD_NUMBER;
        hash = (53 * hash) + getThensList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.CaseNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a case* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.CaseNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.CaseNode)
        clojureRT.protobuf.Protobuf.CaseNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.CaseNode.class, clojureRT.protobuf.Protobuf.CaseNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.CaseNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTestsFieldBuilder();
          getThensFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (defaultBuilder_ == null) {
          default_ = null;
        } else {
          default_ = null;
          defaultBuilder_ = null;
        }
        high_ = "";

        low_ = "";

        mask_ = 0;

        shift_ = 0;

        isSkipCheck_ = "";

        switchType_ = 0;

        if (testBuilder_ == null) {
          test_ = null;
        } else {
          test_ = null;
          testBuilder_ = null;
        }
        testType_ = 0;

        if (testsBuilder_ == null) {
          tests_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          testsBuilder_.clear();
        }
        if (thensBuilder_ == null) {
          thens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          thensBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode build() {
        clojureRT.protobuf.Protobuf.CaseNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode buildPartial() {
        clojureRT.protobuf.Protobuf.CaseNode result = new clojureRT.protobuf.Protobuf.CaseNode(this);
        int from_bitField0_ = bitField0_;
        if (defaultBuilder_ == null) {
          result.default_ = default_;
        } else {
          result.default_ = defaultBuilder_.build();
        }
        result.high_ = high_;
        result.low_ = low_;
        result.mask_ = mask_;
        result.shift_ = shift_;
        result.isSkipCheck_ = isSkipCheck_;
        result.switchType_ = switchType_;
        if (testBuilder_ == null) {
          result.test_ = test_;
        } else {
          result.test_ = testBuilder_.build();
        }
        result.testType_ = testType_;
        if (testsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            tests_ = java.util.Collections.unmodifiableList(tests_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tests_ = tests_;
        } else {
          result.tests_ = testsBuilder_.build();
        }
        if (thensBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            thens_ = java.util.Collections.unmodifiableList(thens_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.thens_ = thens_;
        } else {
          result.thens_ = thensBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.CaseNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.CaseNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.CaseNode other) {
        if (other == clojureRT.protobuf.Protobuf.CaseNode.getDefaultInstance()) return this;
        if (other.hasDefault()) {
          mergeDefault(other.getDefault());
        }
        if (!other.getHigh().isEmpty()) {
          high_ = other.high_;
          onChanged();
        }
        if (!other.getLow().isEmpty()) {
          low_ = other.low_;
          onChanged();
        }
        if (other.getMask() != 0) {
          setMask(other.getMask());
        }
        if (other.getShift() != 0) {
          setShift(other.getShift());
        }
        if (!other.getIsSkipCheck().isEmpty()) {
          isSkipCheck_ = other.isSkipCheck_;
          onChanged();
        }
        if (other.switchType_ != 0) {
          setSwitchTypeValue(other.getSwitchTypeValue());
        }
        if (other.hasTest()) {
          mergeTest(other.getTest());
        }
        if (other.testType_ != 0) {
          setTestTypeValue(other.getTestTypeValue());
        }
        if (testsBuilder_ == null) {
          if (!other.tests_.isEmpty()) {
            if (tests_.isEmpty()) {
              tests_ = other.tests_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTestsIsMutable();
              tests_.addAll(other.tests_);
            }
            onChanged();
          }
        } else {
          if (!other.tests_.isEmpty()) {
            if (testsBuilder_.isEmpty()) {
              testsBuilder_.dispose();
              testsBuilder_ = null;
              tests_ = other.tests_;
              bitField0_ = (bitField0_ & ~0x00000001);
              testsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTestsFieldBuilder() : null;
            } else {
              testsBuilder_.addAllMessages(other.tests_);
            }
          }
        }
        if (thensBuilder_ == null) {
          if (!other.thens_.isEmpty()) {
            if (thens_.isEmpty()) {
              thens_ = other.thens_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureThensIsMutable();
              thens_.addAll(other.thens_);
            }
            onChanged();
          }
        } else {
          if (!other.thens_.isEmpty()) {
            if (thensBuilder_.isEmpty()) {
              thensBuilder_.dispose();
              thensBuilder_ = null;
              thens_ = other.thens_;
              bitField0_ = (bitField0_ & ~0x00000002);
              thensBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getThensFieldBuilder() : null;
            } else {
              thensBuilder_.addAllMessages(other.thens_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.CaseNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.CaseNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private clojureRT.protobuf.Protobuf.Node default_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> defaultBuilder_;
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       * @return Whether the default field is set.
       */
      public boolean hasDefault() {
        return defaultBuilder_ != null || default_ != null;
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       * @return The default.
       */
      public clojureRT.protobuf.Protobuf.Node getDefault() {
        if (defaultBuilder_ == null) {
          return default_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : default_;
        } else {
          return defaultBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public Builder setDefault(clojureRT.protobuf.Protobuf.Node value) {
        if (defaultBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          default_ = value;
          onChanged();
        } else {
          defaultBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public Builder setDefault(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (defaultBuilder_ == null) {
          default_ = builderForValue.build();
          onChanged();
        } else {
          defaultBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public Builder mergeDefault(clojureRT.protobuf.Protobuf.Node value) {
        if (defaultBuilder_ == null) {
          if (default_ != null) {
            default_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(default_).mergeFrom(value).buildPartial();
          } else {
            default_ = value;
          }
          onChanged();
        } else {
          defaultBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public Builder clearDefault() {
        if (defaultBuilder_ == null) {
          default_ = null;
          onChanged();
        } else {
          default_ = null;
          defaultBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getDefaultBuilder() {
        
        onChanged();
        return getDefaultFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getDefaultOrBuilder() {
        if (defaultBuilder_ != null) {
          return defaultBuilder_.getMessageOrBuilder();
        } else {
          return default_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : default_;
        }
      }
      /**
       * <pre>
       * An AST node representing the default value of the case expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node default = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getDefaultFieldBuilder() {
        if (defaultBuilder_ == null) {
          defaultBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getDefault(),
                  getParentForChildren(),
                  isClean());
          default_ = null;
        }
        return defaultBuilder_;
      }

      private java.lang.Object high_ = "";
      /**
       * <code>string high = 2;</code>
       * @return The high.
       */
      public java.lang.String getHigh() {
        java.lang.Object ref = high_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          high_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string high = 2;</code>
       * @return The bytes for high.
       */
      public com.google.protobuf.ByteString
          getHighBytes() {
        java.lang.Object ref = high_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          high_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string high = 2;</code>
       * @param value The high to set.
       * @return This builder for chaining.
       */
      public Builder setHigh(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        high_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string high = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearHigh() {
        
        high_ = getDefaultInstance().getHigh();
        onChanged();
        return this;
      }
      /**
       * <code>string high = 2;</code>
       * @param value The bytes for high to set.
       * @return This builder for chaining.
       */
      public Builder setHighBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        high_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object low_ = "";
      /**
       * <code>string low = 3;</code>
       * @return The low.
       */
      public java.lang.String getLow() {
        java.lang.Object ref = low_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          low_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string low = 3;</code>
       * @return The bytes for low.
       */
      public com.google.protobuf.ByteString
          getLowBytes() {
        java.lang.Object ref = low_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          low_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string low = 3;</code>
       * @param value The low to set.
       * @return This builder for chaining.
       */
      public Builder setLow(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        low_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string low = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLow() {
        
        low_ = getDefaultInstance().getLow();
        onChanged();
        return this;
      }
      /**
       * <code>string low = 3;</code>
       * @param value The bytes for low to set.
       * @return This builder for chaining.
       */
      public Builder setLowBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        low_ = value;
        onChanged();
        return this;
      }

      private int mask_ ;
      /**
       * <code>uint32 mask = 4;</code>
       * @return The mask.
       */
      @java.lang.Override
      public int getMask() {
        return mask_;
      }
      /**
       * <code>uint32 mask = 4;</code>
       * @param value The mask to set.
       * @return This builder for chaining.
       */
      public Builder setMask(int value) {
        
        mask_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 mask = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMask() {
        
        mask_ = 0;
        onChanged();
        return this;
      }

      private int shift_ ;
      /**
       * <code>uint32 shift = 5;</code>
       * @return The shift.
       */
      @java.lang.Override
      public int getShift() {
        return shift_;
      }
      /**
       * <code>uint32 shift = 5;</code>
       * @param value The shift to set.
       * @return This builder for chaining.
       */
      public Builder setShift(int value) {
        
        shift_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 shift = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearShift() {
        
        shift_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object isSkipCheck_ = "";
      /**
       * <pre>
       * A set of case ints for which equivalence checking should not be done 
       * </pre>
       *
       * <code>string isSkipCheck = 6;</code>
       * @return The isSkipCheck.
       */
      public java.lang.String getIsSkipCheck() {
        java.lang.Object ref = isSkipCheck_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          isSkipCheck_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A set of case ints for which equivalence checking should not be done 
       * </pre>
       *
       * <code>string isSkipCheck = 6;</code>
       * @return The bytes for isSkipCheck.
       */
      public com.google.protobuf.ByteString
          getIsSkipCheckBytes() {
        java.lang.Object ref = isSkipCheck_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          isSkipCheck_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A set of case ints for which equivalence checking should not be done 
       * </pre>
       *
       * <code>string isSkipCheck = 6;</code>
       * @param value The isSkipCheck to set.
       * @return This builder for chaining.
       */
      public Builder setIsSkipCheck(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        isSkipCheck_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of case ints for which equivalence checking should not be done 
       * </pre>
       *
       * <code>string isSkipCheck = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsSkipCheck() {
        
        isSkipCheck_ = getDefaultInstance().getIsSkipCheck();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of case ints for which equivalence checking should not be done 
       * </pre>
       *
       * <code>string isSkipCheck = 6;</code>
       * @param value The bytes for isSkipCheck to set.
       * @return This builder for chaining.
       */
      public Builder setIsSkipCheckBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        isSkipCheck_ = value;
        onChanged();
        return this;
      }

      private int switchType_ = 0;
      /**
       * <pre>
       * One of :sparse or :compact 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
       * @return The enum numeric value on the wire for switchType.
       */
      @java.lang.Override public int getSwitchTypeValue() {
        return switchType_;
      }
      /**
       * <pre>
       * One of :sparse or :compact 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
       * @param value The enum numeric value on the wire for switchType to set.
       * @return This builder for chaining.
       */
      public Builder setSwitchTypeValue(int value) {
        
        switchType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :sparse or :compact 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
       * @return The switchType.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode.SwitchType getSwitchType() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.CaseNode.SwitchType result = clojureRT.protobuf.Protobuf.CaseNode.SwitchType.valueOf(switchType_);
        return result == null ? clojureRT.protobuf.Protobuf.CaseNode.SwitchType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * One of :sparse or :compact 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
       * @param value The switchType to set.
       * @return This builder for chaining.
       */
      public Builder setSwitchType(clojureRT.protobuf.Protobuf.CaseNode.SwitchType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        switchType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :sparse or :compact 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.SwitchType switchType = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearSwitchType() {
        
        switchType_ = 0;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node test_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> testBuilder_;
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       * @return Whether the test field is set.
       */
      public boolean hasTest() {
        return testBuilder_ != null || test_ != null;
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       * @return The test.
       */
      public clojureRT.protobuf.Protobuf.Node getTest() {
        if (testBuilder_ == null) {
          return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        } else {
          return testBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public Builder setTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          test_ = value;
          onChanged();
        } else {
          testBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public Builder setTest(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testBuilder_ == null) {
          test_ = builderForValue.build();
          onChanged();
        } else {
          testBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public Builder mergeTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (test_ != null) {
            test_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(test_).mergeFrom(value).buildPartial();
          } else {
            test_ = value;
          }
          onChanged();
        } else {
          testBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public Builder clearTest() {
        if (testBuilder_ == null) {
          test_ = null;
          onChanged();
        } else {
          test_ = null;
          testBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTestBuilder() {
        
        onChanged();
        return getTestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
        if (testBuilder_ != null) {
          return testBuilder_.getMessageOrBuilder();
        } else {
          return test_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        }
      }
      /**
       * <pre>
       * The AST node for the expression to test against 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTestFieldBuilder() {
        if (testBuilder_ == null) {
          testBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTest(),
                  getParentForChildren(),
                  isClean());
          test_ = null;
        }
        return testBuilder_;
      }

      private int testType_ = 0;
      /**
       * <pre>
       * One of :int, :hash-equiv or :hash-identity 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
       * @return The enum numeric value on the wire for testType.
       */
      @java.lang.Override public int getTestTypeValue() {
        return testType_;
      }
      /**
       * <pre>
       * One of :int, :hash-equiv or :hash-identity 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
       * @param value The enum numeric value on the wire for testType to set.
       * @return This builder for chaining.
       */
      public Builder setTestTypeValue(int value) {
        
        testType_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :int, :hash-equiv or :hash-identity 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
       * @return The testType.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseNode.TestType getTestType() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.CaseNode.TestType result = clojureRT.protobuf.Protobuf.CaseNode.TestType.valueOf(testType_);
        return result == null ? clojureRT.protobuf.Protobuf.CaseNode.TestType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * One of :int, :hash-equiv or :hash-identity 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
       * @param value The testType to set.
       * @return This builder for chaining.
       */
      public Builder setTestType(clojureRT.protobuf.Protobuf.CaseNode.TestType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        testType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :int, :hash-equiv or :hash-identity 
       * </pre>
       *
       * <code>.clojureRT.protobuf.CaseNode.TestType testType = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTestType() {
        
        testType_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> tests_ =
        java.util.Collections.emptyList();
      private void ensureTestsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          tests_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(tests_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> testsBuilder_;

      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getTestsList() {
        if (testsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tests_);
        } else {
          return testsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public int getTestsCount() {
        if (testsBuilder_ == null) {
          return tests_.size();
        } else {
          return testsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getTests(int index) {
        if (testsBuilder_ == null) {
          return tests_.get(index);
        } else {
          return testsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder setTests(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (testsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestsIsMutable();
          tests_.set(index, value);
          onChanged();
        } else {
          testsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder setTests(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testsBuilder_ == null) {
          ensureTestsIsMutable();
          tests_.set(index, builderForValue.build());
          onChanged();
        } else {
          testsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder addTests(clojureRT.protobuf.Protobuf.Node value) {
        if (testsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestsIsMutable();
          tests_.add(value);
          onChanged();
        } else {
          testsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder addTests(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (testsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTestsIsMutable();
          tests_.add(index, value);
          onChanged();
        } else {
          testsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder addTests(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testsBuilder_ == null) {
          ensureTestsIsMutable();
          tests_.add(builderForValue.build());
          onChanged();
        } else {
          testsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder addTests(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testsBuilder_ == null) {
          ensureTestsIsMutable();
          tests_.add(index, builderForValue.build());
          onChanged();
        } else {
          testsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder addAllTests(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (testsBuilder_ == null) {
          ensureTestsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tests_);
          onChanged();
        } else {
          testsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder clearTests() {
        if (testsBuilder_ == null) {
          tests_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          testsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public Builder removeTests(int index) {
        if (testsBuilder_ == null) {
          ensureTestsIsMutable();
          tests_.remove(index);
          onChanged();
        } else {
          testsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTestsBuilder(
          int index) {
        return getTestsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestsOrBuilder(
          int index) {
        if (testsBuilder_ == null) {
          return tests_.get(index);  } else {
          return testsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getTestsOrBuilderList() {
        if (testsBuilder_ != null) {
          return testsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tests_);
        }
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addTestsBuilder() {
        return getTestsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addTestsBuilder(
          int index) {
        return getTestsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :case-test AST nodes, each node has a corresponding :case-then node in the :thens field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node tests = 10;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getTestsBuilderList() {
        return getTestsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTestsFieldBuilder() {
        if (testsBuilder_ == null) {
          testsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  tests_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          tests_ = null;
        }
        return testsBuilder_;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> thens_ =
        java.util.Collections.emptyList();
      private void ensureThensIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          thens_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(thens_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> thensBuilder_;

      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getThensList() {
        if (thensBuilder_ == null) {
          return java.util.Collections.unmodifiableList(thens_);
        } else {
          return thensBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public int getThensCount() {
        if (thensBuilder_ == null) {
          return thens_.size();
        } else {
          return thensBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getThens(int index) {
        if (thensBuilder_ == null) {
          return thens_.get(index);
        } else {
          return thensBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder setThens(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (thensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThensIsMutable();
          thens_.set(index, value);
          onChanged();
        } else {
          thensBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder setThens(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thensBuilder_ == null) {
          ensureThensIsMutable();
          thens_.set(index, builderForValue.build());
          onChanged();
        } else {
          thensBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder addThens(clojureRT.protobuf.Protobuf.Node value) {
        if (thensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThensIsMutable();
          thens_.add(value);
          onChanged();
        } else {
          thensBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder addThens(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (thensBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureThensIsMutable();
          thens_.add(index, value);
          onChanged();
        } else {
          thensBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder addThens(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thensBuilder_ == null) {
          ensureThensIsMutable();
          thens_.add(builderForValue.build());
          onChanged();
        } else {
          thensBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder addThens(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thensBuilder_ == null) {
          ensureThensIsMutable();
          thens_.add(index, builderForValue.build());
          onChanged();
        } else {
          thensBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder addAllThens(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (thensBuilder_ == null) {
          ensureThensIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, thens_);
          onChanged();
        } else {
          thensBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder clearThens() {
        if (thensBuilder_ == null) {
          thens_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          thensBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public Builder removeThens(int index) {
        if (thensBuilder_ == null) {
          ensureThensIsMutable();
          thens_.remove(index);
          onChanged();
        } else {
          thensBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getThensBuilder(
          int index) {
        return getThensFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getThensOrBuilder(
          int index) {
        if (thensBuilder_ == null) {
          return thens_.get(index);  } else {
          return thensBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getThensOrBuilderList() {
        if (thensBuilder_ != null) {
          return thensBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(thens_);
        }
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addThensBuilder() {
        return getThensFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addThensBuilder(
          int index) {
        return getThensFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :case-then AST nodes, each node has a corresponding :case-test node in the :tests field 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node thens = 11;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getThensBuilderList() {
        return getThensFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getThensFieldBuilder() {
        if (thensBuilder_ == null) {
          thensBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  thens_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          thens_ = null;
        }
        return thensBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.CaseNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.CaseNode)
    private static final clojureRT.protobuf.Protobuf.CaseNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.CaseNode();
    }

    public static clojureRT.protobuf.Protobuf.CaseNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CaseNode>
        PARSER = new com.google.protobuf.AbstractParser<CaseNode>() {
      @java.lang.Override
      public CaseNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CaseNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CaseNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CaseNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CaseTestNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.CaseTestNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 hash = 1;</code>
     * @return The hash.
     */
    int getHash();

    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return Whether the test field is set.
     */
    boolean hasTest();
    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return The test.
     */
    clojureRT.protobuf.Protobuf.Node getTest();
    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder();
  }
  /**
   * <pre>
   * Node for a test value in a case* expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.CaseTestNode}
   */
  public static final class CaseTestNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.CaseTestNode)
      CaseTestNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CaseTestNode.newBuilder() to construct.
    private CaseTestNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CaseTestNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CaseTestNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CaseTestNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hash_ = input.readUInt32();
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (test_ != null) {
                subBuilder = test_.toBuilder();
              }
              test_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(test_);
                test_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseTestNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseTestNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.CaseTestNode.class, clojureRT.protobuf.Protobuf.CaseTestNode.Builder.class);
    }

    public static final int HASH_FIELD_NUMBER = 1;
    private int hash_;
    /**
     * <code>uint32 hash = 1;</code>
     * @return The hash.
     */
    @java.lang.Override
    public int getHash() {
      return hash_;
    }

    public static final int TEST_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node test_;
    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return Whether the test field is set.
     */
    @java.lang.Override
    public boolean hasTest() {
      return test_ != null;
    }
    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return The test.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTest() {
      return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
    }
    /**
     * <pre>
     * A :const AST node representing the test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
      return getTest();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hash_ != 0) {
        output.writeUInt32(1, hash_);
      }
      if (test_ != null) {
        output.writeMessage(2, getTest());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hash_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hash_);
      }
      if (test_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTest());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.CaseTestNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.CaseTestNode other = (clojureRT.protobuf.Protobuf.CaseTestNode) obj;

      if (getHash()
          != other.getHash()) return false;
      if (hasTest() != other.hasTest()) return false;
      if (hasTest()) {
        if (!getTest()
            .equals(other.getTest())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_FIELD_NUMBER;
      hash = (53 * hash) + getHash();
      if (hasTest()) {
        hash = (37 * hash) + TEST_FIELD_NUMBER;
        hash = (53 * hash) + getTest().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseTestNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.CaseTestNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a test value in a case* expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.CaseTestNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.CaseTestNode)
        clojureRT.protobuf.Protobuf.CaseTestNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseTestNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseTestNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.CaseTestNode.class, clojureRT.protobuf.Protobuf.CaseTestNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.CaseTestNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hash_ = 0;

        if (testBuilder_ == null) {
          test_ = null;
        } else {
          test_ = null;
          testBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseTestNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseTestNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseTestNode build() {
        clojureRT.protobuf.Protobuf.CaseTestNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseTestNode buildPartial() {
        clojureRT.protobuf.Protobuf.CaseTestNode result = new clojureRT.protobuf.Protobuf.CaseTestNode(this);
        result.hash_ = hash_;
        if (testBuilder_ == null) {
          result.test_ = test_;
        } else {
          result.test_ = testBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.CaseTestNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.CaseTestNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.CaseTestNode other) {
        if (other == clojureRT.protobuf.Protobuf.CaseTestNode.getDefaultInstance()) return this;
        if (other.getHash() != 0) {
          setHash(other.getHash());
        }
        if (other.hasTest()) {
          mergeTest(other.getTest());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.CaseTestNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.CaseTestNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int hash_ ;
      /**
       * <code>uint32 hash = 1;</code>
       * @return The hash.
       */
      @java.lang.Override
      public int getHash() {
        return hash_;
      }
      /**
       * <code>uint32 hash = 1;</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(int value) {
        
        hash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        
        hash_ = 0;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node test_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> testBuilder_;
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       * @return Whether the test field is set.
       */
      public boolean hasTest() {
        return testBuilder_ != null || test_ != null;
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       * @return The test.
       */
      public clojureRT.protobuf.Protobuf.Node getTest() {
        if (testBuilder_ == null) {
          return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        } else {
          return testBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder setTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          test_ = value;
          onChanged();
        } else {
          testBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder setTest(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testBuilder_ == null) {
          test_ = builderForValue.build();
          onChanged();
        } else {
          testBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder mergeTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (test_ != null) {
            test_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(test_).mergeFrom(value).buildPartial();
          } else {
            test_ = value;
          }
          onChanged();
        } else {
          testBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder clearTest() {
        if (testBuilder_ == null) {
          test_ = null;
          onChanged();
        } else {
          test_ = null;
          testBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTestBuilder() {
        
        onChanged();
        return getTestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
        if (testBuilder_ != null) {
          return testBuilder_.getMessageOrBuilder();
        } else {
          return test_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        }
      }
      /**
       * <pre>
       * A :const AST node representing the test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTestFieldBuilder() {
        if (testBuilder_ == null) {
          testBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTest(),
                  getParentForChildren(),
                  isClean());
          test_ = null;
        }
        return testBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.CaseTestNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.CaseTestNode)
    private static final clojureRT.protobuf.Protobuf.CaseTestNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.CaseTestNode();
    }

    public static clojureRT.protobuf.Protobuf.CaseTestNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CaseTestNode>
        PARSER = new com.google.protobuf.AbstractParser<CaseTestNode>() {
      @java.lang.Override
      public CaseTestNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CaseTestNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CaseTestNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CaseTestNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseTestNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CaseThenNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.CaseThenNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>uint32 hash = 1;</code>
     * @return The hash.
     */
    int getHash();

    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     * @return Whether the then field is set.
     */
    boolean hasThen();
    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     * @return The then.
     */
    clojureRT.protobuf.Protobuf.Node getThen();
    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder();
  }
  /**
   * <pre>
   * Node for a then expression in a case* expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.CaseThenNode}
   */
  public static final class CaseThenNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.CaseThenNode)
      CaseThenNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CaseThenNode.newBuilder() to construct.
    private CaseThenNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CaseThenNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CaseThenNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CaseThenNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              hash_ = input.readUInt32();
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (then_ != null) {
                subBuilder = then_.toBuilder();
              }
              then_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(then_);
                then_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseThenNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseThenNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.CaseThenNode.class, clojureRT.protobuf.Protobuf.CaseThenNode.Builder.class);
    }

    public static final int HASH_FIELD_NUMBER = 1;
    private int hash_;
    /**
     * <code>uint32 hash = 1;</code>
     * @return The hash.
     */
    @java.lang.Override
    public int getHash() {
      return hash_;
    }

    public static final int THEN_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node then_;
    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     * @return Whether the then field is set.
     */
    @java.lang.Override
    public boolean hasThen() {
      return then_ != null;
    }
    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     * @return The then.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getThen() {
      return then_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
    }
    /**
     * <pre>
     * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder() {
      return getThen();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (hash_ != 0) {
        output.writeUInt32(1, hash_);
      }
      if (then_ != null) {
        output.writeMessage(2, getThen());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (hash_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, hash_);
      }
      if (then_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getThen());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.CaseThenNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.CaseThenNode other = (clojureRT.protobuf.Protobuf.CaseThenNode) obj;

      if (getHash()
          != other.getHash()) return false;
      if (hasThen() != other.hasThen()) return false;
      if (hasThen()) {
        if (!getThen()
            .equals(other.getThen())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + HASH_FIELD_NUMBER;
      hash = (53 * hash) + getHash();
      if (hasThen()) {
        hash = (37 * hash) + THEN_FIELD_NUMBER;
        hash = (53 * hash) + getThen().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CaseThenNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.CaseThenNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a then expression in a case* expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.CaseThenNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.CaseThenNode)
        clojureRT.protobuf.Protobuf.CaseThenNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseThenNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseThenNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.CaseThenNode.class, clojureRT.protobuf.Protobuf.CaseThenNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.CaseThenNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        hash_ = 0;

        if (thenBuilder_ == null) {
          then_ = null;
        } else {
          then_ = null;
          thenBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CaseThenNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseThenNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseThenNode build() {
        clojureRT.protobuf.Protobuf.CaseThenNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CaseThenNode buildPartial() {
        clojureRT.protobuf.Protobuf.CaseThenNode result = new clojureRT.protobuf.Protobuf.CaseThenNode(this);
        result.hash_ = hash_;
        if (thenBuilder_ == null) {
          result.then_ = then_;
        } else {
          result.then_ = thenBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.CaseThenNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.CaseThenNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.CaseThenNode other) {
        if (other == clojureRT.protobuf.Protobuf.CaseThenNode.getDefaultInstance()) return this;
        if (other.getHash() != 0) {
          setHash(other.getHash());
        }
        if (other.hasThen()) {
          mergeThen(other.getThen());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.CaseThenNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.CaseThenNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int hash_ ;
      /**
       * <code>uint32 hash = 1;</code>
       * @return The hash.
       */
      @java.lang.Override
      public int getHash() {
        return hash_;
      }
      /**
       * <code>uint32 hash = 1;</code>
       * @param value The hash to set.
       * @return This builder for chaining.
       */
      public Builder setHash(int value) {
        
        hash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>uint32 hash = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearHash() {
        
        hash_ = 0;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node then_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> thenBuilder_;
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       * @return Whether the then field is set.
       */
      public boolean hasThen() {
        return thenBuilder_ != null || then_ != null;
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       * @return The then.
       */
      public clojureRT.protobuf.Protobuf.Node getThen() {
        if (thenBuilder_ == null) {
          return then_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
        } else {
          return thenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public Builder setThen(clojureRT.protobuf.Protobuf.Node value) {
        if (thenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          then_ = value;
          onChanged();
        } else {
          thenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public Builder setThen(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thenBuilder_ == null) {
          then_ = builderForValue.build();
          onChanged();
        } else {
          thenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public Builder mergeThen(clojureRT.protobuf.Protobuf.Node value) {
        if (thenBuilder_ == null) {
          if (then_ != null) {
            then_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(then_).mergeFrom(value).buildPartial();
          } else {
            then_ = value;
          }
          onChanged();
        } else {
          thenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public Builder clearThen() {
        if (thenBuilder_ == null) {
          then_ = null;
          onChanged();
        } else {
          then_ = null;
          thenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getThenBuilder() {
        
        onChanged();
        return getThenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder() {
        if (thenBuilder_ != null) {
          return thenBuilder_.getMessageOrBuilder();
        } else {
          return then_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
        }
      }
      /**
       * <pre>
       * An AST node representing the expression the case will evaluate to when the :test expression matches this node's corresponding :case-test value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getThenFieldBuilder() {
        if (thenBuilder_ == null) {
          thenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getThen(),
                  getParentForChildren(),
                  isClean());
          then_ = null;
        }
        return thenBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.CaseThenNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.CaseThenNode)
    private static final clojureRT.protobuf.Protobuf.CaseThenNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.CaseThenNode();
    }

    public static clojureRT.protobuf.Protobuf.CaseThenNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CaseThenNode>
        PARSER = new com.google.protobuf.AbstractParser<CaseThenNode>() {
      @java.lang.Override
      public CaseThenNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CaseThenNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CaseThenNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CaseThenNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CaseThenNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CatchNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.CatchNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();

    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return The class.
     */
    clojureRT.protobuf.Protobuf.Node getClass_();
    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder();

    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     * @return Whether the local field is set.
     */
    boolean hasLocal();
    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     * @return The local.
     */
    clojureRT.protobuf.Protobuf.Node getLocal();
    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder();
  }
  /**
   * <pre>
   * Node for a catch expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.CatchNode}
   */
  public static final class CatchNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.CatchNode)
      CatchNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CatchNode.newBuilder() to construct.
    private CatchNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CatchNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CatchNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CatchNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (class__ != null) {
                subBuilder = class__.toBuilder();
              }
              class__ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(class__);
                class__ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (local_ != null) {
                subBuilder = local_.toBuilder();
              }
              local_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(local_);
                local_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CatchNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CatchNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.CatchNode.class, clojureRT.protobuf.Protobuf.CatchNode.Builder.class);
    }

    public static final int BODY_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node class__;
    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return Whether the class field is set.
     */
    @java.lang.Override
    public boolean hasClass_() {
      return class__ != null;
    }
    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getClass_() {
      return class__ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
    }
    /**
     * <pre>
     * A :const AST node with :type :class representing the type of exception to catch 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder() {
      return getClass_();
    }

    public static final int LOCAL_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node local_;
    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     * @return Whether the local field is set.
     */
    @java.lang.Override
    public boolean hasLocal() {
      return local_ != null;
    }
    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     * @return The local.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getLocal() {
      return local_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
    }
    /**
     * <pre>
     * The :binding AST node for the caught exception 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node local = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder() {
      return getLocal();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (body_ != null) {
        output.writeMessage(1, getBody());
      }
      if (class__ != null) {
        output.writeMessage(2, getClass_());
      }
      if (local_ != null) {
        output.writeMessage(3, getLocal());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBody());
      }
      if (class__ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getClass_());
      }
      if (local_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getLocal());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.CatchNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.CatchNode other = (clojureRT.protobuf.Protobuf.CatchNode) obj;

      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (hasClass_() != other.hasClass_()) return false;
      if (hasClass_()) {
        if (!getClass_()
            .equals(other.getClass_())) return false;
      }
      if (hasLocal() != other.hasLocal()) return false;
      if (hasLocal()) {
        if (!getLocal()
            .equals(other.getLocal())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      if (hasClass_()) {
        hash = (37 * hash) + CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getClass_().hashCode();
      }
      if (hasLocal()) {
        hash = (37 * hash) + LOCAL_FIELD_NUMBER;
        hash = (53 * hash) + getLocal().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.CatchNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.CatchNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a catch expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.CatchNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.CatchNode)
        clojureRT.protobuf.Protobuf.CatchNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CatchNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CatchNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.CatchNode.class, clojureRT.protobuf.Protobuf.CatchNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.CatchNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        if (class_Builder_ == null) {
          class__ = null;
        } else {
          class__ = null;
          class_Builder_ = null;
        }
        if (localBuilder_ == null) {
          local_ = null;
        } else {
          local_ = null;
          localBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_CatchNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CatchNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CatchNode build() {
        clojureRT.protobuf.Protobuf.CatchNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.CatchNode buildPartial() {
        clojureRT.protobuf.Protobuf.CatchNode result = new clojureRT.protobuf.Protobuf.CatchNode(this);
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        if (class_Builder_ == null) {
          result.class__ = class__;
        } else {
          result.class__ = class_Builder_.build();
        }
        if (localBuilder_ == null) {
          result.local_ = local_;
        } else {
          result.local_ = localBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.CatchNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.CatchNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.CatchNode other) {
        if (other == clojureRT.protobuf.Protobuf.CatchNode.getDefaultInstance()) return this;
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (other.hasClass_()) {
          mergeClass_(other.getClass_());
        }
        if (other.hasLocal()) {
          mergeLocal(other.getLocal());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.CatchNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.CatchNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`)  representing the body of the catch clause 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node class__;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> class_Builder_;
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       * @return Whether the class field is set.
       */
      public boolean hasClass_() {
        return class_Builder_ != null || class__ != null;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       * @return The class.
       */
      public clojureRT.protobuf.Protobuf.Node getClass_() {
        if (class_Builder_ == null) {
          return class__ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
        } else {
          return class_Builder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder setClass_(clojureRT.protobuf.Protobuf.Node value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          class__ = value;
          onChanged();
        } else {
          class_Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder setClass_(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (class_Builder_ == null) {
          class__ = builderForValue.build();
          onChanged();
        } else {
          class_Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder mergeClass_(clojureRT.protobuf.Protobuf.Node value) {
        if (class_Builder_ == null) {
          if (class__ != null) {
            class__ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(class__).mergeFrom(value).buildPartial();
          } else {
            class__ = value;
          }
          onChanged();
        } else {
          class_Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder clearClass_() {
        if (class_Builder_ == null) {
          class__ = null;
          onChanged();
        } else {
          class__ = null;
          class_Builder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getClass_Builder() {
        
        onChanged();
        return getClass_FieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder() {
        if (class_Builder_ != null) {
          return class_Builder_.getMessageOrBuilder();
        } else {
          return class__ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
        }
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the type of exception to catch 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getClass_FieldBuilder() {
        if (class_Builder_ == null) {
          class_Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getClass_(),
                  getParentForChildren(),
                  isClean());
          class__ = null;
        }
        return class_Builder_;
      }

      private clojureRT.protobuf.Protobuf.Node local_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> localBuilder_;
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       * @return Whether the local field is set.
       */
      public boolean hasLocal() {
        return localBuilder_ != null || local_ != null;
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       * @return The local.
       */
      public clojureRT.protobuf.Protobuf.Node getLocal() {
        if (localBuilder_ == null) {
          return local_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
        } else {
          return localBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public Builder setLocal(clojureRT.protobuf.Protobuf.Node value) {
        if (localBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          local_ = value;
          onChanged();
        } else {
          localBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public Builder setLocal(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (localBuilder_ == null) {
          local_ = builderForValue.build();
          onChanged();
        } else {
          localBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public Builder mergeLocal(clojureRT.protobuf.Protobuf.Node value) {
        if (localBuilder_ == null) {
          if (local_ != null) {
            local_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(local_).mergeFrom(value).buildPartial();
          } else {
            local_ = value;
          }
          onChanged();
        } else {
          localBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public Builder clearLocal() {
        if (localBuilder_ == null) {
          local_ = null;
          onChanged();
        } else {
          local_ = null;
          localBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getLocalBuilder() {
        
        onChanged();
        return getLocalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder() {
        if (localBuilder_ != null) {
          return localBuilder_.getMessageOrBuilder();
        } else {
          return local_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
        }
      }
      /**
       * <pre>
       * The :binding AST node for the caught exception 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node local = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getLocalFieldBuilder() {
        if (localBuilder_ == null) {
          localBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getLocal(),
                  getParentForChildren(),
                  isClean());
          local_ = null;
        }
        return localBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.CatchNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.CatchNode)
    private static final clojureRT.protobuf.Protobuf.CatchNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.CatchNode();
    }

    public static clojureRT.protobuf.Protobuf.CatchNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CatchNode>
        PARSER = new com.google.protobuf.AbstractParser<CatchNode>() {
      @java.lang.Override
      public CatchNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CatchNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CatchNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CatchNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.CatchNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ConstNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.ConstNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isLiteral = 1;</code>
     * @return The isLiteral.
     */
    boolean getIsLiteral();

    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     * @return Whether the meta field is set.
     */
    boolean hasMeta();
    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     * @return The meta.
     */
    clojureRT.protobuf.Protobuf.Node getMeta();
    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder();

    /**
     * <pre>
     * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
     * </pre>
     *
     * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
     * </pre>
     *
     * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
     * @return The type.
     */
    clojureRT.protobuf.Protobuf.ConstNode.ConstType getType();

    /**
     * <pre>
     * The value of the constant node 
     * </pre>
     *
     * <code>string val = 4;</code>
     * @return The val.
     */
    java.lang.String getVal();
    /**
     * <pre>
     * The value of the constant node 
     * </pre>
     *
     * <code>string val = 4;</code>
     * @return The bytes for val.
     */
    com.google.protobuf.ByteString
        getValBytes();
  }
  /**
   * <pre>
   * Node for a constant literal or a quoted collection literal 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.ConstNode}
   */
  public static final class ConstNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.ConstNode)
      ConstNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConstNode.newBuilder() to construct.
    private ConstNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConstNode() {
      type_ = 0;
      val_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConstNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ConstNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              isLiteral_ = input.readBool();
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = meta_.toBuilder();
              }
              meta_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(meta_);
                meta_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              val_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ConstNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ConstNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.ConstNode.class, clojureRT.protobuf.Protobuf.ConstNode.Builder.class);
    }

    /**
     * Protobuf enum {@code clojureRT.protobuf.ConstNode.ConstType}
     */
    public enum ConstType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>constTypeNil = 0;</code>
       */
      constTypeNil(0),
      /**
       * <code>constTypeBool = 1;</code>
       */
      constTypeBool(1),
      /**
       * <code>constTypeKeyword = 2;</code>
       */
      constTypeKeyword(2),
      /**
       * <code>constTypeSymbol = 3;</code>
       */
      constTypeSymbol(3),
      /**
       * <code>constTypeString = 4;</code>
       */
      constTypeString(4),
      /**
       * <code>constTypeNumber = 5;</code>
       */
      constTypeNumber(5),
      /**
       * <code>constTypeType = 6;</code>
       */
      constTypeType(6),
      /**
       * <code>constTypeRecord = 7;</code>
       */
      constTypeRecord(7),
      /**
       * <code>constTypeMap = 8;</code>
       */
      constTypeMap(8),
      /**
       * <code>constTypeVector = 9;</code>
       */
      constTypeVector(9),
      /**
       * <code>constTypeSet = 10;</code>
       */
      constTypeSet(10),
      /**
       * <code>constTypeSeq = 11;</code>
       */
      constTypeSeq(11),
      /**
       * <code>constTypeChar = 12;</code>
       */
      constTypeChar(12),
      /**
       * <code>constTypeRegex = 13;</code>
       */
      constTypeRegex(13),
      /**
       * <code>constTypeClass = 14;</code>
       */
      constTypeClass(14),
      /**
       * <code>constTypeVar = 15;</code>
       */
      constTypeVar(15),
      /**
       * <code>constTypeUnknown = 16;</code>
       */
      constTypeUnknown(16),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>constTypeNil = 0;</code>
       */
      public static final int constTypeNil_VALUE = 0;
      /**
       * <code>constTypeBool = 1;</code>
       */
      public static final int constTypeBool_VALUE = 1;
      /**
       * <code>constTypeKeyword = 2;</code>
       */
      public static final int constTypeKeyword_VALUE = 2;
      /**
       * <code>constTypeSymbol = 3;</code>
       */
      public static final int constTypeSymbol_VALUE = 3;
      /**
       * <code>constTypeString = 4;</code>
       */
      public static final int constTypeString_VALUE = 4;
      /**
       * <code>constTypeNumber = 5;</code>
       */
      public static final int constTypeNumber_VALUE = 5;
      /**
       * <code>constTypeType = 6;</code>
       */
      public static final int constTypeType_VALUE = 6;
      /**
       * <code>constTypeRecord = 7;</code>
       */
      public static final int constTypeRecord_VALUE = 7;
      /**
       * <code>constTypeMap = 8;</code>
       */
      public static final int constTypeMap_VALUE = 8;
      /**
       * <code>constTypeVector = 9;</code>
       */
      public static final int constTypeVector_VALUE = 9;
      /**
       * <code>constTypeSet = 10;</code>
       */
      public static final int constTypeSet_VALUE = 10;
      /**
       * <code>constTypeSeq = 11;</code>
       */
      public static final int constTypeSeq_VALUE = 11;
      /**
       * <code>constTypeChar = 12;</code>
       */
      public static final int constTypeChar_VALUE = 12;
      /**
       * <code>constTypeRegex = 13;</code>
       */
      public static final int constTypeRegex_VALUE = 13;
      /**
       * <code>constTypeClass = 14;</code>
       */
      public static final int constTypeClass_VALUE = 14;
      /**
       * <code>constTypeVar = 15;</code>
       */
      public static final int constTypeVar_VALUE = 15;
      /**
       * <code>constTypeUnknown = 16;</code>
       */
      public static final int constTypeUnknown_VALUE = 16;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ConstType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static ConstType forNumber(int value) {
        switch (value) {
          case 0: return constTypeNil;
          case 1: return constTypeBool;
          case 2: return constTypeKeyword;
          case 3: return constTypeSymbol;
          case 4: return constTypeString;
          case 5: return constTypeNumber;
          case 6: return constTypeType;
          case 7: return constTypeRecord;
          case 8: return constTypeMap;
          case 9: return constTypeVector;
          case 10: return constTypeSet;
          case 11: return constTypeSeq;
          case 12: return constTypeChar;
          case 13: return constTypeRegex;
          case 14: return constTypeClass;
          case 15: return constTypeVar;
          case 16: return constTypeUnknown;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<ConstType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          ConstType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<ConstType>() {
              public ConstType findValueByNumber(int number) {
                return ConstType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.ConstNode.getDescriptor().getEnumTypes().get(0);
      }

      private static final ConstType[] VALUES = values();

      public static ConstType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private ConstType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:clojureRT.protobuf.ConstNode.ConstType)
    }

    private int bitField0_;
    public static final int ISLITERAL_FIELD_NUMBER = 1;
    private boolean isLiteral_;
    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isLiteral = 1;</code>
     * @return The isLiteral.
     */
    @java.lang.Override
    public boolean getIsLiteral() {
      return isLiteral_;
    }

    public static final int META_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node meta_;
    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     * @return Whether the meta field is set.
     */
    @java.lang.Override
    public boolean hasMeta() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     * @return The meta.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMeta() {
      return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
    }
    /**
     * <pre>
     * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
      return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <pre>
     * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
     * </pre>
     *
     * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
     * </pre>
     *
     * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
     * @return The type.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.ConstNode.ConstType getType() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.ConstNode.ConstType result = clojureRT.protobuf.Protobuf.ConstNode.ConstType.valueOf(type_);
      return result == null ? clojureRT.protobuf.Protobuf.ConstNode.ConstType.UNRECOGNIZED : result;
    }

    public static final int VAL_FIELD_NUMBER = 4;
    private volatile java.lang.Object val_;
    /**
     * <pre>
     * The value of the constant node 
     * </pre>
     *
     * <code>string val = 4;</code>
     * @return The val.
     */
    @java.lang.Override
    public java.lang.String getVal() {
      java.lang.Object ref = val_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        val_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The value of the constant node 
     * </pre>
     *
     * <code>string val = 4;</code>
     * @return The bytes for val.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getValBytes() {
      java.lang.Object ref = val_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        val_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isLiteral_ != false) {
        output.writeBool(1, isLiteral_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getMeta());
      }
      if (type_ != clojureRT.protobuf.Protobuf.ConstNode.ConstType.constTypeNil.getNumber()) {
        output.writeEnum(3, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(val_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, val_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isLiteral_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isLiteral_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMeta());
      }
      if (type_ != clojureRT.protobuf.Protobuf.ConstNode.ConstType.constTypeNil.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(val_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, val_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.ConstNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.ConstNode other = (clojureRT.protobuf.Protobuf.ConstNode) obj;

      if (getIsLiteral()
          != other.getIsLiteral()) return false;
      if (hasMeta() != other.hasMeta()) return false;
      if (hasMeta()) {
        if (!getMeta()
            .equals(other.getMeta())) return false;
      }
      if (type_ != other.type_) return false;
      if (!getVal()
          .equals(other.getVal())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ISLITERAL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsLiteral());
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta().hashCode();
      }
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + VAL_FIELD_NUMBER;
      hash = (53 * hash) + getVal().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ConstNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.ConstNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a constant literal or a quoted collection literal 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.ConstNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.ConstNode)
        clojureRT.protobuf.Protobuf.ConstNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ConstNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ConstNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.ConstNode.class, clojureRT.protobuf.Protobuf.ConstNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.ConstNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMetaFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isLiteral_ = false;

        if (metaBuilder_ == null) {
          meta_ = null;
        } else {
          metaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;

        val_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ConstNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNode build() {
        clojureRT.protobuf.Protobuf.ConstNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNode buildPartial() {
        clojureRT.protobuf.Protobuf.ConstNode result = new clojureRT.protobuf.Protobuf.ConstNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.isLiteral_ = isLiteral_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          if (metaBuilder_ == null) {
            result.meta_ = meta_;
          } else {
            result.meta_ = metaBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        result.type_ = type_;
        result.val_ = val_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.ConstNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.ConstNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.ConstNode other) {
        if (other == clojureRT.protobuf.Protobuf.ConstNode.getDefaultInstance()) return this;
        if (other.getIsLiteral() != false) {
          setIsLiteral(other.getIsLiteral());
        }
        if (other.hasMeta()) {
          mergeMeta(other.getMeta());
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getVal().isEmpty()) {
          val_ = other.val_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.ConstNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.ConstNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isLiteral_ ;
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 1;</code>
       * @return The isLiteral.
       */
      @java.lang.Override
      public boolean getIsLiteral() {
        return isLiteral_;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 1;</code>
       * @param value The isLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setIsLiteral(boolean value) {
        
        isLiteral_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsLiteral() {
        
        isLiteral_ = false;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node meta_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> metaBuilder_;
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       * @return Whether the meta field is set.
       */
      public boolean hasMeta() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       * @return The meta.
       */
      public clojureRT.protobuf.Protobuf.Node getMeta() {
        if (metaBuilder_ == null) {
          return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        } else {
          return metaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder setMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          meta_ = value;
          onChanged();
        } else {
          metaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder setMeta(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (metaBuilder_ == null) {
          meta_ = builderForValue.build();
          onChanged();
        } else {
          metaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder mergeMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
              meta_ != null &&
              meta_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            meta_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(meta_).mergeFrom(value).buildPartial();
          } else {
            meta_ = value;
          }
          onChanged();
        } else {
          metaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder clearMeta() {
        if (metaBuilder_ == null) {
          meta_ = null;
          onChanged();
        } else {
          metaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMetaBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getMetaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
        if (metaBuilder_ != null) {
          return metaBuilder_.getMessageOrBuilder();
        } else {
          return meta_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata of the constant value, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMetaFieldBuilder() {
        if (metaBuilder_ == null) {
          metaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getMeta(),
                  getParentForChildren(),
                  isClean());
          meta_ = null;
        }
        return metaBuilder_;
      }

      private int type_ = 0;
      /**
       * <pre>
       * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
       * </pre>
       *
       * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
       * </pre>
       *
       * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
       * </pre>
       *
       * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
       * @return The type.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ConstNode.ConstType getType() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.ConstNode.ConstType result = clojureRT.protobuf.Protobuf.ConstNode.ConstType.valueOf(type_);
        return result == null ? clojureRT.protobuf.Protobuf.ConstNode.ConstType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
       * </pre>
       *
       * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(clojureRT.protobuf.Protobuf.ConstNode.ConstType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * one of :nil, :bool, :keyword, :symbol, :string, :number, :type, :record, :map, :vector, :set, :seq, :char, :regex, :class, :var, or :unknown 
       * </pre>
       *
       * <code>.clojureRT.protobuf.ConstNode.ConstType type = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object val_ = "";
      /**
       * <pre>
       * The value of the constant node 
       * </pre>
       *
       * <code>string val = 4;</code>
       * @return The val.
       */
      public java.lang.String getVal() {
        java.lang.Object ref = val_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          val_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The value of the constant node 
       * </pre>
       *
       * <code>string val = 4;</code>
       * @return The bytes for val.
       */
      public com.google.protobuf.ByteString
          getValBytes() {
        java.lang.Object ref = val_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          val_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The value of the constant node 
       * </pre>
       *
       * <code>string val = 4;</code>
       * @param value The val to set.
       * @return This builder for chaining.
       */
      public Builder setVal(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        val_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value of the constant node 
       * </pre>
       *
       * <code>string val = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearVal() {
        
        val_ = getDefaultInstance().getVal();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The value of the constant node 
       * </pre>
       *
       * <code>string val = 4;</code>
       * @param value The bytes for val to set.
       * @return This builder for chaining.
       */
      public Builder setValBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        val_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.ConstNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.ConstNode)
    private static final clojureRT.protobuf.Protobuf.ConstNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.ConstNode();
    }

    public static clojureRT.protobuf.Protobuf.ConstNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConstNode>
        PARSER = new com.google.protobuf.AbstractParser<ConstNode>() {
      @java.lang.Override
      public ConstNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ConstNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ConstNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConstNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ConstNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DefNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.DefNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return Whether the doc field is set.
     */
    boolean hasDoc();
    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return The doc.
     */
    java.lang.String getDoc();
    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return The bytes for doc.
     */
    com.google.protobuf.ByteString
        getDocBytes();

    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return Whether the init field is set.
     */
    boolean hasInit();
    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return The init.
     */
    clojureRT.protobuf.Protobuf.Node getInit();
    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder();

    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     * @return Whether the meta field is set.
     */
    boolean hasMeta();
    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     * @return The meta.
     */
    clojureRT.protobuf.Protobuf.Node getMeta();
    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder();

    /**
     * <pre>
     * The var symbol to define in the current namespace 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The var symbol to define in the current namespace 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
     * </pre>
     *
     * <code>string var = 5;</code>
     * @return The var.
     */
    java.lang.String getVar();
    /**
     * <pre>
     * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
     * </pre>
     *
     * <code>string var = 5;</code>
     * @return The bytes for var.
     */
    com.google.protobuf.ByteString
        getVarBytes();
  }
  /**
   * <pre>
   * Node for a def special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.DefNode}
   */
  public static final class DefNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.DefNode)
      DefNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DefNode.newBuilder() to construct.
    private DefNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DefNode() {
      doc_ = "";
      name_ = "";
      var_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DefNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DefNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              doc_ = s;
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) != 0)) {
                subBuilder = init_.toBuilder();
              }
              init_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(init_);
                init_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) != 0)) {
                subBuilder = meta_.toBuilder();
              }
              meta_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(meta_);
                meta_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              var_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DefNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DefNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.DefNode.class, clojureRT.protobuf.Protobuf.DefNode.Builder.class);
    }

    private int bitField0_;
    public static final int DOC_FIELD_NUMBER = 1;
    private volatile java.lang.Object doc_;
    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return Whether the doc field is set.
     */
    @java.lang.Override
    public boolean hasDoc() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return The doc.
     */
    @java.lang.Override
    public java.lang.String getDoc() {
      java.lang.Object ref = doc_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        doc_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The docstring for this var 
     * </pre>
     *
     * <code>optional string doc = 1;</code>
     * @return The bytes for doc.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDocBytes() {
      java.lang.Object ref = doc_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        doc_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INIT_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node init_;
    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return Whether the init field is set.
     */
    @java.lang.Override
    public boolean hasInit() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     * @return The init.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getInit() {
      return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
    }
    /**
     * <pre>
     * An AST node representing the initial value of the var 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node init = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder() {
      return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
    }

    public static final int META_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node meta_;
    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     * @return Whether the meta field is set.
     */
    @java.lang.Override
    public boolean hasMeta() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     * @return The meta.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMeta() {
      return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
    }
    /**
     * <pre>
     * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
      return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
    }

    public static final int NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The var symbol to define in the current namespace 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The var symbol to define in the current namespace 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VAR_FIELD_NUMBER = 5;
    private volatile java.lang.Object var_;
    /**
     * <pre>
     * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
     * </pre>
     *
     * <code>string var = 5;</code>
     * @return The var.
     */
    @java.lang.Override
    public java.lang.String getVar() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        var_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
     * </pre>
     *
     * <code>string var = 5;</code>
     * @return The bytes for var.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVarBytes() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        var_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, doc_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getInit());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getMeta());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, var_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, doc_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getInit());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getMeta());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, name_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, var_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.DefNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.DefNode other = (clojureRT.protobuf.Protobuf.DefNode) obj;

      if (hasDoc() != other.hasDoc()) return false;
      if (hasDoc()) {
        if (!getDoc()
            .equals(other.getDoc())) return false;
      }
      if (hasInit() != other.hasInit()) return false;
      if (hasInit()) {
        if (!getInit()
            .equals(other.getInit())) return false;
      }
      if (hasMeta() != other.hasMeta()) return false;
      if (hasMeta()) {
        if (!getMeta()
            .equals(other.getMeta())) return false;
      }
      if (!getName()
          .equals(other.getName())) return false;
      if (!getVar()
          .equals(other.getVar())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasDoc()) {
        hash = (37 * hash) + DOC_FIELD_NUMBER;
        hash = (53 * hash) + getDoc().hashCode();
      }
      if (hasInit()) {
        hash = (37 * hash) + INIT_FIELD_NUMBER;
        hash = (53 * hash) + getInit().hashCode();
      }
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + VAR_FIELD_NUMBER;
      hash = (53 * hash) + getVar().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DefNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.DefNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a def special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.DefNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.DefNode)
        clojureRT.protobuf.Protobuf.DefNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DefNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DefNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.DefNode.class, clojureRT.protobuf.Protobuf.DefNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.DefNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getInitFieldBuilder();
          getMetaFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        doc_ = "";
        bitField0_ = (bitField0_ & ~0x00000001);
        if (initBuilder_ == null) {
          init_ = null;
        } else {
          initBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (metaBuilder_ == null) {
          meta_ = null;
        } else {
          metaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        name_ = "";

        var_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DefNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DefNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DefNode build() {
        clojureRT.protobuf.Protobuf.DefNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DefNode buildPartial() {
        clojureRT.protobuf.Protobuf.DefNode result = new clojureRT.protobuf.Protobuf.DefNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.doc_ = doc_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (initBuilder_ == null) {
            result.init_ = init_;
          } else {
            result.init_ = initBuilder_.build();
          }
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          if (metaBuilder_ == null) {
            result.meta_ = meta_;
          } else {
            result.meta_ = metaBuilder_.build();
          }
          to_bitField0_ |= 0x00000004;
        }
        result.name_ = name_;
        result.var_ = var_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.DefNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.DefNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.DefNode other) {
        if (other == clojureRT.protobuf.Protobuf.DefNode.getDefaultInstance()) return this;
        if (other.hasDoc()) {
          bitField0_ |= 0x00000001;
          doc_ = other.doc_;
          onChanged();
        }
        if (other.hasInit()) {
          mergeInit(other.getInit());
        }
        if (other.hasMeta()) {
          mergeMeta(other.getMeta());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (!other.getVar().isEmpty()) {
          var_ = other.var_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.DefNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.DefNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object doc_ = "";
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @return Whether the doc field is set.
       */
      public boolean hasDoc() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @return The doc.
       */
      public java.lang.String getDoc() {
        java.lang.Object ref = doc_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          doc_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @return The bytes for doc.
       */
      public com.google.protobuf.ByteString
          getDocBytes() {
        java.lang.Object ref = doc_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          doc_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @param value The doc to set.
       * @return This builder for chaining.
       */
      public Builder setDoc(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        doc_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearDoc() {
        bitField0_ = (bitField0_ & ~0x00000001);
        doc_ = getDefaultInstance().getDoc();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The docstring for this var 
       * </pre>
       *
       * <code>optional string doc = 1;</code>
       * @param value The bytes for doc to set.
       * @return This builder for chaining.
       */
      public Builder setDocBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000001;
        doc_ = value;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node init_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> initBuilder_;
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       * @return Whether the init field is set.
       */
      public boolean hasInit() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       * @return The init.
       */
      public clojureRT.protobuf.Protobuf.Node getInit() {
        if (initBuilder_ == null) {
          return init_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
        } else {
          return initBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder setInit(clojureRT.protobuf.Protobuf.Node value) {
        if (initBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          init_ = value;
          onChanged();
        } else {
          initBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder setInit(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (initBuilder_ == null) {
          init_ = builderForValue.build();
          onChanged();
        } else {
          initBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder mergeInit(clojureRT.protobuf.Protobuf.Node value) {
        if (initBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              init_ != null &&
              init_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            init_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(init_).mergeFrom(value).buildPartial();
          } else {
            init_ = value;
          }
          onChanged();
        } else {
          initBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public Builder clearInit() {
        if (initBuilder_ == null) {
          init_ = null;
          onChanged();
        } else {
          initBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getInitBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInitFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getInitOrBuilder() {
        if (initBuilder_ != null) {
          return initBuilder_.getMessageOrBuilder();
        } else {
          return init_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : init_;
        }
      }
      /**
       * <pre>
       * An AST node representing the initial value of the var 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node init = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getInitFieldBuilder() {
        if (initBuilder_ == null) {
          initBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getInit(),
                  getParentForChildren(),
                  isClean());
          init_ = null;
        }
        return initBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node meta_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> metaBuilder_;
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       * @return Whether the meta field is set.
       */
      public boolean hasMeta() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       * @return The meta.
       */
      public clojureRT.protobuf.Protobuf.Node getMeta() {
        if (metaBuilder_ == null) {
          return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        } else {
          return metaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public Builder setMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          meta_ = value;
          onChanged();
        } else {
          metaBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public Builder setMeta(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (metaBuilder_ == null) {
          meta_ = builderForValue.build();
          onChanged();
        } else {
          metaBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public Builder mergeMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
              meta_ != null &&
              meta_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            meta_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(meta_).mergeFrom(value).buildPartial();
          } else {
            meta_ = value;
          }
          onChanged();
        } else {
          metaBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public Builder clearMeta() {
        if (metaBuilder_ == null) {
          meta_ = null;
          onChanged();
        } else {
          metaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMetaBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMetaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
        if (metaBuilder_ != null) {
          return metaBuilder_.getMessageOrBuilder();
        } else {
          return meta_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata attached to :name, if present. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node meta = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMetaFieldBuilder() {
        if (metaBuilder_ == null) {
          metaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getMeta(),
                  getParentForChildren(),
                  isClean());
          meta_ = null;
        }
        return metaBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The var symbol to define in the current namespace 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The var symbol to define in the current namespace 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The var symbol to define in the current namespace 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The var symbol to define in the current namespace 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The var symbol to define in the current namespace 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object var_ = "";
      /**
       * <pre>
       * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
       * </pre>
       *
       * <code>string var = 5;</code>
       * @return The var.
       */
      public java.lang.String getVar() {
        java.lang.Object ref = var_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          var_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
       * </pre>
       *
       * <code>string var = 5;</code>
       * @return The bytes for var.
       */
      public com.google.protobuf.ByteString
          getVarBytes() {
        java.lang.Object ref = var_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          var_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
       * </pre>
       *
       * <code>string var = 5;</code>
       * @param value The var to set.
       * @return This builder for chaining.
       */
      public Builder setVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        var_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
       * </pre>
       *
       * <code>string var = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearVar() {
        
        var_ = getDefaultInstance().getVar();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object created (or found, if it already existed) named by the symbol :name in the current namespace 
       * </pre>
       *
       * <code>string var = 5;</code>
       * @param value The bytes for var to set.
       * @return This builder for chaining.
       */
      public Builder setVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        var_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.DefNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.DefNode)
    private static final clojureRT.protobuf.Protobuf.DefNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.DefNode();
    }

    public static clojureRT.protobuf.Protobuf.DefNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DefNode>
        PARSER = new com.google.protobuf.AbstractParser<DefNode>() {
      @java.lang.Override
      public DefNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DefNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DefNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DefNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DefNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DeftypeNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.DeftypeNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The className.
     */
    java.lang.String getClassName();
    /**
     * <pre>
     * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The bytes for className.
     */
    com.google.protobuf.ByteString
        getClassNameBytes();

    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getFieldsList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    clojureRT.protobuf.Protobuf.Node getFields(int index);
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    int getFieldsCount();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getFieldsOrBuilderList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getFieldsOrBuilder(
        int index);

    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @return A list containing the interfaces.
     */
    java.util.List<java.lang.String>
        getInterfacesList();
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @return The count of interfaces.
     */
    int getInterfacesCount();
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @param index The index of the element to return.
     * @return The interfaces at the given index.
     */
    java.lang.String getInterfaces(int index);
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the interfaces at the given index.
     */
    com.google.protobuf.ByteString
        getInterfacesBytes(int index);

    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getMethodsList();
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    clojureRT.protobuf.Protobuf.Node getMethods(int index);
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    int getMethodsCount();
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList();
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index);

    /**
     * <pre>
     * The symbol name of the deftype 
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The symbol name of the deftype 
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();
  }
  /**
   * <pre>
   * Node for a deftype* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.DeftypeNode}
   */
  public static final class DeftypeNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.DeftypeNode)
      DeftypeNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DeftypeNode.newBuilder() to construct.
    private DeftypeNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DeftypeNode() {
      className_ = "";
      fields_ = java.util.Collections.emptyList();
      interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      methods_ = java.util.Collections.emptyList();
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DeftypeNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DeftypeNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              className_ = s;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                fields_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              fields_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                interfaces_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              interfaces_.add(s);
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000004;
              }
              methods_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          fields_ = java.util.Collections.unmodifiableList(fields_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          interfaces_ = interfaces_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          methods_ = java.util.Collections.unmodifiableList(methods_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DeftypeNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DeftypeNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.DeftypeNode.class, clojureRT.protobuf.Protobuf.DeftypeNode.Builder.class);
    }

    public static final int CLASSNAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object className_;
    /**
     * <pre>
     * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The className.
     */
    @java.lang.Override
    public java.lang.String getClassName() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        className_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The bytes for className.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClassNameBytes() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        className_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIELDS_FIELD_NUMBER = 2;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> fields_;
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getFieldsList() {
      return fields_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getFieldsOrBuilderList() {
      return fields_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    @java.lang.Override
    public int getFieldsCount() {
      return fields_.size();
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getFields(int index) {
      return fields_.get(index);
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :field representing the deftype fields 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getFieldsOrBuilder(
        int index) {
      return fields_.get(index);
    }

    public static final int INTERFACES_FIELD_NUMBER = 3;
    private com.google.protobuf.LazyStringList interfaces_;
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @return A list containing the interfaces.
     */
    public com.google.protobuf.ProtocolStringList
        getInterfacesList() {
      return interfaces_;
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @return The count of interfaces.
     */
    public int getInterfacesCount() {
      return interfaces_.size();
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @param index The index of the element to return.
     * @return The interfaces at the given index.
     */
    public java.lang.String getInterfaces(int index) {
      return interfaces_.get(index);
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the type 
     * </pre>
     *
     * <code>repeated string interfaces = 3;</code>
     * @param index The index of the value to return.
     * @return The bytes of the interfaces at the given index.
     */
    public com.google.protobuf.ByteString
        getInterfacesBytes(int index) {
      return interfaces_.getByteString(index);
    }

    public static final int METHODS_FIELD_NUMBER = 4;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_;
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    @java.lang.Override
    public int getMethodsCount() {
      return methods_.size();
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
      return methods_.get(index);
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the deftype methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index) {
      return methods_.get(index);
    }

    public static final int NAME_FIELD_NUMBER = 5;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The symbol name of the deftype 
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The symbol name of the deftype 
     * </pre>
     *
     * <code>string name = 5;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, className_);
      }
      for (int i = 0; i < fields_.size(); i++) {
        output.writeMessage(2, fields_.get(i));
      }
      for (int i = 0; i < interfaces_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, interfaces_.getRaw(i));
      }
      for (int i = 0; i < methods_.size(); i++) {
        output.writeMessage(4, methods_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, name_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, className_);
      }
      for (int i = 0; i < fields_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, fields_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < interfaces_.size(); i++) {
          dataSize += computeStringSizeNoTag(interfaces_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInterfacesList().size();
      }
      for (int i = 0; i < methods_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, methods_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, name_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.DeftypeNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.DeftypeNode other = (clojureRT.protobuf.Protobuf.DeftypeNode) obj;

      if (!getClassName()
          .equals(other.getClassName())) return false;
      if (!getFieldsList()
          .equals(other.getFieldsList())) return false;
      if (!getInterfacesList()
          .equals(other.getInterfacesList())) return false;
      if (!getMethodsList()
          .equals(other.getMethodsList())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLASSNAME_FIELD_NUMBER;
      hash = (53 * hash) + getClassName().hashCode();
      if (getFieldsCount() > 0) {
        hash = (37 * hash) + FIELDS_FIELD_NUMBER;
        hash = (53 * hash) + getFieldsList().hashCode();
      }
      if (getInterfacesCount() > 0) {
        hash = (37 * hash) + INTERFACES_FIELD_NUMBER;
        hash = (53 * hash) + getInterfacesList().hashCode();
      }
      if (getMethodsCount() > 0) {
        hash = (37 * hash) + METHODS_FIELD_NUMBER;
        hash = (53 * hash) + getMethodsList().hashCode();
      }
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DeftypeNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.DeftypeNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a deftype* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.DeftypeNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.DeftypeNode)
        clojureRT.protobuf.Protobuf.DeftypeNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DeftypeNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DeftypeNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.DeftypeNode.class, clojureRT.protobuf.Protobuf.DeftypeNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.DeftypeNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getFieldsFieldBuilder();
          getMethodsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        className_ = "";

        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          fieldsBuilder_.clear();
        }
        interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          methodsBuilder_.clear();
        }
        name_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DeftypeNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DeftypeNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DeftypeNode build() {
        clojureRT.protobuf.Protobuf.DeftypeNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DeftypeNode buildPartial() {
        clojureRT.protobuf.Protobuf.DeftypeNode result = new clojureRT.protobuf.Protobuf.DeftypeNode(this);
        int from_bitField0_ = bitField0_;
        result.className_ = className_;
        if (fieldsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            fields_ = java.util.Collections.unmodifiableList(fields_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.fields_ = fields_;
        } else {
          result.fields_ = fieldsBuilder_.build();
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          interfaces_ = interfaces_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.interfaces_ = interfaces_;
        if (methodsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0)) {
            methods_ = java.util.Collections.unmodifiableList(methods_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.methods_ = methods_;
        } else {
          result.methods_ = methodsBuilder_.build();
        }
        result.name_ = name_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.DeftypeNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.DeftypeNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.DeftypeNode other) {
        if (other == clojureRT.protobuf.Protobuf.DeftypeNode.getDefaultInstance()) return this;
        if (!other.getClassName().isEmpty()) {
          className_ = other.className_;
          onChanged();
        }
        if (fieldsBuilder_ == null) {
          if (!other.fields_.isEmpty()) {
            if (fields_.isEmpty()) {
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureFieldsIsMutable();
              fields_.addAll(other.fields_);
            }
            onChanged();
          }
        } else {
          if (!other.fields_.isEmpty()) {
            if (fieldsBuilder_.isEmpty()) {
              fieldsBuilder_.dispose();
              fieldsBuilder_ = null;
              fields_ = other.fields_;
              bitField0_ = (bitField0_ & ~0x00000001);
              fieldsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getFieldsFieldBuilder() : null;
            } else {
              fieldsBuilder_.addAllMessages(other.fields_);
            }
          }
        }
        if (!other.interfaces_.isEmpty()) {
          if (interfaces_.isEmpty()) {
            interfaces_ = other.interfaces_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureInterfacesIsMutable();
            interfaces_.addAll(other.interfaces_);
          }
          onChanged();
        }
        if (methodsBuilder_ == null) {
          if (!other.methods_.isEmpty()) {
            if (methods_.isEmpty()) {
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureMethodsIsMutable();
              methods_.addAll(other.methods_);
            }
            onChanged();
          }
        } else {
          if (!other.methods_.isEmpty()) {
            if (methodsBuilder_.isEmpty()) {
              methodsBuilder_.dispose();
              methodsBuilder_ = null;
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000004);
              methodsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMethodsFieldBuilder() : null;
            } else {
              methodsBuilder_.addAllMessages(other.methods_);
            }
          }
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.DeftypeNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.DeftypeNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object className_ = "";
      /**
       * <pre>
       * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return The className.
       */
      public java.lang.String getClassName() {
        java.lang.Object ref = className_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          className_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return The bytes for className.
       */
      public com.google.protobuf.ByteString
          getClassNameBytes() {
        java.lang.Object ref = className_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          className_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        className_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        
        className_ = getDefaultInstance().getClassName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A class for the deftype, should *never* be instantiated or used on instance? checks as this will not be the same class the deftype will evaluate to after compilation 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @param value The bytes for className to set.
       * @return This builder for chaining.
       */
      public Builder setClassNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        className_ = value;
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> fields_ =
        java.util.Collections.emptyList();
      private void ensureFieldsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          fields_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(fields_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> fieldsBuilder_;

      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getFieldsList() {
        if (fieldsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(fields_);
        } else {
          return fieldsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public int getFieldsCount() {
        if (fieldsBuilder_ == null) {
          return fields_.size();
        } else {
          return fieldsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getFields(int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);
        } else {
          return fieldsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder setFields(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.set(index, value);
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder setFields(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.set(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder addFields(clojureRT.protobuf.Protobuf.Node value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder addFields(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (fieldsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureFieldsIsMutable();
          fields_.add(index, value);
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder addFields(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder addFields(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.add(index, builderForValue.build());
          onChanged();
        } else {
          fieldsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder addAllFields(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, fields_);
          onChanged();
        } else {
          fieldsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder clearFields() {
        if (fieldsBuilder_ == null) {
          fields_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          fieldsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public Builder removeFields(int index) {
        if (fieldsBuilder_ == null) {
          ensureFieldsIsMutable();
          fields_.remove(index);
          onChanged();
        } else {
          fieldsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getFieldsOrBuilder(
          int index) {
        if (fieldsBuilder_ == null) {
          return fields_.get(index);  } else {
          return fieldsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getFieldsOrBuilderList() {
        if (fieldsBuilder_ != null) {
          return fieldsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(fields_);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addFieldsBuilder() {
        return getFieldsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addFieldsBuilder(
          int index) {
        return getFieldsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :field representing the deftype fields 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node fields = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getFieldsBuilderList() {
        return getFieldsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getFieldsFieldBuilder() {
        if (fieldsBuilder_ == null) {
          fieldsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  fields_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          fields_ = null;
        }
        return fieldsBuilder_;
      }

      private com.google.protobuf.LazyStringList interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInterfacesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          interfaces_ = new com.google.protobuf.LazyStringArrayList(interfaces_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @return A list containing the interfaces.
       */
      public com.google.protobuf.ProtocolStringList
          getInterfacesList() {
        return interfaces_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @return The count of interfaces.
       */
      public int getInterfacesCount() {
        return interfaces_.size();
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param index The index of the element to return.
       * @return The interfaces at the given index.
       */
      public java.lang.String getInterfaces(int index) {
        return interfaces_.get(index);
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param index The index of the value to return.
       * @return The bytes of the interfaces at the given index.
       */
      public com.google.protobuf.ByteString
          getInterfacesBytes(int index) {
        return interfaces_.getByteString(index);
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param index The index to set the value at.
       * @param value The interfaces to set.
       * @return This builder for chaining.
       */
      public Builder setInterfaces(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInterfacesIsMutable();
        interfaces_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param value The interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addInterfaces(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInterfacesIsMutable();
        interfaces_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param values The interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addAllInterfaces(
          java.lang.Iterable<java.lang.String> values) {
        ensureInterfacesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, interfaces_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearInterfaces() {
        interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the type 
       * </pre>
       *
       * <code>repeated string interfaces = 3;</code>
       * @param value The bytes of the interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addInterfacesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureInterfacesIsMutable();
        interfaces_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_ =
        java.util.Collections.emptyList();
      private void ensureMethodsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(methods_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> methodsBuilder_;

      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
        if (methodsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(methods_);
        } else {
          return methodsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public int getMethodsCount() {
        if (methodsBuilder_ == null) {
          return methods_.size();
        } else {
          return methodsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);
        } else {
          return methodsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.set(index, value);
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.set(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder addMethods(clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(index, value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder addMethods(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder addAllMethods(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, methods_);
          onChanged();
        } else {
          methodsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder clearMethods() {
        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          methodsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public Builder removeMethods(int index) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.remove(index);
          onChanged();
        } else {
          methodsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
          int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);  } else {
          return methodsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getMethodsOrBuilderList() {
        if (methodsBuilder_ != null) {
          return methodsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(methods_);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder() {
        return getMethodsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the deftype methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 4;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getMethodsBuilderList() {
        return getMethodsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMethodsFieldBuilder() {
        if (methodsBuilder_ == null) {
          methodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  methods_,
                  ((bitField0_ & 0x00000004) != 0),
                  getParentForChildren(),
                  isClean());
          methods_ = null;
        }
        return methodsBuilder_;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The symbol name of the deftype 
       * </pre>
       *
       * <code>string name = 5;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the deftype 
       * </pre>
       *
       * <code>string name = 5;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the deftype 
       * </pre>
       *
       * <code>string name = 5;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the deftype 
       * </pre>
       *
       * <code>string name = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the deftype 
       * </pre>
       *
       * <code>string name = 5;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.DeftypeNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.DeftypeNode)
    private static final clojureRT.protobuf.Protobuf.DeftypeNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.DeftypeNode();
    }

    public static clojureRT.protobuf.Protobuf.DeftypeNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DeftypeNode>
        PARSER = new com.google.protobuf.AbstractParser<DeftypeNode>() {
      @java.lang.Override
      public DeftypeNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DeftypeNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DeftypeNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DeftypeNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DeftypeNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface DoNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.DoNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` if this node is a synthetic body 
     * </pre>
     *
     * <code>optional bool isBody = 1;</code>
     * @return Whether the isBody field is set.
     */
    boolean hasIsBody();
    /**
     * <pre>
     * `true` if this node is a synthetic body 
     * </pre>
     *
     * <code>optional bool isBody = 1;</code>
     * @return The isBody.
     */
    boolean getIsBody();

    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     * @return Whether the ret field is set.
     */
    boolean hasRet();
    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     * @return The ret.
     */
    clojureRT.protobuf.Protobuf.Node getRet();
    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getRetOrBuilder();

    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getStatementsList();
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    clojureRT.protobuf.Protobuf.Node getStatements(int index);
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    int getStatementsCount();
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getStatementsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getStatementsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a do special-form expression or for another special-form's body 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.DoNode}
   */
  public static final class DoNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.DoNode)
      DoNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use DoNode.newBuilder() to construct.
    private DoNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private DoNode() {
      statements_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new DoNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private DoNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              isBody_ = input.readBool();
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (ret_ != null) {
                subBuilder = ret_.toBuilder();
              }
              ret_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ret_);
                ret_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                statements_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              statements_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          statements_ = java.util.Collections.unmodifiableList(statements_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DoNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DoNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.DoNode.class, clojureRT.protobuf.Protobuf.DoNode.Builder.class);
    }

    private int bitField0_;
    public static final int ISBODY_FIELD_NUMBER = 1;
    private boolean isBody_;
    /**
     * <pre>
     * `true` if this node is a synthetic body 
     * </pre>
     *
     * <code>optional bool isBody = 1;</code>
     * @return Whether the isBody field is set.
     */
    @java.lang.Override
    public boolean hasIsBody() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if this node is a synthetic body 
     * </pre>
     *
     * <code>optional bool isBody = 1;</code>
     * @return The isBody.
     */
    @java.lang.Override
    public boolean getIsBody() {
      return isBody_;
    }

    public static final int RET_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node ret_;
    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     * @return Whether the ret field is set.
     */
    @java.lang.Override
    public boolean hasRet() {
      return ret_ != null;
    }
    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     * @return The ret.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getRet() {
      return ret_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : ret_;
    }
    /**
     * <pre>
     * An AST node representing the last expression in the do body (the block's return value) 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node ret = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getRetOrBuilder() {
      return getRet();
    }

    public static final int STATEMENTS_FIELD_NUMBER = 3;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> statements_;
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getStatementsList() {
      return statements_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getStatementsOrBuilderList() {
      return statements_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    @java.lang.Override
    public int getStatementsCount() {
      return statements_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getStatements(int index) {
      return statements_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing all but the last expression in the do body 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getStatementsOrBuilder(
        int index) {
      return statements_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, isBody_);
      }
      if (ret_ != null) {
        output.writeMessage(2, getRet());
      }
      for (int i = 0; i < statements_.size(); i++) {
        output.writeMessage(3, statements_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isBody_);
      }
      if (ret_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getRet());
      }
      for (int i = 0; i < statements_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, statements_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.DoNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.DoNode other = (clojureRT.protobuf.Protobuf.DoNode) obj;

      if (hasIsBody() != other.hasIsBody()) return false;
      if (hasIsBody()) {
        if (getIsBody()
            != other.getIsBody()) return false;
      }
      if (hasRet() != other.hasRet()) return false;
      if (hasRet()) {
        if (!getRet()
            .equals(other.getRet())) return false;
      }
      if (!getStatementsList()
          .equals(other.getStatementsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsBody()) {
        hash = (37 * hash) + ISBODY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsBody());
      }
      if (hasRet()) {
        hash = (37 * hash) + RET_FIELD_NUMBER;
        hash = (53 * hash) + getRet().hashCode();
      }
      if (getStatementsCount() > 0) {
        hash = (37 * hash) + STATEMENTS_FIELD_NUMBER;
        hash = (53 * hash) + getStatementsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.DoNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.DoNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a do special-form expression or for another special-form's body 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.DoNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.DoNode)
        clojureRT.protobuf.Protobuf.DoNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DoNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DoNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.DoNode.class, clojureRT.protobuf.Protobuf.DoNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.DoNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getStatementsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isBody_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (retBuilder_ == null) {
          ret_ = null;
        } else {
          ret_ = null;
          retBuilder_ = null;
        }
        if (statementsBuilder_ == null) {
          statements_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          statementsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_DoNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DoNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DoNode build() {
        clojureRT.protobuf.Protobuf.DoNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.DoNode buildPartial() {
        clojureRT.protobuf.Protobuf.DoNode result = new clojureRT.protobuf.Protobuf.DoNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isBody_ = isBody_;
          to_bitField0_ |= 0x00000001;
        }
        if (retBuilder_ == null) {
          result.ret_ = ret_;
        } else {
          result.ret_ = retBuilder_.build();
        }
        if (statementsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            statements_ = java.util.Collections.unmodifiableList(statements_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.statements_ = statements_;
        } else {
          result.statements_ = statementsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.DoNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.DoNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.DoNode other) {
        if (other == clojureRT.protobuf.Protobuf.DoNode.getDefaultInstance()) return this;
        if (other.hasIsBody()) {
          setIsBody(other.getIsBody());
        }
        if (other.hasRet()) {
          mergeRet(other.getRet());
        }
        if (statementsBuilder_ == null) {
          if (!other.statements_.isEmpty()) {
            if (statements_.isEmpty()) {
              statements_ = other.statements_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureStatementsIsMutable();
              statements_.addAll(other.statements_);
            }
            onChanged();
          }
        } else {
          if (!other.statements_.isEmpty()) {
            if (statementsBuilder_.isEmpty()) {
              statementsBuilder_.dispose();
              statementsBuilder_ = null;
              statements_ = other.statements_;
              bitField0_ = (bitField0_ & ~0x00000002);
              statementsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getStatementsFieldBuilder() : null;
            } else {
              statementsBuilder_.addAllMessages(other.statements_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.DoNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.DoNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isBody_ ;
      /**
       * <pre>
       * `true` if this node is a synthetic body 
       * </pre>
       *
       * <code>optional bool isBody = 1;</code>
       * @return Whether the isBody field is set.
       */
      @java.lang.Override
      public boolean hasIsBody() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * `true` if this node is a synthetic body 
       * </pre>
       *
       * <code>optional bool isBody = 1;</code>
       * @return The isBody.
       */
      @java.lang.Override
      public boolean getIsBody() {
        return isBody_;
      }
      /**
       * <pre>
       * `true` if this node is a synthetic body 
       * </pre>
       *
       * <code>optional bool isBody = 1;</code>
       * @param value The isBody to set.
       * @return This builder for chaining.
       */
      public Builder setIsBody(boolean value) {
        bitField0_ |= 0x00000001;
        isBody_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if this node is a synthetic body 
       * </pre>
       *
       * <code>optional bool isBody = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsBody() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isBody_ = false;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node ret_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> retBuilder_;
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       * @return Whether the ret field is set.
       */
      public boolean hasRet() {
        return retBuilder_ != null || ret_ != null;
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       * @return The ret.
       */
      public clojureRT.protobuf.Protobuf.Node getRet() {
        if (retBuilder_ == null) {
          return ret_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : ret_;
        } else {
          return retBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public Builder setRet(clojureRT.protobuf.Protobuf.Node value) {
        if (retBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ret_ = value;
          onChanged();
        } else {
          retBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public Builder setRet(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (retBuilder_ == null) {
          ret_ = builderForValue.build();
          onChanged();
        } else {
          retBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public Builder mergeRet(clojureRT.protobuf.Protobuf.Node value) {
        if (retBuilder_ == null) {
          if (ret_ != null) {
            ret_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(ret_).mergeFrom(value).buildPartial();
          } else {
            ret_ = value;
          }
          onChanged();
        } else {
          retBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public Builder clearRet() {
        if (retBuilder_ == null) {
          ret_ = null;
          onChanged();
        } else {
          ret_ = null;
          retBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getRetBuilder() {
        
        onChanged();
        return getRetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getRetOrBuilder() {
        if (retBuilder_ != null) {
          return retBuilder_.getMessageOrBuilder();
        } else {
          return ret_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : ret_;
        }
      }
      /**
       * <pre>
       * An AST node representing the last expression in the do body (the block's return value) 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node ret = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getRetFieldBuilder() {
        if (retBuilder_ == null) {
          retBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getRet(),
                  getParentForChildren(),
                  isClean());
          ret_ = null;
        }
        return retBuilder_;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> statements_ =
        java.util.Collections.emptyList();
      private void ensureStatementsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          statements_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(statements_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> statementsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getStatementsList() {
        if (statementsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(statements_);
        } else {
          return statementsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public int getStatementsCount() {
        if (statementsBuilder_ == null) {
          return statements_.size();
        } else {
          return statementsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getStatements(int index) {
        if (statementsBuilder_ == null) {
          return statements_.get(index);
        } else {
          return statementsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder setStatements(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (statementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementsIsMutable();
          statements_.set(index, value);
          onChanged();
        } else {
          statementsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder setStatements(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (statementsBuilder_ == null) {
          ensureStatementsIsMutable();
          statements_.set(index, builderForValue.build());
          onChanged();
        } else {
          statementsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder addStatements(clojureRT.protobuf.Protobuf.Node value) {
        if (statementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementsIsMutable();
          statements_.add(value);
          onChanged();
        } else {
          statementsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder addStatements(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (statementsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureStatementsIsMutable();
          statements_.add(index, value);
          onChanged();
        } else {
          statementsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder addStatements(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (statementsBuilder_ == null) {
          ensureStatementsIsMutable();
          statements_.add(builderForValue.build());
          onChanged();
        } else {
          statementsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder addStatements(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (statementsBuilder_ == null) {
          ensureStatementsIsMutable();
          statements_.add(index, builderForValue.build());
          onChanged();
        } else {
          statementsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder addAllStatements(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (statementsBuilder_ == null) {
          ensureStatementsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, statements_);
          onChanged();
        } else {
          statementsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder clearStatements() {
        if (statementsBuilder_ == null) {
          statements_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          statementsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public Builder removeStatements(int index) {
        if (statementsBuilder_ == null) {
          ensureStatementsIsMutable();
          statements_.remove(index);
          onChanged();
        } else {
          statementsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getStatementsBuilder(
          int index) {
        return getStatementsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getStatementsOrBuilder(
          int index) {
        if (statementsBuilder_ == null) {
          return statements_.get(index);  } else {
          return statementsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getStatementsOrBuilderList() {
        if (statementsBuilder_ != null) {
          return statementsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(statements_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addStatementsBuilder() {
        return getStatementsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addStatementsBuilder(
          int index) {
        return getStatementsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing all but the last expression in the do body 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node statements = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getStatementsBuilderList() {
        return getStatementsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getStatementsFieldBuilder() {
        if (statementsBuilder_ == null) {
          statementsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  statements_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          statements_ = null;
        }
        return statementsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.DoNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.DoNode)
    private static final clojureRT.protobuf.Protobuf.DoNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.DoNode();
    }

    public static clojureRT.protobuf.Protobuf.DoNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<DoNode>
        PARSER = new com.google.protobuf.AbstractParser<DoNode>() {
      @java.lang.Override
      public DoNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DoNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<DoNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<DoNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.DoNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FnNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.FnNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     * @return Whether the local field is set.
     */
    boolean hasLocal();
    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     * @return The local.
     */
    clojureRT.protobuf.Protobuf.Node getLocal();
    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder();

    /**
     * <pre>
     * The number of arguments taken by the fixed-arity method taking the most arguments 
     * </pre>
     *
     * <code>uint32 maxFixedArity = 2;</code>
     * @return The maxFixedArity.
     */
    int getMaxFixedArity();

    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getMethodsList();
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    clojureRT.protobuf.Protobuf.Node getMethods(int index);
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    int getMethodsCount();
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList();
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index);

    /**
     * <pre>
     * `true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals 
     * </pre>
     *
     * <code>bool once = 4;</code>
     * @return The once.
     */
    boolean getOnce();

    /**
     * <pre>
     * `true` if this function contains a variadic arity method 
     * </pre>
     *
     * <code>bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    boolean getIsVariadic();
  }
  /**
   * <pre>
   * Node for a fn* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.FnNode}
   */
  public static final class FnNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.FnNode)
      FnNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FnNode.newBuilder() to construct.
    private FnNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FnNode() {
      methods_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FnNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FnNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = local_.toBuilder();
              }
              local_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(local_);
                local_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {

              maxFixedArity_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              methods_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 32: {

              once_ = input.readBool();
              break;
            }
            case 40: {

              isVariadic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          methods_ = java.util.Collections.unmodifiableList(methods_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.FnNode.class, clojureRT.protobuf.Protobuf.FnNode.Builder.class);
    }

    private int bitField0_;
    public static final int LOCAL_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node local_;
    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     * @return Whether the local field is set.
     */
    @java.lang.Override
    public boolean hasLocal() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     * @return The local.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getLocal() {
      return local_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
    }
    /**
     * <pre>
     * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node local = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder() {
      return local_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
    }

    public static final int MAXFIXEDARITY_FIELD_NUMBER = 2;
    private int maxFixedArity_;
    /**
     * <pre>
     * The number of arguments taken by the fixed-arity method taking the most arguments 
     * </pre>
     *
     * <code>uint32 maxFixedArity = 2;</code>
     * @return The maxFixedArity.
     */
    @java.lang.Override
    public int getMaxFixedArity() {
      return maxFixedArity_;
    }

    public static final int METHODS_FIELD_NUMBER = 3;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_;
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public int getMethodsCount() {
      return methods_.size();
    }
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
      return methods_.get(index);
    }
    /**
     * <pre>
     * A vector of :fn-method AST nodes representing the fn method arities 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index) {
      return methods_.get(index);
    }

    public static final int ONCE_FIELD_NUMBER = 4;
    private boolean once_;
    /**
     * <pre>
     * `true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals 
     * </pre>
     *
     * <code>bool once = 4;</code>
     * @return The once.
     */
    @java.lang.Override
    public boolean getOnce() {
      return once_;
    }

    public static final int ISVARIADIC_FIELD_NUMBER = 5;
    private boolean isVariadic_;
    /**
     * <pre>
     * `true` if this function contains a variadic arity method 
     * </pre>
     *
     * <code>bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    @java.lang.Override
    public boolean getIsVariadic() {
      return isVariadic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getLocal());
      }
      if (maxFixedArity_ != 0) {
        output.writeUInt32(2, maxFixedArity_);
      }
      for (int i = 0; i < methods_.size(); i++) {
        output.writeMessage(3, methods_.get(i));
      }
      if (once_ != false) {
        output.writeBool(4, once_);
      }
      if (isVariadic_ != false) {
        output.writeBool(5, isVariadic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getLocal());
      }
      if (maxFixedArity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, maxFixedArity_);
      }
      for (int i = 0; i < methods_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, methods_.get(i));
      }
      if (once_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, once_);
      }
      if (isVariadic_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isVariadic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.FnNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.FnNode other = (clojureRT.protobuf.Protobuf.FnNode) obj;

      if (hasLocal() != other.hasLocal()) return false;
      if (hasLocal()) {
        if (!getLocal()
            .equals(other.getLocal())) return false;
      }
      if (getMaxFixedArity()
          != other.getMaxFixedArity()) return false;
      if (!getMethodsList()
          .equals(other.getMethodsList())) return false;
      if (getOnce()
          != other.getOnce()) return false;
      if (getIsVariadic()
          != other.getIsVariadic()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasLocal()) {
        hash = (37 * hash) + LOCAL_FIELD_NUMBER;
        hash = (53 * hash) + getLocal().hashCode();
      }
      hash = (37 * hash) + MAXFIXEDARITY_FIELD_NUMBER;
      hash = (53 * hash) + getMaxFixedArity();
      if (getMethodsCount() > 0) {
        hash = (37 * hash) + METHODS_FIELD_NUMBER;
        hash = (53 * hash) + getMethodsList().hashCode();
      }
      hash = (37 * hash) + ONCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getOnce());
      hash = (37 * hash) + ISVARIADIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsVariadic());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.FnNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a fn* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.FnNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.FnNode)
        clojureRT.protobuf.Protobuf.FnNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.FnNode.class, clojureRT.protobuf.Protobuf.FnNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.FnNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getLocalFieldBuilder();
          getMethodsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (localBuilder_ == null) {
          local_ = null;
        } else {
          localBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        maxFixedArity_ = 0;

        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          methodsBuilder_.clear();
        }
        once_ = false;

        isVariadic_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnNode build() {
        clojureRT.protobuf.Protobuf.FnNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnNode buildPartial() {
        clojureRT.protobuf.Protobuf.FnNode result = new clojureRT.protobuf.Protobuf.FnNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          if (localBuilder_ == null) {
            result.local_ = local_;
          } else {
            result.local_ = localBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        result.maxFixedArity_ = maxFixedArity_;
        if (methodsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            methods_ = java.util.Collections.unmodifiableList(methods_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.methods_ = methods_;
        } else {
          result.methods_ = methodsBuilder_.build();
        }
        result.once_ = once_;
        result.isVariadic_ = isVariadic_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.FnNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.FnNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.FnNode other) {
        if (other == clojureRT.protobuf.Protobuf.FnNode.getDefaultInstance()) return this;
        if (other.hasLocal()) {
          mergeLocal(other.getLocal());
        }
        if (other.getMaxFixedArity() != 0) {
          setMaxFixedArity(other.getMaxFixedArity());
        }
        if (methodsBuilder_ == null) {
          if (!other.methods_.isEmpty()) {
            if (methods_.isEmpty()) {
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMethodsIsMutable();
              methods_.addAll(other.methods_);
            }
            onChanged();
          }
        } else {
          if (!other.methods_.isEmpty()) {
            if (methodsBuilder_.isEmpty()) {
              methodsBuilder_.dispose();
              methodsBuilder_ = null;
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000002);
              methodsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMethodsFieldBuilder() : null;
            } else {
              methodsBuilder_.addAllMessages(other.methods_);
            }
          }
        }
        if (other.getOnce() != false) {
          setOnce(other.getOnce());
        }
        if (other.getIsVariadic() != false) {
          setIsVariadic(other.getIsVariadic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.FnNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.FnNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private clojureRT.protobuf.Protobuf.Node local_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> localBuilder_;
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       * @return Whether the local field is set.
       */
      public boolean hasLocal() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       * @return The local.
       */
      public clojureRT.protobuf.Protobuf.Node getLocal() {
        if (localBuilder_ == null) {
          return local_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
        } else {
          return localBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public Builder setLocal(clojureRT.protobuf.Protobuf.Node value) {
        if (localBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          local_ = value;
          onChanged();
        } else {
          localBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public Builder setLocal(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (localBuilder_ == null) {
          local_ = builderForValue.build();
          onChanged();
        } else {
          localBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public Builder mergeLocal(clojureRT.protobuf.Protobuf.Node value) {
        if (localBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
              local_ != null &&
              local_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            local_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(local_).mergeFrom(value).buildPartial();
          } else {
            local_ = value;
          }
          onChanged();
        } else {
          localBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public Builder clearLocal() {
        if (localBuilder_ == null) {
          local_ = null;
          onChanged();
        } else {
          localBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getLocalBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getLocalFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getLocalOrBuilder() {
        if (localBuilder_ != null) {
          return localBuilder_.getMessageOrBuilder();
        } else {
          return local_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : local_;
        }
      }
      /**
       * <pre>
       * A :binding AST node with :local :fn representing the function's local name, if one is supplied 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node local = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getLocalFieldBuilder() {
        if (localBuilder_ == null) {
          localBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getLocal(),
                  getParentForChildren(),
                  isClean());
          local_ = null;
        }
        return localBuilder_;
      }

      private int maxFixedArity_ ;
      /**
       * <pre>
       * The number of arguments taken by the fixed-arity method taking the most arguments 
       * </pre>
       *
       * <code>uint32 maxFixedArity = 2;</code>
       * @return The maxFixedArity.
       */
      @java.lang.Override
      public int getMaxFixedArity() {
        return maxFixedArity_;
      }
      /**
       * <pre>
       * The number of arguments taken by the fixed-arity method taking the most arguments 
       * </pre>
       *
       * <code>uint32 maxFixedArity = 2;</code>
       * @param value The maxFixedArity to set.
       * @return This builder for chaining.
       */
      public Builder setMaxFixedArity(int value) {
        
        maxFixedArity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of arguments taken by the fixed-arity method taking the most arguments 
       * </pre>
       *
       * <code>uint32 maxFixedArity = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMaxFixedArity() {
        
        maxFixedArity_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_ =
        java.util.Collections.emptyList();
      private void ensureMethodsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(methods_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> methodsBuilder_;

      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
        if (methodsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(methods_);
        } else {
          return methodsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public int getMethodsCount() {
        if (methodsBuilder_ == null) {
          return methods_.size();
        } else {
          return methodsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);
        } else {
          return methodsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.set(index, value);
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.set(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(index, value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addAllMethods(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, methods_);
          onChanged();
        } else {
          methodsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder clearMethods() {
        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          methodsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder removeMethods(int index) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.remove(index);
          onChanged();
        } else {
          methodsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
          int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);  } else {
          return methodsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getMethodsOrBuilderList() {
        if (methodsBuilder_ != null) {
          return methodsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(methods_);
        }
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder() {
        return getMethodsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :fn-method AST nodes representing the fn method arities 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getMethodsBuilderList() {
        return getMethodsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMethodsFieldBuilder() {
        if (methodsBuilder_ == null) {
          methodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  methods_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          methods_ = null;
        }
        return methodsBuilder_;
      }

      private boolean once_ ;
      /**
       * <pre>
       * `true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals 
       * </pre>
       *
       * <code>bool once = 4;</code>
       * @return The once.
       */
      @java.lang.Override
      public boolean getOnce() {
        return once_;
      }
      /**
       * <pre>
       * `true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals 
       * </pre>
       *
       * <code>bool once = 4;</code>
       * @param value The once to set.
       * @return This builder for chaining.
       */
      public Builder setOnce(boolean value) {
        
        once_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the fn is marked as `^:once fn*`, meaning it will only be executed once and thus allowing for the clearing of closed-over locals 
       * </pre>
       *
       * <code>bool once = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearOnce() {
        
        once_ = false;
        onChanged();
        return this;
      }

      private boolean isVariadic_ ;
      /**
       * <pre>
       * `true` if this function contains a variadic arity method 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @return The isVariadic.
       */
      @java.lang.Override
      public boolean getIsVariadic() {
        return isVariadic_;
      }
      /**
       * <pre>
       * `true` if this function contains a variadic arity method 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @param value The isVariadic to set.
       * @return This builder for chaining.
       */
      public Builder setIsVariadic(boolean value) {
        
        isVariadic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if this function contains a variadic arity method 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVariadic() {
        
        isVariadic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.FnNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.FnNode)
    private static final clojureRT.protobuf.Protobuf.FnNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.FnNode();
    }

    public static clojureRT.protobuf.Protobuf.FnNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FnNode>
        PARSER = new com.google.protobuf.AbstractParser<FnNode>() {
      @java.lang.Override
      public FnNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FnNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FnNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FnNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface FnMethodNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.FnMethodNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();

    /**
     * <pre>
     * The number of non-variadic args this fn-method takes 
     * </pre>
     *
     * <code>uint32 fixedArity = 2;</code>
     * @return The fixedArity.
     */
    int getFixedArity();

    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The loopId.
     */
    java.lang.String getLoopId();
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The bytes for loopId.
     */
    com.google.protobuf.ByteString
        getLoopIdBytes();

    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getParamsList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    clojureRT.protobuf.Protobuf.Node getParams(int index);
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    int getParamsCount();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getParamsOrBuilderList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
        int index);

    /**
     * <pre>
     * `true` if this fn-method takes a variable number of arguments 
     * </pre>
     *
     * <code>bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    boolean getIsVariadic();
  }
  /**
   * <pre>
   * Node for an arity method in a fn* expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.FnMethodNode}
   */
  public static final class FnMethodNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.FnMethodNode)
      FnMethodNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use FnMethodNode.newBuilder() to construct.
    private FnMethodNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private FnMethodNode() {
      loopId_ = "";
      params_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new FnMethodNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private FnMethodNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              fixedArity_ = input.readUInt32();
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              loopId_ = s;
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                params_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              params_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 40: {

              isVariadic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          params_ = java.util.Collections.unmodifiableList(params_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnMethodNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnMethodNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.FnMethodNode.class, clojureRT.protobuf.Protobuf.FnMethodNode.Builder.class);
    }

    public static final int BODY_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    public static final int FIXEDARITY_FIELD_NUMBER = 2;
    private int fixedArity_;
    /**
     * <pre>
     * The number of non-variadic args this fn-method takes 
     * </pre>
     *
     * <code>uint32 fixedArity = 2;</code>
     * @return The fixedArity.
     */
    @java.lang.Override
    public int getFixedArity() {
      return fixedArity_;
    }

    public static final int LOOPID_FIELD_NUMBER = 3;
    private volatile java.lang.Object loopId_;
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The loopId.
     */
    @java.lang.Override
    public java.lang.String getLoopId() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        loopId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The bytes for loopId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLoopIdBytes() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        loopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMS_FIELD_NUMBER = 4;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> params_;
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getParamsList() {
      return params_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getParamsOrBuilderList() {
      return params_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    @java.lang.Override
    public int getParamsCount() {
      return params_.size();
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getParams(int index) {
      return params_.get(index);
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :arg representing this fn-method args 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
        int index) {
      return params_.get(index);
    }

    public static final int ISVARIADIC_FIELD_NUMBER = 5;
    private boolean isVariadic_;
    /**
     * <pre>
     * `true` if this fn-method takes a variable number of arguments 
     * </pre>
     *
     * <code>bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    @java.lang.Override
    public boolean getIsVariadic() {
      return isVariadic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (body_ != null) {
        output.writeMessage(1, getBody());
      }
      if (fixedArity_ != 0) {
        output.writeUInt32(2, fixedArity_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, loopId_);
      }
      for (int i = 0; i < params_.size(); i++) {
        output.writeMessage(4, params_.get(i));
      }
      if (isVariadic_ != false) {
        output.writeBool(5, isVariadic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBody());
      }
      if (fixedArity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, fixedArity_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, loopId_);
      }
      for (int i = 0; i < params_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, params_.get(i));
      }
      if (isVariadic_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isVariadic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.FnMethodNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.FnMethodNode other = (clojureRT.protobuf.Protobuf.FnMethodNode) obj;

      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (getFixedArity()
          != other.getFixedArity()) return false;
      if (!getLoopId()
          .equals(other.getLoopId())) return false;
      if (!getParamsList()
          .equals(other.getParamsList())) return false;
      if (getIsVariadic()
          != other.getIsVariadic()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (37 * hash) + FIXEDARITY_FIELD_NUMBER;
      hash = (53 * hash) + getFixedArity();
      hash = (37 * hash) + LOOPID_FIELD_NUMBER;
      hash = (53 * hash) + getLoopId().hashCode();
      if (getParamsCount() > 0) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParamsList().hashCode();
      }
      hash = (37 * hash) + ISVARIADIC_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsVariadic());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.FnMethodNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.FnMethodNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an arity method in a fn* expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.FnMethodNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.FnMethodNode)
        clojureRT.protobuf.Protobuf.FnMethodNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnMethodNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnMethodNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.FnMethodNode.class, clojureRT.protobuf.Protobuf.FnMethodNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.FnMethodNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        fixedArity_ = 0;

        loopId_ = "";

        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          paramsBuilder_.clear();
        }
        isVariadic_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_FnMethodNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnMethodNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnMethodNode build() {
        clojureRT.protobuf.Protobuf.FnMethodNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.FnMethodNode buildPartial() {
        clojureRT.protobuf.Protobuf.FnMethodNode result = new clojureRT.protobuf.Protobuf.FnMethodNode(this);
        int from_bitField0_ = bitField0_;
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        result.fixedArity_ = fixedArity_;
        result.loopId_ = loopId_;
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            params_ = java.util.Collections.unmodifiableList(params_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        result.isVariadic_ = isVariadic_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.FnMethodNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.FnMethodNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.FnMethodNode other) {
        if (other == clojureRT.protobuf.Protobuf.FnMethodNode.getDefaultInstance()) return this;
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (other.getFixedArity() != 0) {
          setFixedArity(other.getFixedArity());
        }
        if (!other.getLoopId().isEmpty()) {
          loopId_ = other.loopId_;
          onChanged();
        }
        if (paramsBuilder_ == null) {
          if (!other.params_.isEmpty()) {
            if (params_.isEmpty()) {
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureParamsIsMutable();
              params_.addAll(other.params_);
            }
            onChanged();
          }
        } else {
          if (!other.params_.isEmpty()) {
            if (paramsBuilder_.isEmpty()) {
              paramsBuilder_.dispose();
              paramsBuilder_ = null;
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000001);
              paramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParamsFieldBuilder() : null;
            } else {
              paramsBuilder_.addAllMessages(other.params_);
            }
          }
        }
        if (other.getIsVariadic() != false) {
          setIsVariadic(other.getIsVariadic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.FnMethodNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.FnMethodNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this fn-method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private int fixedArity_ ;
      /**
       * <pre>
       * The number of non-variadic args this fn-method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 2;</code>
       * @return The fixedArity.
       */
      @java.lang.Override
      public int getFixedArity() {
        return fixedArity_;
      }
      /**
       * <pre>
       * The number of non-variadic args this fn-method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 2;</code>
       * @param value The fixedArity to set.
       * @return This builder for chaining.
       */
      public Builder setFixedArity(int value) {
        
        fixedArity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of non-variadic args this fn-method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFixedArity() {
        
        fixedArity_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object loopId_ = "";
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return The loopId.
       */
      public java.lang.String getLoopId() {
        java.lang.Object ref = loopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          loopId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return The bytes for loopId.
       */
      public com.google.protobuf.ByteString
          getLoopIdBytes() {
        java.lang.Object ref = loopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          loopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @param value The loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoopId() {
        
        loopId_ = getDefaultInstance().getLoopId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @param value The bytes for loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        loopId_ = value;
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> params_ =
        java.util.Collections.emptyList();
      private void ensureParamsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          params_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(params_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> paramsBuilder_;

      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getParamsList() {
        if (paramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(params_);
        } else {
          return paramsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public int getParamsCount() {
        if (paramsBuilder_ == null) {
          return params_.size();
        } else {
          return paramsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getParams(int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);
        } else {
          return paramsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder setParams(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.set(index, value);
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder setParams(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.set(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder addParams(clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder addParams(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(index, value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder addParams(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder addParams(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder addAllParams(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, params_);
          onChanged();
        } else {
          paramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public Builder removeParams(int index) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.remove(index);
          onChanged();
        } else {
          paramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getParamsBuilder(
          int index) {
        return getParamsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
          int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);  } else {
          return paramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getParamsOrBuilderList() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(params_);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addParamsBuilder() {
        return getParamsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addParamsBuilder(
          int index) {
        return getParamsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :arg representing this fn-method args 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 4;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getParamsBuilderList() {
        return getParamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  params_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private boolean isVariadic_ ;
      /**
       * <pre>
       * `true` if this fn-method takes a variable number of arguments 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @return The isVariadic.
       */
      @java.lang.Override
      public boolean getIsVariadic() {
        return isVariadic_;
      }
      /**
       * <pre>
       * `true` if this fn-method takes a variable number of arguments 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @param value The isVariadic to set.
       * @return This builder for chaining.
       */
      public Builder setIsVariadic(boolean value) {
        
        isVariadic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if this fn-method takes a variable number of arguments 
       * </pre>
       *
       * <code>bool isVariadic = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVariadic() {
        
        isVariadic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.FnMethodNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.FnMethodNode)
    private static final clojureRT.protobuf.Protobuf.FnMethodNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.FnMethodNode();
    }

    public static clojureRT.protobuf.Protobuf.FnMethodNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<FnMethodNode>
        PARSER = new com.google.protobuf.AbstractParser<FnMethodNode>() {
      @java.lang.Override
      public FnMethodNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new FnMethodNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<FnMethodNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<FnMethodNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.FnMethodNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface HostInteropNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.HostInteropNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    boolean getIsAssignable();

    /**
     * <pre>
     * Symbol naming the no-arg method or field to lookup in the target 
     * </pre>
     *
     * <code>string mOrF = 2;</code>
     * @return The mOrF.
     */
    java.lang.String getMOrF();
    /**
     * <pre>
     * Symbol naming the no-arg method or field to lookup in the target 
     * </pre>
     *
     * <code>string mOrF = 2;</code>
     * @return The bytes for mOrF.
     */
    com.google.protobuf.ByteString
        getMOrFBytes();

    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for a no-arg instance-call or for an instance-field that couldn't be resolved at compile time 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.HostInteropNode}
   */
  public static final class HostInteropNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.HostInteropNode)
      HostInteropNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HostInteropNode.newBuilder() to construct.
    private HostInteropNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HostInteropNode() {
      mOrF_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HostInteropNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HostInteropNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              isAssignable_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              mOrF_ = s;
              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_HostInteropNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_HostInteropNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.HostInteropNode.class, clojureRT.protobuf.Protobuf.HostInteropNode.Builder.class);
    }

    public static final int ISASSIGNABLE_FIELD_NUMBER = 1;
    private boolean isAssignable_;
    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    @java.lang.Override
    public boolean getIsAssignable() {
      return isAssignable_;
    }

    public static final int MORF_FIELD_NUMBER = 2;
    private volatile java.lang.Object mOrF_;
    /**
     * <pre>
     * Symbol naming the no-arg method or field to lookup in the target 
     * </pre>
     *
     * <code>string mOrF = 2;</code>
     * @return The mOrF.
     */
    @java.lang.Override
    public java.lang.String getMOrF() {
      java.lang.Object ref = mOrF_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        mOrF_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Symbol naming the no-arg method or field to lookup in the target 
     * </pre>
     *
     * <code>string mOrF = 2;</code>
     * @return The bytes for mOrF.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMOrFBytes() {
      java.lang.Object ref = mOrF_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        mOrF_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGET_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the target object 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isAssignable_ != false) {
        output.writeBool(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mOrF_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, mOrF_);
      }
      if (target_ != null) {
        output.writeMessage(3, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isAssignable_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(mOrF_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, mOrF_);
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.HostInteropNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.HostInteropNode other = (clojureRT.protobuf.Protobuf.HostInteropNode) obj;

      if (getIsAssignable()
          != other.getIsAssignable()) return false;
      if (!getMOrF()
          .equals(other.getMOrF())) return false;
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ISASSIGNABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsAssignable());
      hash = (37 * hash) + MORF_FIELD_NUMBER;
      hash = (53 * hash) + getMOrF().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.HostInteropNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.HostInteropNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a no-arg instance-call or for an instance-field that couldn't be resolved at compile time 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.HostInteropNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.HostInteropNode)
        clojureRT.protobuf.Protobuf.HostInteropNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_HostInteropNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_HostInteropNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.HostInteropNode.class, clojureRT.protobuf.Protobuf.HostInteropNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.HostInteropNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isAssignable_ = false;

        mOrF_ = "";

        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_HostInteropNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.HostInteropNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.HostInteropNode build() {
        clojureRT.protobuf.Protobuf.HostInteropNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.HostInteropNode buildPartial() {
        clojureRT.protobuf.Protobuf.HostInteropNode result = new clojureRT.protobuf.Protobuf.HostInteropNode(this);
        result.isAssignable_ = isAssignable_;
        result.mOrF_ = mOrF_;
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.HostInteropNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.HostInteropNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.HostInteropNode other) {
        if (other == clojureRT.protobuf.Protobuf.HostInteropNode.getDefaultInstance()) return this;
        if (other.getIsAssignable() != false) {
          setIsAssignable(other.getIsAssignable());
        }
        if (!other.getMOrF().isEmpty()) {
          mOrF_ = other.mOrF_;
          onChanged();
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.HostInteropNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.HostInteropNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean isAssignable_ ;
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @return The isAssignable.
       */
      @java.lang.Override
      public boolean getIsAssignable() {
        return isAssignable_;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @param value The isAssignable to set.
       * @return This builder for chaining.
       */
      public Builder setIsAssignable(boolean value) {
        
        isAssignable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsAssignable() {
        
        isAssignable_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object mOrF_ = "";
      /**
       * <pre>
       * Symbol naming the no-arg method or field to lookup in the target 
       * </pre>
       *
       * <code>string mOrF = 2;</code>
       * @return The mOrF.
       */
      public java.lang.String getMOrF() {
        java.lang.Object ref = mOrF_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          mOrF_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the no-arg method or field to lookup in the target 
       * </pre>
       *
       * <code>string mOrF = 2;</code>
       * @return The bytes for mOrF.
       */
      public com.google.protobuf.ByteString
          getMOrFBytes() {
        java.lang.Object ref = mOrF_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          mOrF_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the no-arg method or field to lookup in the target 
       * </pre>
       *
       * <code>string mOrF = 2;</code>
       * @param value The mOrF to set.
       * @return This builder for chaining.
       */
      public Builder setMOrF(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        mOrF_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the no-arg method or field to lookup in the target 
       * </pre>
       *
       * <code>string mOrF = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearMOrF() {
        
        mOrF_ = getDefaultInstance().getMOrF();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the no-arg method or field to lookup in the target 
       * </pre>
       *
       * <code>string mOrF = 2;</code>
       * @param value The bytes for mOrF to set.
       * @return This builder for chaining.
       */
      public Builder setMOrFBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        mOrF_ = value;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the target object 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.HostInteropNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.HostInteropNode)
    private static final clojureRT.protobuf.Protobuf.HostInteropNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.HostInteropNode();
    }

    public static clojureRT.protobuf.Protobuf.HostInteropNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HostInteropNode>
        PARSER = new com.google.protobuf.AbstractParser<HostInteropNode>() {
      @java.lang.Override
      public HostInteropNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HostInteropNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HostInteropNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HostInteropNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.HostInteropNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IfNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.IfNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     * @return Whether the else field is set.
     */
    boolean hasElse();
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     * @return The else.
     */
    clojureRT.protobuf.Protobuf.Node getElse();
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getElseOrBuilder();

    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return Whether the test field is set.
     */
    boolean hasTest();
    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return The test.
     */
    clojureRT.protobuf.Protobuf.Node getTest();
    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder();

    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     * @return Whether the then field is set.
     */
    boolean hasThen();
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     * @return The then.
     */
    clojureRT.protobuf.Protobuf.Node getThen();
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder();
  }
  /**
   * <pre>
   * Node for an if special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.IfNode}
   */
  public static final class IfNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.IfNode)
      IfNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IfNode.newBuilder() to construct.
    private IfNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IfNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IfNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IfNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (else_ != null) {
                subBuilder = else_.toBuilder();
              }
              else_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(else_);
                else_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (test_ != null) {
                subBuilder = test_.toBuilder();
              }
              test_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(test_);
                test_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (then_ != null) {
                subBuilder = then_.toBuilder();
              }
              then_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(then_);
                then_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IfNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IfNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.IfNode.class, clojureRT.protobuf.Protobuf.IfNode.Builder.class);
    }

    public static final int ELSE_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node else_;
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     * @return Whether the else field is set.
     */
    @java.lang.Override
    public boolean hasElse() {
      return else_ != null;
    }
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     * @return The else.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getElse() {
      return else_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : else_;
    }
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node else = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getElseOrBuilder() {
      return getElse();
    }

    public static final int TEST_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node test_;
    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return Whether the test field is set.
     */
    @java.lang.Override
    public boolean hasTest() {
      return test_ != null;
    }
    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     * @return The test.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTest() {
      return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
    }
    /**
     * <pre>
     * An AST node representing the test expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node test = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
      return getTest();
    }

    public static final int THEN_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node then_;
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     * @return Whether the then field is set.
     */
    @java.lang.Override
    public boolean hasThen() {
      return then_ != null;
    }
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     * @return The then.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getThen() {
      return then_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
    }
    /**
     * <pre>
     * An AST node representing the expression's return value if :test evaluated to a truthy value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node then = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder() {
      return getThen();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (else_ != null) {
        output.writeMessage(1, getElse());
      }
      if (test_ != null) {
        output.writeMessage(2, getTest());
      }
      if (then_ != null) {
        output.writeMessage(3, getThen());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (else_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getElse());
      }
      if (test_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTest());
      }
      if (then_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getThen());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.IfNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.IfNode other = (clojureRT.protobuf.Protobuf.IfNode) obj;

      if (hasElse() != other.hasElse()) return false;
      if (hasElse()) {
        if (!getElse()
            .equals(other.getElse())) return false;
      }
      if (hasTest() != other.hasTest()) return false;
      if (hasTest()) {
        if (!getTest()
            .equals(other.getTest())) return false;
      }
      if (hasThen() != other.hasThen()) return false;
      if (hasThen()) {
        if (!getThen()
            .equals(other.getThen())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasElse()) {
        hash = (37 * hash) + ELSE_FIELD_NUMBER;
        hash = (53 * hash) + getElse().hashCode();
      }
      if (hasTest()) {
        hash = (37 * hash) + TEST_FIELD_NUMBER;
        hash = (53 * hash) + getTest().hashCode();
      }
      if (hasThen()) {
        hash = (37 * hash) + THEN_FIELD_NUMBER;
        hash = (53 * hash) + getThen().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IfNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.IfNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an if special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.IfNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.IfNode)
        clojureRT.protobuf.Protobuf.IfNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IfNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IfNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.IfNode.class, clojureRT.protobuf.Protobuf.IfNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.IfNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (elseBuilder_ == null) {
          else_ = null;
        } else {
          else_ = null;
          elseBuilder_ = null;
        }
        if (testBuilder_ == null) {
          test_ = null;
        } else {
          test_ = null;
          testBuilder_ = null;
        }
        if (thenBuilder_ == null) {
          then_ = null;
        } else {
          then_ = null;
          thenBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IfNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IfNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IfNode build() {
        clojureRT.protobuf.Protobuf.IfNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IfNode buildPartial() {
        clojureRT.protobuf.Protobuf.IfNode result = new clojureRT.protobuf.Protobuf.IfNode(this);
        if (elseBuilder_ == null) {
          result.else_ = else_;
        } else {
          result.else_ = elseBuilder_.build();
        }
        if (testBuilder_ == null) {
          result.test_ = test_;
        } else {
          result.test_ = testBuilder_.build();
        }
        if (thenBuilder_ == null) {
          result.then_ = then_;
        } else {
          result.then_ = thenBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.IfNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.IfNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.IfNode other) {
        if (other == clojureRT.protobuf.Protobuf.IfNode.getDefaultInstance()) return this;
        if (other.hasElse()) {
          mergeElse(other.getElse());
        }
        if (other.hasTest()) {
          mergeTest(other.getTest());
        }
        if (other.hasThen()) {
          mergeThen(other.getThen());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.IfNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.IfNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node else_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> elseBuilder_;
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       * @return Whether the else field is set.
       */
      public boolean hasElse() {
        return elseBuilder_ != null || else_ != null;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       * @return The else.
       */
      public clojureRT.protobuf.Protobuf.Node getElse() {
        if (elseBuilder_ == null) {
          return else_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : else_;
        } else {
          return elseBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public Builder setElse(clojureRT.protobuf.Protobuf.Node value) {
        if (elseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          else_ = value;
          onChanged();
        } else {
          elseBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public Builder setElse(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (elseBuilder_ == null) {
          else_ = builderForValue.build();
          onChanged();
        } else {
          elseBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public Builder mergeElse(clojureRT.protobuf.Protobuf.Node value) {
        if (elseBuilder_ == null) {
          if (else_ != null) {
            else_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(else_).mergeFrom(value).buildPartial();
          } else {
            else_ = value;
          }
          onChanged();
        } else {
          elseBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public Builder clearElse() {
        if (elseBuilder_ == null) {
          else_ = null;
          onChanged();
        } else {
          else_ = null;
          elseBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getElseBuilder() {
        
        onChanged();
        return getElseFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getElseOrBuilder() {
        if (elseBuilder_ != null) {
          return elseBuilder_.getMessageOrBuilder();
        } else {
          return else_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : else_;
        }
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a falsey value, if not supplied it will default to a :const node representing nil 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node else = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getElseFieldBuilder() {
        if (elseBuilder_ == null) {
          elseBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getElse(),
                  getParentForChildren(),
                  isClean());
          else_ = null;
        }
        return elseBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node test_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> testBuilder_;
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       * @return Whether the test field is set.
       */
      public boolean hasTest() {
        return testBuilder_ != null || test_ != null;
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       * @return The test.
       */
      public clojureRT.protobuf.Protobuf.Node getTest() {
        if (testBuilder_ == null) {
          return test_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        } else {
          return testBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder setTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          test_ = value;
          onChanged();
        } else {
          testBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder setTest(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (testBuilder_ == null) {
          test_ = builderForValue.build();
          onChanged();
        } else {
          testBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder mergeTest(clojureRT.protobuf.Protobuf.Node value) {
        if (testBuilder_ == null) {
          if (test_ != null) {
            test_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(test_).mergeFrom(value).buildPartial();
          } else {
            test_ = value;
          }
          onChanged();
        } else {
          testBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public Builder clearTest() {
        if (testBuilder_ == null) {
          test_ = null;
          onChanged();
        } else {
          test_ = null;
          testBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTestBuilder() {
        
        onChanged();
        return getTestFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTestOrBuilder() {
        if (testBuilder_ != null) {
          return testBuilder_.getMessageOrBuilder();
        } else {
          return test_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : test_;
        }
      }
      /**
       * <pre>
       * An AST node representing the test expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node test = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTestFieldBuilder() {
        if (testBuilder_ == null) {
          testBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTest(),
                  getParentForChildren(),
                  isClean());
          test_ = null;
        }
        return testBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node then_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> thenBuilder_;
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       * @return Whether the then field is set.
       */
      public boolean hasThen() {
        return thenBuilder_ != null || then_ != null;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       * @return The then.
       */
      public clojureRT.protobuf.Protobuf.Node getThen() {
        if (thenBuilder_ == null) {
          return then_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
        } else {
          return thenBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public Builder setThen(clojureRT.protobuf.Protobuf.Node value) {
        if (thenBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          then_ = value;
          onChanged();
        } else {
          thenBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public Builder setThen(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thenBuilder_ == null) {
          then_ = builderForValue.build();
          onChanged();
        } else {
          thenBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public Builder mergeThen(clojureRT.protobuf.Protobuf.Node value) {
        if (thenBuilder_ == null) {
          if (then_ != null) {
            then_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(then_).mergeFrom(value).buildPartial();
          } else {
            then_ = value;
          }
          onChanged();
        } else {
          thenBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public Builder clearThen() {
        if (thenBuilder_ == null) {
          then_ = null;
          onChanged();
        } else {
          then_ = null;
          thenBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getThenBuilder() {
        
        onChanged();
        return getThenFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getThenOrBuilder() {
        if (thenBuilder_ != null) {
          return thenBuilder_.getMessageOrBuilder();
        } else {
          return then_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : then_;
        }
      }
      /**
       * <pre>
       * An AST node representing the expression's return value if :test evaluated to a truthy value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node then = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getThenFieldBuilder() {
        if (thenBuilder_ == null) {
          thenBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getThen(),
                  getParentForChildren(),
                  isClean());
          then_ = null;
        }
        return thenBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.IfNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.IfNode)
    private static final clojureRT.protobuf.Protobuf.IfNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.IfNode();
    }

    public static clojureRT.protobuf.Protobuf.IfNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IfNode>
        PARSER = new com.google.protobuf.AbstractParser<IfNode>() {
      @java.lang.Override
      public IfNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IfNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IfNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IfNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IfNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ImportNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.ImportNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * String representing the qualified class to import 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * String representing the qualified class to import 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();
  }
  /**
   * <pre>
   * Node for a clojure.core/import* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.ImportNode}
   */
  public static final class ImportNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.ImportNode)
      ImportNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ImportNode.newBuilder() to construct.
    private ImportNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImportNode() {
      class__ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ImportNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImportNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              class__ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ImportNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ImportNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.ImportNode.class, clojureRT.protobuf.Protobuf.ImportNode.Builder.class);
    }

    public static final int CLASS_FIELD_NUMBER = 1;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * String representing the qualified class to import 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * String representing the qualified class to import 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, class__);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, class__);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.ImportNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.ImportNode other = (clojureRT.protobuf.Protobuf.ImportNode) obj;

      if (!getClass_()
          .equals(other.getClass_())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getClass_().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ImportNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.ImportNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a clojure.core/import* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.ImportNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.ImportNode)
        clojureRT.protobuf.Protobuf.ImportNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ImportNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ImportNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.ImportNode.class, clojureRT.protobuf.Protobuf.ImportNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.ImportNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        class__ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ImportNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ImportNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ImportNode build() {
        clojureRT.protobuf.Protobuf.ImportNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ImportNode buildPartial() {
        clojureRT.protobuf.Protobuf.ImportNode result = new clojureRT.protobuf.Protobuf.ImportNode(this);
        result.class__ = class__;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.ImportNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.ImportNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.ImportNode other) {
        if (other == clojureRT.protobuf.Protobuf.ImportNode.getDefaultInstance()) return this;
        if (!other.getClass_().isEmpty()) {
          class__ = other.class__;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.ImportNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.ImportNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * String representing the qualified class to import 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * String representing the qualified class to import 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * String representing the qualified class to import 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String representing the qualified class to import 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * String representing the qualified class to import 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        class__ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.ImportNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.ImportNode)
    private static final clojureRT.protobuf.Protobuf.ImportNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.ImportNode();
    }

    public static clojureRT.protobuf.Protobuf.ImportNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImportNode>
        PARSER = new com.google.protobuf.AbstractParser<ImportNode>() {
      @java.lang.Override
      public ImportNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImportNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImportNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImportNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ImportNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstanceCallNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.InstanceCallNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();

    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     * @return Whether the instance field is set.
     */
    boolean hasInstance();
    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     * @return The instance.
     */
    clojureRT.protobuf.Protobuf.Node getInstance();
    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder();

    /**
     * <pre>
     * Symbol naming the invoked method 
     * </pre>
     *
     * <code>string method = 4;</code>
     * @return The method.
     */
    java.lang.String getMethod();
    /**
     * <pre>
     * Symbol naming the invoked method 
     * </pre>
     *
     * <code>string method = 4;</code>
     * @return The bytes for method.
     */
    com.google.protobuf.ByteString
        getMethodBytes();

    /**
     * <pre>
     * `true` if the method call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 5;</code>
     * @return Whether the isValidated field is set.
     */
    boolean hasIsValidated();
    /**
     * <pre>
     * `true` if the method call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 5;</code>
     * @return The isValidated.
     */
    boolean getIsValidated();
  }
  /**
   * <pre>
   * Node for an instance method call 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.InstanceCallNode}
   */
  public static final class InstanceCallNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.InstanceCallNode)
      InstanceCallNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstanceCallNode.newBuilder() to construct.
    private InstanceCallNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstanceCallNode() {
      args_ = java.util.Collections.emptyList();
      class__ = "";
      method_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstanceCallNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceCallNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              class__ = s;
              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (instance_ != null) {
                subBuilder = instance_.toBuilder();
              }
              instance_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(instance_);
                instance_ = subBuilder.buildPartial();
              }

              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              method_ = s;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              isValidated_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceCallNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceCallNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.InstanceCallNode.class, clojureRT.protobuf.Protobuf.InstanceCallNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args passed to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return Whether the class field is set.
     */
    @java.lang.Override
    public boolean hasClass_() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * If :validated? the class or interface the method belongs to 
     * </pre>
     *
     * <code>optional string class = 2;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INSTANCE_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node instance_;
    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     * @return Whether the instance field is set.
     */
    @java.lang.Override
    public boolean hasInstance() {
      return instance_ != null;
    }
    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     * @return The instance.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getInstance() {
      return instance_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
    }
    /**
     * <pre>
     * An AST node representing the instance to call the method on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder() {
      return getInstance();
    }

    public static final int METHOD_FIELD_NUMBER = 4;
    private volatile java.lang.Object method_;
    /**
     * <pre>
     * Symbol naming the invoked method 
     * </pre>
     *
     * <code>string method = 4;</code>
     * @return The method.
     */
    @java.lang.Override
    public java.lang.String getMethod() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        method_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Symbol naming the invoked method 
     * </pre>
     *
     * <code>string method = 4;</code>
     * @return The bytes for method.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMethodBytes() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        method_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ISVALIDATED_FIELD_NUMBER = 5;
    private boolean isValidated_;
    /**
     * <pre>
     * `true` if the method call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 5;</code>
     * @return Whether the isValidated field is set.
     */
    @java.lang.Override
    public boolean hasIsValidated() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * `true` if the method call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 5;</code>
     * @return The isValidated.
     */
    @java.lang.Override
    public boolean getIsValidated() {
      return isValidated_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, class__);
      }
      if (instance_ != null) {
        output.writeMessage(3, getInstance());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, method_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(5, isValidated_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, class__);
      }
      if (instance_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getInstance());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, method_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isValidated_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.InstanceCallNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.InstanceCallNode other = (clojureRT.protobuf.Protobuf.InstanceCallNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasClass_() != other.hasClass_()) return false;
      if (hasClass_()) {
        if (!getClass_()
            .equals(other.getClass_())) return false;
      }
      if (hasInstance() != other.hasInstance()) return false;
      if (hasInstance()) {
        if (!getInstance()
            .equals(other.getInstance())) return false;
      }
      if (!getMethod()
          .equals(other.getMethod())) return false;
      if (hasIsValidated() != other.hasIsValidated()) return false;
      if (hasIsValidated()) {
        if (getIsValidated()
            != other.getIsValidated()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasClass_()) {
        hash = (37 * hash) + CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getClass_().hashCode();
      }
      if (hasInstance()) {
        hash = (37 * hash) + INSTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getInstance().hashCode();
      }
      hash = (37 * hash) + METHOD_FIELD_NUMBER;
      hash = (53 * hash) + getMethod().hashCode();
      if (hasIsValidated()) {
        hash = (37 * hash) + ISVALIDATED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsValidated());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceCallNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.InstanceCallNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an instance method call 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.InstanceCallNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.InstanceCallNode)
        clojureRT.protobuf.Protobuf.InstanceCallNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceCallNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceCallNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.InstanceCallNode.class, clojureRT.protobuf.Protobuf.InstanceCallNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.InstanceCallNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        class__ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        if (instanceBuilder_ == null) {
          instance_ = null;
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }
        method_ = "";

        isValidated_ = false;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceCallNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceCallNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceCallNode build() {
        clojureRT.protobuf.Protobuf.InstanceCallNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceCallNode buildPartial() {
        clojureRT.protobuf.Protobuf.InstanceCallNode result = new clojureRT.protobuf.Protobuf.InstanceCallNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.class__ = class__;
        if (instanceBuilder_ == null) {
          result.instance_ = instance_;
        } else {
          result.instance_ = instanceBuilder_.build();
        }
        result.method_ = method_;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.isValidated_ = isValidated_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.InstanceCallNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.InstanceCallNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.InstanceCallNode other) {
        if (other == clojureRT.protobuf.Protobuf.InstanceCallNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasClass_()) {
          bitField0_ |= 0x00000002;
          class__ = other.class__;
          onChanged();
        }
        if (other.hasInstance()) {
          mergeInstance(other.getInstance());
        }
        if (!other.getMethod().isEmpty()) {
          method_ = other.method_;
          onChanged();
        }
        if (other.hasIsValidated()) {
          setIsValidated(other.getIsValidated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.InstanceCallNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.InstanceCallNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args passed to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @return Whether the class field is set.
       */
      public boolean hasClass_() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        bitField0_ = (bitField0_ & ~0x00000002);
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If :validated? the class or interface the method belongs to 
       * </pre>
       *
       * <code>optional string class = 2;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000002;
        class__ = value;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node instance_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> instanceBuilder_;
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       * @return Whether the instance field is set.
       */
      public boolean hasInstance() {
        return instanceBuilder_ != null || instance_ != null;
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       * @return The instance.
       */
      public clojureRT.protobuf.Protobuf.Node getInstance() {
        if (instanceBuilder_ == null) {
          return instance_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
        } else {
          return instanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public Builder setInstance(clojureRT.protobuf.Protobuf.Node value) {
        if (instanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          instance_ = value;
          onChanged();
        } else {
          instanceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public Builder setInstance(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (instanceBuilder_ == null) {
          instance_ = builderForValue.build();
          onChanged();
        } else {
          instanceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public Builder mergeInstance(clojureRT.protobuf.Protobuf.Node value) {
        if (instanceBuilder_ == null) {
          if (instance_ != null) {
            instance_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(instance_).mergeFrom(value).buildPartial();
          } else {
            instance_ = value;
          }
          onChanged();
        } else {
          instanceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public Builder clearInstance() {
        if (instanceBuilder_ == null) {
          instance_ = null;
          onChanged();
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getInstanceBuilder() {
        
        onChanged();
        return getInstanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder() {
        if (instanceBuilder_ != null) {
          return instanceBuilder_.getMessageOrBuilder();
        } else {
          return instance_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to call the method on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getInstanceFieldBuilder() {
        if (instanceBuilder_ == null) {
          instanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getInstance(),
                  getParentForChildren(),
                  isClean());
          instance_ = null;
        }
        return instanceBuilder_;
      }

      private java.lang.Object method_ = "";
      /**
       * <pre>
       * Symbol naming the invoked method 
       * </pre>
       *
       * <code>string method = 4;</code>
       * @return The method.
       */
      public java.lang.String getMethod() {
        java.lang.Object ref = method_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          method_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the invoked method 
       * </pre>
       *
       * <code>string method = 4;</code>
       * @return The bytes for method.
       */
      public com.google.protobuf.ByteString
          getMethodBytes() {
        java.lang.Object ref = method_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          method_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the invoked method 
       * </pre>
       *
       * <code>string method = 4;</code>
       * @param value The method to set.
       * @return This builder for chaining.
       */
      public Builder setMethod(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        method_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the invoked method 
       * </pre>
       *
       * <code>string method = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearMethod() {
        
        method_ = getDefaultInstance().getMethod();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the invoked method 
       * </pre>
       *
       * <code>string method = 4;</code>
       * @param value The bytes for method to set.
       * @return This builder for chaining.
       */
      public Builder setMethodBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        method_ = value;
        onChanged();
        return this;
      }

      private boolean isValidated_ ;
      /**
       * <pre>
       * `true` if the method call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 5;</code>
       * @return Whether the isValidated field is set.
       */
      @java.lang.Override
      public boolean hasIsValidated() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * `true` if the method call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 5;</code>
       * @return The isValidated.
       */
      @java.lang.Override
      public boolean getIsValidated() {
        return isValidated_;
      }
      /**
       * <pre>
       * `true` if the method call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 5;</code>
       * @param value The isValidated to set.
       * @return This builder for chaining.
       */
      public Builder setIsValidated(boolean value) {
        bitField0_ |= 0x00000004;
        isValidated_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the method call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsValidated() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isValidated_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.InstanceCallNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.InstanceCallNode)
    private static final clojureRT.protobuf.Protobuf.InstanceCallNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.InstanceCallNode();
    }

    public static clojureRT.protobuf.Protobuf.InstanceCallNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstanceCallNode>
        PARSER = new com.google.protobuf.AbstractParser<InstanceCallNode>() {
      @java.lang.Override
      public InstanceCallNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceCallNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstanceCallNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceCallNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceCallNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InstanceFieldNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.InstanceFieldNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` if the field is set!able 
     * </pre>
     *
     * <code>bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    boolean getIsAssignable();

    /**
     * <pre>
     * The class the field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * The class the field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();

    /**
     * <pre>
     * Symbol naming the field to access 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The field.
     */
    java.lang.String getField();
    /**
     * <pre>
     * Symbol naming the field to access 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The bytes for field.
     */
    com.google.protobuf.ByteString
        getFieldBytes();

    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     * @return Whether the instance field is set.
     */
    boolean hasInstance();
    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     * @return The instance.
     */
    clojureRT.protobuf.Protobuf.Node getInstance();
    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder();
  }
  /**
   * <pre>
   * Node for an instance field access 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.InstanceFieldNode}
   */
  public static final class InstanceFieldNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.InstanceFieldNode)
      InstanceFieldNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InstanceFieldNode.newBuilder() to construct.
    private InstanceFieldNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InstanceFieldNode() {
      class__ = "";
      field_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InstanceFieldNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InstanceFieldNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {

              isAssignable_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              class__ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              field_ = s;
              break;
            }
            case 34: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (instance_ != null) {
                subBuilder = instance_.toBuilder();
              }
              instance_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(instance_);
                instance_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceFieldNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.InstanceFieldNode.class, clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder.class);
    }

    public static final int ISASSIGNABLE_FIELD_NUMBER = 1;
    private boolean isAssignable_;
    /**
     * <pre>
     * `true` if the field is set!able 
     * </pre>
     *
     * <code>bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    @java.lang.Override
    public boolean getIsAssignable() {
      return isAssignable_;
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * The class the field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The class the field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIELD_FIELD_NUMBER = 3;
    private volatile java.lang.Object field_;
    /**
     * <pre>
     * Symbol naming the field to access 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The field.
     */
    @java.lang.Override
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        field_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Symbol naming the field to access 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The bytes for field.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INSTANCE_FIELD_NUMBER = 4;
    private clojureRT.protobuf.Protobuf.Node instance_;
    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     * @return Whether the instance field is set.
     */
    @java.lang.Override
    public boolean hasInstance() {
      return instance_ != null;
    }
    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     * @return The instance.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getInstance() {
      return instance_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
    }
    /**
     * <pre>
     * An AST node representing the instance to lookup the symbol on 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node instance = 4;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder() {
      return getInstance();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (isAssignable_ != false) {
        output.writeBool(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, field_);
      }
      if (instance_ != null) {
        output.writeMessage(4, getInstance());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (isAssignable_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, field_);
      }
      if (instance_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getInstance());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.InstanceFieldNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.InstanceFieldNode other = (clojureRT.protobuf.Protobuf.InstanceFieldNode) obj;

      if (getIsAssignable()
          != other.getIsAssignable()) return false;
      if (!getClass_()
          .equals(other.getClass_())) return false;
      if (!getField()
          .equals(other.getField())) return false;
      if (hasInstance() != other.hasInstance()) return false;
      if (hasInstance()) {
        if (!getInstance()
            .equals(other.getInstance())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ISASSIGNABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsAssignable());
      hash = (37 * hash) + CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getClass_().hashCode();
      hash = (37 * hash) + FIELD_FIELD_NUMBER;
      hash = (53 * hash) + getField().hashCode();
      if (hasInstance()) {
        hash = (37 * hash) + INSTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getInstance().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InstanceFieldNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.InstanceFieldNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an instance field access 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.InstanceFieldNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.InstanceFieldNode)
        clojureRT.protobuf.Protobuf.InstanceFieldNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceFieldNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.InstanceFieldNode.class, clojureRT.protobuf.Protobuf.InstanceFieldNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.InstanceFieldNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isAssignable_ = false;

        class__ = "";

        field_ = "";

        if (instanceBuilder_ == null) {
          instance_ = null;
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceFieldNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceFieldNode build() {
        clojureRT.protobuf.Protobuf.InstanceFieldNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InstanceFieldNode buildPartial() {
        clojureRT.protobuf.Protobuf.InstanceFieldNode result = new clojureRT.protobuf.Protobuf.InstanceFieldNode(this);
        result.isAssignable_ = isAssignable_;
        result.class__ = class__;
        result.field_ = field_;
        if (instanceBuilder_ == null) {
          result.instance_ = instance_;
        } else {
          result.instance_ = instanceBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.InstanceFieldNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.InstanceFieldNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.InstanceFieldNode other) {
        if (other == clojureRT.protobuf.Protobuf.InstanceFieldNode.getDefaultInstance()) return this;
        if (other.getIsAssignable() != false) {
          setIsAssignable(other.getIsAssignable());
        }
        if (!other.getClass_().isEmpty()) {
          class__ = other.class__;
          onChanged();
        }
        if (!other.getField().isEmpty()) {
          field_ = other.field_;
          onChanged();
        }
        if (other.hasInstance()) {
          mergeInstance(other.getInstance());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.InstanceFieldNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.InstanceFieldNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private boolean isAssignable_ ;
      /**
       * <pre>
       * `true` if the field is set!able 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @return The isAssignable.
       */
      @java.lang.Override
      public boolean getIsAssignable() {
        return isAssignable_;
      }
      /**
       * <pre>
       * `true` if the field is set!able 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @param value The isAssignable to set.
       * @return This builder for chaining.
       */
      public Builder setIsAssignable(boolean value) {
        
        isAssignable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the field is set!able 
       * </pre>
       *
       * <code>bool isAssignable = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsAssignable() {
        
        isAssignable_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * The class the field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The class the field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The class the field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The class the field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The class the field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        class__ = value;
        onChanged();
        return this;
      }

      private java.lang.Object field_ = "";
      /**
       * <pre>
       * Symbol naming the field to access 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return The field.
       */
      public java.lang.String getField() {
        java.lang.Object ref = field_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          field_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the field to access 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return The bytes for field.
       */
      public com.google.protobuf.ByteString
          getFieldBytes() {
        java.lang.Object ref = field_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          field_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Symbol naming the field to access 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @param value The field to set.
       * @return This builder for chaining.
       */
      public Builder setField(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        field_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the field to access 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearField() {
        
        field_ = getDefaultInstance().getField();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Symbol naming the field to access 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @param value The bytes for field to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        field_ = value;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node instance_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> instanceBuilder_;
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       * @return Whether the instance field is set.
       */
      public boolean hasInstance() {
        return instanceBuilder_ != null || instance_ != null;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       * @return The instance.
       */
      public clojureRT.protobuf.Protobuf.Node getInstance() {
        if (instanceBuilder_ == null) {
          return instance_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
        } else {
          return instanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public Builder setInstance(clojureRT.protobuf.Protobuf.Node value) {
        if (instanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          instance_ = value;
          onChanged();
        } else {
          instanceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public Builder setInstance(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (instanceBuilder_ == null) {
          instance_ = builderForValue.build();
          onChanged();
        } else {
          instanceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public Builder mergeInstance(clojureRT.protobuf.Protobuf.Node value) {
        if (instanceBuilder_ == null) {
          if (instance_ != null) {
            instance_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(instance_).mergeFrom(value).buildPartial();
          } else {
            instance_ = value;
          }
          onChanged();
        } else {
          instanceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public Builder clearInstance() {
        if (instanceBuilder_ == null) {
          instance_ = null;
          onChanged();
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getInstanceBuilder() {
        
        onChanged();
        return getInstanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getInstanceOrBuilder() {
        if (instanceBuilder_ != null) {
          return instanceBuilder_.getMessageOrBuilder();
        } else {
          return instance_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : instance_;
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the symbol on 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node instance = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getInstanceFieldBuilder() {
        if (instanceBuilder_ == null) {
          instanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getInstance(),
                  getParentForChildren(),
                  isClean());
          instance_ = null;
        }
        return instanceBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.InstanceFieldNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.InstanceFieldNode)
    private static final clojureRT.protobuf.Protobuf.InstanceFieldNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.InstanceFieldNode();
    }

    public static clojureRT.protobuf.Protobuf.InstanceFieldNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InstanceFieldNode>
        PARSER = new com.google.protobuf.AbstractParser<InstanceFieldNode>() {
      @java.lang.Override
      public InstanceFieldNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InstanceFieldNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InstanceFieldNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InstanceFieldNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InstanceFieldNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface IsInstanceNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.IsInstanceNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The Class to test the :target for instanceability 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * The Class to test the :target for instanceability 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();

    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for a clojure.core/instance? call where the Class is known at compile time 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.IsInstanceNode}
   */
  public static final class IsInstanceNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.IsInstanceNode)
      IsInstanceNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use IsInstanceNode.newBuilder() to construct.
    private IsInstanceNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private IsInstanceNode() {
      class__ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new IsInstanceNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private IsInstanceNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              class__ = s;
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IsInstanceNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IsInstanceNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.IsInstanceNode.class, clojureRT.protobuf.Protobuf.IsInstanceNode.Builder.class);
    }

    public static final int CLASS_FIELD_NUMBER = 1;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * The Class to test the :target for instanceability 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Class to test the :target for instanceability 
     * </pre>
     *
     * <code>string class = 1;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TARGET_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the object to test for instanceability 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, class__);
      }
      if (target_ != null) {
        output.writeMessage(2, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, class__);
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.IsInstanceNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.IsInstanceNode other = (clojureRT.protobuf.Protobuf.IsInstanceNode) obj;

      if (!getClass_()
          .equals(other.getClass_())) return false;
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getClass_().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.IsInstanceNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.IsInstanceNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a clojure.core/instance? call where the Class is known at compile time 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.IsInstanceNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.IsInstanceNode)
        clojureRT.protobuf.Protobuf.IsInstanceNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IsInstanceNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IsInstanceNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.IsInstanceNode.class, clojureRT.protobuf.Protobuf.IsInstanceNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.IsInstanceNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        class__ = "";

        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_IsInstanceNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IsInstanceNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IsInstanceNode build() {
        clojureRT.protobuf.Protobuf.IsInstanceNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.IsInstanceNode buildPartial() {
        clojureRT.protobuf.Protobuf.IsInstanceNode result = new clojureRT.protobuf.Protobuf.IsInstanceNode(this);
        result.class__ = class__;
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.IsInstanceNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.IsInstanceNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.IsInstanceNode other) {
        if (other == clojureRT.protobuf.Protobuf.IsInstanceNode.getDefaultInstance()) return this;
        if (!other.getClass_().isEmpty()) {
          class__ = other.class__;
          onChanged();
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.IsInstanceNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.IsInstanceNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * The Class to test the :target for instanceability 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Class to test the :target for instanceability 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Class to test the :target for instanceability 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class to test the :target for instanceability 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class to test the :target for instanceability 
       * </pre>
       *
       * <code>string class = 1;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        class__ = value;
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the object to test for instanceability 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.IsInstanceNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.IsInstanceNode)
    private static final clojureRT.protobuf.Protobuf.IsInstanceNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.IsInstanceNode();
    }

    public static clojureRT.protobuf.Protobuf.IsInstanceNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<IsInstanceNode>
        PARSER = new com.google.protobuf.AbstractParser<IsInstanceNode>() {
      @java.lang.Override
      public IsInstanceNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new IsInstanceNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<IsInstanceNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<IsInstanceNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.IsInstanceNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface InvokeNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.InvokeNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return Whether the fn field is set.
     */
    boolean hasFn();
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return The fn.
     */
    clojureRT.protobuf.Protobuf.Node getFn();
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder();

    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return Whether the meta field is set.
     */
    boolean hasMeta();
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The meta.
     */
    java.lang.String getMeta();
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The bytes for meta.
     */
    com.google.protobuf.ByteString
        getMetaBytes();
  }
  /**
   * <pre>
   * Node for an invoke expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.InvokeNode}
   */
  public static final class InvokeNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.InvokeNode)
      InvokeNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use InvokeNode.newBuilder() to construct.
    private InvokeNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private InvokeNode() {
      args_ = java.util.Collections.emptyList();
      meta_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new InvokeNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private InvokeNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (fn_ != null) {
                subBuilder = fn_.toBuilder();
              }
              fn_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fn_);
                fn_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              meta_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InvokeNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InvokeNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.InvokeNode.class, clojureRT.protobuf.Protobuf.InvokeNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int FN_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node fn_;
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return Whether the fn field is set.
     */
    @java.lang.Override
    public boolean hasFn() {
      return fn_ != null;
    }
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return The fn.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getFn() {
      return fn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
    }
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder() {
      return getFn();
    }

    public static final int META_FIELD_NUMBER = 3;
    private volatile java.lang.Object meta_;
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return Whether the meta field is set.
     */
    @java.lang.Override
    public boolean hasMeta() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The meta.
     */
    @java.lang.Override
    public java.lang.String getMeta() {
      java.lang.Object ref = meta_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        meta_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The bytes for meta.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMetaBytes() {
      java.lang.Object ref = meta_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meta_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (fn_ != null) {
        output.writeMessage(2, getFn());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, meta_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (fn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFn());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, meta_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.InvokeNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.InvokeNode other = (clojureRT.protobuf.Protobuf.InvokeNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasFn() != other.hasFn()) return false;
      if (hasFn()) {
        if (!getFn()
            .equals(other.getFn())) return false;
      }
      if (hasMeta() != other.hasMeta()) return false;
      if (hasMeta()) {
        if (!getMeta()
            .equals(other.getMeta())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasFn()) {
        hash = (37 * hash) + FN_FIELD_NUMBER;
        hash = (53 * hash) + getFn().hashCode();
      }
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.InvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.InvokeNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an invoke expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.InvokeNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.InvokeNode)
        clojureRT.protobuf.Protobuf.InvokeNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InvokeNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InvokeNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.InvokeNode.class, clojureRT.protobuf.Protobuf.InvokeNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.InvokeNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        if (fnBuilder_ == null) {
          fn_ = null;
        } else {
          fn_ = null;
          fnBuilder_ = null;
        }
        meta_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_InvokeNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InvokeNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InvokeNode build() {
        clojureRT.protobuf.Protobuf.InvokeNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.InvokeNode buildPartial() {
        clojureRT.protobuf.Protobuf.InvokeNode result = new clojureRT.protobuf.Protobuf.InvokeNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (fnBuilder_ == null) {
          result.fn_ = fn_;
        } else {
          result.fn_ = fnBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.meta_ = meta_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.InvokeNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.InvokeNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.InvokeNode other) {
        if (other == clojureRT.protobuf.Protobuf.InvokeNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasFn()) {
          mergeFn(other.getFn());
        }
        if (other.hasMeta()) {
          bitField0_ |= 0x00000002;
          meta_ = other.meta_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.InvokeNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.InvokeNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node fn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> fnBuilder_;
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       * @return Whether the fn field is set.
       */
      public boolean hasFn() {
        return fnBuilder_ != null || fn_ != null;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       * @return The fn.
       */
      public clojureRT.protobuf.Protobuf.Node getFn() {
        if (fnBuilder_ == null) {
          return fn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
        } else {
          return fnBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder setFn(clojureRT.protobuf.Protobuf.Node value) {
        if (fnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fn_ = value;
          onChanged();
        } else {
          fnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder setFn(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (fnBuilder_ == null) {
          fn_ = builderForValue.build();
          onChanged();
        } else {
          fnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder mergeFn(clojureRT.protobuf.Protobuf.Node value) {
        if (fnBuilder_ == null) {
          if (fn_ != null) {
            fn_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(fn_).mergeFrom(value).buildPartial();
          } else {
            fn_ = value;
          }
          onChanged();
        } else {
          fnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder clearFn() {
        if (fnBuilder_ == null) {
          fn_ = null;
          onChanged();
        } else {
          fn_ = null;
          fnBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getFnBuilder() {
        
        onChanged();
        return getFnFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder() {
        if (fnBuilder_ != null) {
          return fnBuilder_.getMessageOrBuilder();
        } else {
          return fn_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
        }
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getFnFieldBuilder() {
        if (fnBuilder_ == null) {
          fnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getFn(),
                  getParentForChildren(),
                  isClean());
          fn_ = null;
        }
        return fnBuilder_;
      }

      private java.lang.Object meta_ = "";
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return Whether the meta field is set.
       */
      public boolean hasMeta() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return The meta.
       */
      public java.lang.String getMeta() {
        java.lang.Object ref = meta_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          meta_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return The bytes for meta.
       */
      public com.google.protobuf.ByteString
          getMetaBytes() {
        java.lang.Object ref = meta_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meta_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @param value The meta to set.
       * @return This builder for chaining.
       */
      public Builder setMeta(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        meta_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeta() {
        bitField0_ = (bitField0_ & ~0x00000002);
        meta_ = getDefaultInstance().getMeta();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @param value The bytes for meta to set.
       * @return This builder for chaining.
       */
      public Builder setMetaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000002;
        meta_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.InvokeNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.InvokeNode)
    private static final clojureRT.protobuf.Protobuf.InvokeNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.InvokeNode();
    }

    public static clojureRT.protobuf.Protobuf.InvokeNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<InvokeNode>
        PARSER = new com.google.protobuf.AbstractParser<InvokeNode>() {
      @java.lang.Override
      public InvokeNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new InvokeNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<InvokeNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<InvokeNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.InvokeNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface KeywordInvokeNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.KeywordInvokeNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     * @return Whether the keyword field is set.
     */
    boolean hasKeyword();
    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     * @return The keyword.
     */
    clojureRT.protobuf.Protobuf.Node getKeyword();
    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getKeywordOrBuilder();

    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for an invoke expression where the fn is a not-namespaced keyword and thus a keyword callsite can be emitted 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.KeywordInvokeNode}
   */
  public static final class KeywordInvokeNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.KeywordInvokeNode)
      KeywordInvokeNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use KeywordInvokeNode.newBuilder() to construct.
    private KeywordInvokeNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private KeywordInvokeNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new KeywordInvokeNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private KeywordInvokeNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (keyword_ != null) {
                subBuilder = keyword_.toBuilder();
              }
              keyword_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(keyword_);
                keyword_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_KeywordInvokeNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.KeywordInvokeNode.class, clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder.class);
    }

    public static final int KEYWORD_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node keyword_;
    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     * @return Whether the keyword field is set.
     */
    @java.lang.Override
    public boolean hasKeyword() {
      return keyword_ != null;
    }
    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     * @return The keyword.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getKeyword() {
      return keyword_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : keyword_;
    }
    /**
     * <pre>
     * An AST node representing the keyword to lookup in the instance 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node keyword = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getKeywordOrBuilder() {
      return getKeyword();
    }

    public static final int TARGET_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the instance to lookup the keyword in 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (keyword_ != null) {
        output.writeMessage(1, getKeyword());
      }
      if (target_ != null) {
        output.writeMessage(2, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (keyword_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getKeyword());
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.KeywordInvokeNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.KeywordInvokeNode other = (clojureRT.protobuf.Protobuf.KeywordInvokeNode) obj;

      if (hasKeyword() != other.hasKeyword()) return false;
      if (hasKeyword()) {
        if (!getKeyword()
            .equals(other.getKeyword())) return false;
      }
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasKeyword()) {
        hash = (37 * hash) + KEYWORD_FIELD_NUMBER;
        hash = (53 * hash) + getKeyword().hashCode();
      }
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.KeywordInvokeNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an invoke expression where the fn is a not-namespaced keyword and thus a keyword callsite can be emitted 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.KeywordInvokeNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.KeywordInvokeNode)
        clojureRT.protobuf.Protobuf.KeywordInvokeNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_KeywordInvokeNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.KeywordInvokeNode.class, clojureRT.protobuf.Protobuf.KeywordInvokeNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.KeywordInvokeNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (keywordBuilder_ == null) {
          keyword_ = null;
        } else {
          keyword_ = null;
          keywordBuilder_ = null;
        }
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.KeywordInvokeNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.KeywordInvokeNode build() {
        clojureRT.protobuf.Protobuf.KeywordInvokeNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.KeywordInvokeNode buildPartial() {
        clojureRT.protobuf.Protobuf.KeywordInvokeNode result = new clojureRT.protobuf.Protobuf.KeywordInvokeNode(this);
        if (keywordBuilder_ == null) {
          result.keyword_ = keyword_;
        } else {
          result.keyword_ = keywordBuilder_.build();
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.KeywordInvokeNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.KeywordInvokeNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.KeywordInvokeNode other) {
        if (other == clojureRT.protobuf.Protobuf.KeywordInvokeNode.getDefaultInstance()) return this;
        if (other.hasKeyword()) {
          mergeKeyword(other.getKeyword());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.KeywordInvokeNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.KeywordInvokeNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node keyword_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> keywordBuilder_;
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       * @return Whether the keyword field is set.
       */
      public boolean hasKeyword() {
        return keywordBuilder_ != null || keyword_ != null;
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       * @return The keyword.
       */
      public clojureRT.protobuf.Protobuf.Node getKeyword() {
        if (keywordBuilder_ == null) {
          return keyword_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : keyword_;
        } else {
          return keywordBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public Builder setKeyword(clojureRT.protobuf.Protobuf.Node value) {
        if (keywordBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          keyword_ = value;
          onChanged();
        } else {
          keywordBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public Builder setKeyword(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (keywordBuilder_ == null) {
          keyword_ = builderForValue.build();
          onChanged();
        } else {
          keywordBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public Builder mergeKeyword(clojureRT.protobuf.Protobuf.Node value) {
        if (keywordBuilder_ == null) {
          if (keyword_ != null) {
            keyword_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(keyword_).mergeFrom(value).buildPartial();
          } else {
            keyword_ = value;
          }
          onChanged();
        } else {
          keywordBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public Builder clearKeyword() {
        if (keywordBuilder_ == null) {
          keyword_ = null;
          onChanged();
        } else {
          keyword_ = null;
          keywordBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getKeywordBuilder() {
        
        onChanged();
        return getKeywordFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getKeywordOrBuilder() {
        if (keywordBuilder_ != null) {
          return keywordBuilder_.getMessageOrBuilder();
        } else {
          return keyword_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : keyword_;
        }
      }
      /**
       * <pre>
       * An AST node representing the keyword to lookup in the instance 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node keyword = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getKeywordFieldBuilder() {
        if (keywordBuilder_ == null) {
          keywordBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getKeyword(),
                  getParentForChildren(),
                  isClean());
          keyword_ = null;
        }
        return keywordBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the instance to lookup the keyword in 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.KeywordInvokeNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.KeywordInvokeNode)
    private static final clojureRT.protobuf.Protobuf.KeywordInvokeNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.KeywordInvokeNode();
    }

    public static clojureRT.protobuf.Protobuf.KeywordInvokeNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<KeywordInvokeNode>
        PARSER = new com.google.protobuf.AbstractParser<KeywordInvokeNode>() {
      @java.lang.Override
      public KeywordInvokeNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new KeywordInvokeNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<KeywordInvokeNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<KeywordInvokeNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.KeywordInvokeNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LetNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.LetNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getBindingsList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getBindings(int index);
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    int getBindingsCount();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index);

    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();
  }
  /**
   * <pre>
   * Node for a let* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.LetNode}
   */
  public static final class LetNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.LetNode)
      LetNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LetNode.newBuilder() to construct.
    private LetNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LetNode() {
      bindings_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LetNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LetNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              bindings_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          bindings_ = java.util.Collections.unmodifiableList(bindings_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.LetNode.class, clojureRT.protobuf.Protobuf.LetNode.Builder.class);
    }

    public static final int BINDINGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_;
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public int getBindingsCount() {
      return bindings_.size();
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
      return bindings_.get(index);
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :let 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index) {
      return bindings_.get(index);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the let expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < bindings_.size(); i++) {
        output.writeMessage(1, bindings_.get(i));
      }
      if (body_ != null) {
        output.writeMessage(2, getBody());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < bindings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, bindings_.get(i));
      }
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.LetNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.LetNode other = (clojureRT.protobuf.Protobuf.LetNode) obj;

      if (!getBindingsList()
          .equals(other.getBindingsList())) return false;
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBindingsCount() > 0) {
        hash = (37 * hash) + BINDINGS_FIELD_NUMBER;
        hash = (53 * hash) + getBindingsList().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.LetNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a let* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.LetNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.LetNode)
        clojureRT.protobuf.Protobuf.LetNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.LetNode.class, clojureRT.protobuf.Protobuf.LetNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.LetNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBindingsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          bindingsBuilder_.clear();
        }
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetNode build() {
        clojureRT.protobuf.Protobuf.LetNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetNode buildPartial() {
        clojureRT.protobuf.Protobuf.LetNode result = new clojureRT.protobuf.Protobuf.LetNode(this);
        int from_bitField0_ = bitField0_;
        if (bindingsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            bindings_ = java.util.Collections.unmodifiableList(bindings_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.bindings_ = bindings_;
        } else {
          result.bindings_ = bindingsBuilder_.build();
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.LetNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.LetNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.LetNode other) {
        if (other == clojureRT.protobuf.Protobuf.LetNode.getDefaultInstance()) return this;
        if (bindingsBuilder_ == null) {
          if (!other.bindings_.isEmpty()) {
            if (bindings_.isEmpty()) {
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBindingsIsMutable();
              bindings_.addAll(other.bindings_);
            }
            onChanged();
          }
        } else {
          if (!other.bindings_.isEmpty()) {
            if (bindingsBuilder_.isEmpty()) {
              bindingsBuilder_.dispose();
              bindingsBuilder_ = null;
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
              bindingsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBindingsFieldBuilder() : null;
            } else {
              bindingsBuilder_.addAllMessages(other.bindings_);
            }
          }
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.LetNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.LetNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_ =
        java.util.Collections.emptyList();
      private void ensureBindingsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(bindings_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bindingsBuilder_;

      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
        if (bindingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bindings_);
        } else {
          return bindingsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public int getBindingsCount() {
        if (bindingsBuilder_ == null) {
          return bindings_.size();
        } else {
          return bindingsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);
        } else {
          return bindingsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.set(index, value);
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.set(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(index, value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addAllBindings(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bindings_);
          onChanged();
        } else {
          bindingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder clearBindings() {
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          bindingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder removeBindings(int index) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.remove(index);
          onChanged();
        } else {
          bindingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
          int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);  } else {
          return bindingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getBindingsOrBuilderList() {
        if (bindingsBuilder_ != null) {
          return bindingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bindings_);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder() {
        return getBindingsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :let 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getBindingsBuilderList() {
        return getBindingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBindingsFieldBuilder() {
        if (bindingsBuilder_ == null) {
          bindingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  bindings_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          bindings_ = null;
        }
        return bindingsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the let expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.LetNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.LetNode)
    private static final clojureRT.protobuf.Protobuf.LetNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.LetNode();
    }

    public static clojureRT.protobuf.Protobuf.LetNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LetNode>
        PARSER = new com.google.protobuf.AbstractParser<LetNode>() {
      @java.lang.Override
      public LetNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LetNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LetNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LetNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LetfnNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.LetfnNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getBindingsList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getBindings(int index);
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    int getBindingsCount();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index);

    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();
  }
  /**
   * <pre>
   * Node for a letfn* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.LetfnNode}
   */
  public static final class LetfnNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.LetfnNode)
      LetfnNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LetfnNode.newBuilder() to construct.
    private LetfnNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LetfnNode() {
      bindings_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LetfnNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LetfnNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              bindings_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          bindings_ = java.util.Collections.unmodifiableList(bindings_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetfnNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetfnNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.LetfnNode.class, clojureRT.protobuf.Protobuf.LetfnNode.Builder.class);
    }

    public static final int BINDINGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_;
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public int getBindingsCount() {
      return bindings_.size();
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
      return bindings_.get(index);
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :letfn 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index) {
      return bindings_.get(index);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < bindings_.size(); i++) {
        output.writeMessage(1, bindings_.get(i));
      }
      if (body_ != null) {
        output.writeMessage(2, getBody());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < bindings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, bindings_.get(i));
      }
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.LetfnNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.LetfnNode other = (clojureRT.protobuf.Protobuf.LetfnNode) obj;

      if (!getBindingsList()
          .equals(other.getBindingsList())) return false;
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBindingsCount() > 0) {
        hash = (37 * hash) + BINDINGS_FIELD_NUMBER;
        hash = (53 * hash) + getBindingsList().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LetfnNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.LetfnNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a letfn* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.LetfnNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.LetfnNode)
        clojureRT.protobuf.Protobuf.LetfnNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetfnNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetfnNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.LetfnNode.class, clojureRT.protobuf.Protobuf.LetfnNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.LetfnNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBindingsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          bindingsBuilder_.clear();
        }
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LetfnNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetfnNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetfnNode build() {
        clojureRT.protobuf.Protobuf.LetfnNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LetfnNode buildPartial() {
        clojureRT.protobuf.Protobuf.LetfnNode result = new clojureRT.protobuf.Protobuf.LetfnNode(this);
        int from_bitField0_ = bitField0_;
        if (bindingsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            bindings_ = java.util.Collections.unmodifiableList(bindings_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.bindings_ = bindings_;
        } else {
          result.bindings_ = bindingsBuilder_.build();
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.LetfnNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.LetfnNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.LetfnNode other) {
        if (other == clojureRT.protobuf.Protobuf.LetfnNode.getDefaultInstance()) return this;
        if (bindingsBuilder_ == null) {
          if (!other.bindings_.isEmpty()) {
            if (bindings_.isEmpty()) {
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBindingsIsMutable();
              bindings_.addAll(other.bindings_);
            }
            onChanged();
          }
        } else {
          if (!other.bindings_.isEmpty()) {
            if (bindingsBuilder_.isEmpty()) {
              bindingsBuilder_.dispose();
              bindingsBuilder_ = null;
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
              bindingsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBindingsFieldBuilder() : null;
            } else {
              bindingsBuilder_.addAllMessages(other.bindings_);
            }
          }
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.LetfnNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.LetfnNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_ =
        java.util.Collections.emptyList();
      private void ensureBindingsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(bindings_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bindingsBuilder_;

      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
        if (bindingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bindings_);
        } else {
          return bindingsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public int getBindingsCount() {
        if (bindingsBuilder_ == null) {
          return bindings_.size();
        } else {
          return bindingsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);
        } else {
          return bindingsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.set(index, value);
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.set(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(index, value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addAllBindings(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bindings_);
          onChanged();
        } else {
          bindingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder clearBindings() {
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          bindingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder removeBindings(int index) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.remove(index);
          onChanged();
        } else {
          bindingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
          int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);  } else {
          return bindingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getBindingsOrBuilderList() {
        if (bindingsBuilder_ != null) {
          return bindingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bindings_);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder() {
        return getBindingsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :letfn 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getBindingsBuilderList() {
        return getBindingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBindingsFieldBuilder() {
        if (bindingsBuilder_ == null) {
          bindingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  bindings_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          bindings_ = null;
        }
        return bindingsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the letfn expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.LetfnNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.LetfnNode)
    private static final clojureRT.protobuf.Protobuf.LetfnNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.LetfnNode();
    }

    public static clojureRT.protobuf.Protobuf.LetfnNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LetfnNode>
        PARSER = new com.google.protobuf.AbstractParser<LetfnNode>() {
      @java.lang.Override
      public LetfnNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LetfnNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LetfnNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LetfnNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LetfnNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LocalNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.LocalNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return Whether the argId field is set.
     */
    boolean hasArgId();
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return The argId.
     */
    int getArgId();

    /**
     * <pre>
     * `true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable 
     * </pre>
     *
     * <code>bool isAssignable = 2;</code>
     * @return The isAssignable.
     */
    boolean getIsAssignable();

    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The enum numeric value on the wire for local.
     */
    int getLocalValue();
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The local.
     */
    clojureRT.protobuf.Protobuf.LocalType getLocal();

    /**
     * <pre>
     * The uniquified local symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The uniquified local symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return Whether the isVariadic field is set.
     */
    boolean hasIsVariadic();
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    boolean getIsVariadic();
  }
  /**
   * <pre>
   * Node for a local symbol 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.LocalNode}
   */
  public static final class LocalNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.LocalNode)
      LocalNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LocalNode.newBuilder() to construct.
    private LocalNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LocalNode() {
      local_ = 0;
      name_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LocalNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LocalNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              argId_ = input.readUInt32();
              break;
            }
            case 16: {

              isAssignable_ = input.readBool();
              break;
            }
            case 24: {
              int rawValue = input.readEnum();

              local_ = rawValue;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000002;
              isVariadic_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LocalNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LocalNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.LocalNode.class, clojureRT.protobuf.Protobuf.LocalNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGID_FIELD_NUMBER = 1;
    private int argId_;
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return Whether the argId field is set.
     */
    @java.lang.Override
    public boolean hasArgId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * When :local is :arg, the parameter index 
     * </pre>
     *
     * <code>optional uint32 argId = 1;</code>
     * @return The argId.
     */
    @java.lang.Override
    public int getArgId() {
      return argId_;
    }

    public static final int ISASSIGNABLE_FIELD_NUMBER = 2;
    private boolean isAssignable_;
    /**
     * <pre>
     * `true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable 
     * </pre>
     *
     * <code>bool isAssignable = 2;</code>
     * @return The isAssignable.
     */
    @java.lang.Override
    public boolean getIsAssignable() {
      return isAssignable_;
    }

    public static final int LOCAL_FIELD_NUMBER = 3;
    private int local_;
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The enum numeric value on the wire for local.
     */
    @java.lang.Override public int getLocalValue() {
      return local_;
    }
    /**
     * <pre>
     * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
     * </pre>
     *
     * <code>.clojureRT.protobuf.LocalType local = 3;</code>
     * @return The local.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.LocalType getLocal() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.LocalType result = clojureRT.protobuf.Protobuf.LocalType.valueOf(local_);
      return result == null ? clojureRT.protobuf.Protobuf.LocalType.UNRECOGNIZED : result;
    }

    public static final int NAME_FIELD_NUMBER = 4;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The uniquified local symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The uniquified local symbol 
     * </pre>
     *
     * <code>string name = 4;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ISVARIADIC_FIELD_NUMBER = 5;
    private boolean isVariadic_;
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return Whether the isVariadic field is set.
     */
    @java.lang.Override
    public boolean hasIsVariadic() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
     * </pre>
     *
     * <code>optional bool isVariadic = 5;</code>
     * @return The isVariadic.
     */
    @java.lang.Override
    public boolean getIsVariadic() {
      return isVariadic_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeUInt32(1, argId_);
      }
      if (isAssignable_ != false) {
        output.writeBool(2, isAssignable_);
      }
      if (local_ != clojureRT.protobuf.Protobuf.LocalType.localTypeArg.getNumber()) {
        output.writeEnum(3, local_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(5, isVariadic_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, argId_);
      }
      if (isAssignable_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isAssignable_);
      }
      if (local_ != clojureRT.protobuf.Protobuf.LocalType.localTypeArg.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, local_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, name_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, isVariadic_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.LocalNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.LocalNode other = (clojureRT.protobuf.Protobuf.LocalNode) obj;

      if (hasArgId() != other.hasArgId()) return false;
      if (hasArgId()) {
        if (getArgId()
            != other.getArgId()) return false;
      }
      if (getIsAssignable()
          != other.getIsAssignable()) return false;
      if (local_ != other.local_) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (hasIsVariadic() != other.hasIsVariadic()) return false;
      if (hasIsVariadic()) {
        if (getIsVariadic()
            != other.getIsVariadic()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasArgId()) {
        hash = (37 * hash) + ARGID_FIELD_NUMBER;
        hash = (53 * hash) + getArgId();
      }
      hash = (37 * hash) + ISASSIGNABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsAssignable());
      hash = (37 * hash) + LOCAL_FIELD_NUMBER;
      hash = (53 * hash) + local_;
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (hasIsVariadic()) {
        hash = (37 * hash) + ISVARIADIC_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsVariadic());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LocalNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.LocalNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a local symbol 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.LocalNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.LocalNode)
        clojureRT.protobuf.Protobuf.LocalNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LocalNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LocalNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.LocalNode.class, clojureRT.protobuf.Protobuf.LocalNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.LocalNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        argId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        isAssignable_ = false;

        local_ = 0;

        name_ = "";

        isVariadic_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LocalNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalNode build() {
        clojureRT.protobuf.Protobuf.LocalNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalNode buildPartial() {
        clojureRT.protobuf.Protobuf.LocalNode result = new clojureRT.protobuf.Protobuf.LocalNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.argId_ = argId_;
          to_bitField0_ |= 0x00000001;
        }
        result.isAssignable_ = isAssignable_;
        result.local_ = local_;
        result.name_ = name_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.isVariadic_ = isVariadic_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.LocalNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.LocalNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.LocalNode other) {
        if (other == clojureRT.protobuf.Protobuf.LocalNode.getDefaultInstance()) return this;
        if (other.hasArgId()) {
          setArgId(other.getArgId());
        }
        if (other.getIsAssignable() != false) {
          setIsAssignable(other.getIsAssignable());
        }
        if (other.local_ != 0) {
          setLocalValue(other.getLocalValue());
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (other.hasIsVariadic()) {
          setIsVariadic(other.getIsVariadic());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.LocalNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.LocalNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int argId_ ;
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return Whether the argId field is set.
       */
      @java.lang.Override
      public boolean hasArgId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return The argId.
       */
      @java.lang.Override
      public int getArgId() {
        return argId_;
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @param value The argId to set.
       * @return This builder for chaining.
       */
      public Builder setArgId(int value) {
        bitField0_ |= 0x00000001;
        argId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When :local is :arg, the parameter index 
       * </pre>
       *
       * <code>optional uint32 argId = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearArgId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        argId_ = 0;
        onChanged();
        return this;
      }

      private boolean isAssignable_ ;
      /**
       * <pre>
       * `true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable 
       * </pre>
       *
       * <code>bool isAssignable = 2;</code>
       * @return The isAssignable.
       */
      @java.lang.Override
      public boolean getIsAssignable() {
        return isAssignable_;
      }
      /**
       * <pre>
       * `true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable 
       * </pre>
       *
       * <code>bool isAssignable = 2;</code>
       * @param value The isAssignable to set.
       * @return This builder for chaining.
       */
      public Builder setIsAssignable(boolean value) {
        
        isAssignable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the corresponding :binding AST node is :local :field and is declared either ^:volatile-mutable or ^:unsynchronized-mutable 
       * </pre>
       *
       * <code>bool isAssignable = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsAssignable() {
        
        isAssignable_ = false;
        onChanged();
        return this;
      }

      private int local_ = 0;
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return The enum numeric value on the wire for local.
       */
      @java.lang.Override public int getLocalValue() {
        return local_;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @param value The enum numeric value on the wire for local to set.
       * @return This builder for chaining.
       */
      public Builder setLocalValue(int value) {
        
        local_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return The local.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LocalType getLocal() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.LocalType result = clojureRT.protobuf.Protobuf.LocalType.valueOf(local_);
        return result == null ? clojureRT.protobuf.Protobuf.LocalType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @param value The local to set.
       * @return This builder for chaining.
       */
      public Builder setLocal(clojureRT.protobuf.Protobuf.LocalType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        local_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * One of :arg, :catch, :fn, :let, :letfn, :loop, :field or :this 
       * </pre>
       *
       * <code>.clojureRT.protobuf.LocalType local = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLocal() {
        
        local_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The uniquified local symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The uniquified local symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The uniquified local symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The uniquified local symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The uniquified local symbol 
       * </pre>
       *
       * <code>string name = 4;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private boolean isVariadic_ ;
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return Whether the isVariadic field is set.
       */
      @java.lang.Override
      public boolean hasIsVariadic() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return The isVariadic.
       */
      @java.lang.Override
      public boolean getIsVariadic() {
        return isVariadic_;
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @param value The isVariadic to set.
       * @return This builder for chaining.
       */
      public Builder setIsVariadic(boolean value) {
        bitField0_ |= 0x00000002;
        isVariadic_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When :local is :arg, a boolean indicating whether this parameter binds to a variable number of arguments 
       * </pre>
       *
       * <code>optional bool isVariadic = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsVariadic() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isVariadic_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.LocalNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.LocalNode)
    private static final clojureRT.protobuf.Protobuf.LocalNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.LocalNode();
    }

    public static clojureRT.protobuf.Protobuf.LocalNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LocalNode>
        PARSER = new com.google.protobuf.AbstractParser<LocalNode>() {
      @java.lang.Override
      public LocalNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LocalNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LocalNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LocalNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LocalNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface LoopNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.LoopNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getBindingsList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getBindings(int index);
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    int getBindingsCount();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList();
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index);

    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();

    /**
     * <pre>
     * Unique symbol identifying this loop as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The loopId.
     */
    java.lang.String getLoopId();
    /**
     * <pre>
     * Unique symbol identifying this loop as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The bytes for loopId.
     */
    com.google.protobuf.ByteString
        getLoopIdBytes();
  }
  /**
   * <pre>
   * Node a loop* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.LoopNode}
   */
  public static final class LoopNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.LoopNode)
      LoopNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use LoopNode.newBuilder() to construct.
    private LoopNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private LoopNode() {
      bindings_ = java.util.Collections.emptyList();
      loopId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new LoopNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private LoopNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              bindings_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              loopId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          bindings_ = java.util.Collections.unmodifiableList(bindings_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LoopNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LoopNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.LoopNode.class, clojureRT.protobuf.Protobuf.LoopNode.Builder.class);
    }

    public static final int BINDINGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_;
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getBindingsOrBuilderList() {
      return bindings_;
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public int getBindingsCount() {
      return bindings_.size();
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
      return bindings_.get(index);
    }
    /**
     * <pre>
     * A vector of :binding AST nodes with :local :loop 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
        int index) {
      return bindings_.get(index);
    }

    public static final int BODY_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    public static final int LOOPID_FIELD_NUMBER = 3;
    private volatile java.lang.Object loopId_;
    /**
     * <pre>
     * Unique symbol identifying this loop as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The loopId.
     */
    @java.lang.Override
    public java.lang.String getLoopId() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        loopId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Unique symbol identifying this loop as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 3;</code>
     * @return The bytes for loopId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLoopIdBytes() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        loopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < bindings_.size(); i++) {
        output.writeMessage(1, bindings_.get(i));
      }
      if (body_ != null) {
        output.writeMessage(2, getBody());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, loopId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < bindings_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, bindings_.get(i));
      }
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getBody());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, loopId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.LoopNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.LoopNode other = (clojureRT.protobuf.Protobuf.LoopNode) obj;

      if (!getBindingsList()
          .equals(other.getBindingsList())) return false;
      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getLoopId()
          .equals(other.getLoopId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getBindingsCount() > 0) {
        hash = (37 * hash) + BINDINGS_FIELD_NUMBER;
        hash = (53 * hash) + getBindingsList().hashCode();
      }
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      hash = (37 * hash) + LOOPID_FIELD_NUMBER;
      hash = (53 * hash) + getLoopId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.LoopNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.LoopNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node a loop* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.LoopNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.LoopNode)
        clojureRT.protobuf.Protobuf.LoopNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LoopNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LoopNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.LoopNode.class, clojureRT.protobuf.Protobuf.LoopNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.LoopNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBindingsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          bindingsBuilder_.clear();
        }
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        loopId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_LoopNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LoopNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LoopNode build() {
        clojureRT.protobuf.Protobuf.LoopNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.LoopNode buildPartial() {
        clojureRT.protobuf.Protobuf.LoopNode result = new clojureRT.protobuf.Protobuf.LoopNode(this);
        int from_bitField0_ = bitField0_;
        if (bindingsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            bindings_ = java.util.Collections.unmodifiableList(bindings_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.bindings_ = bindings_;
        } else {
          result.bindings_ = bindingsBuilder_.build();
        }
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        result.loopId_ = loopId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.LoopNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.LoopNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.LoopNode other) {
        if (other == clojureRT.protobuf.Protobuf.LoopNode.getDefaultInstance()) return this;
        if (bindingsBuilder_ == null) {
          if (!other.bindings_.isEmpty()) {
            if (bindings_.isEmpty()) {
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureBindingsIsMutable();
              bindings_.addAll(other.bindings_);
            }
            onChanged();
          }
        } else {
          if (!other.bindings_.isEmpty()) {
            if (bindingsBuilder_.isEmpty()) {
              bindingsBuilder_.dispose();
              bindingsBuilder_ = null;
              bindings_ = other.bindings_;
              bitField0_ = (bitField0_ & ~0x00000001);
              bindingsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getBindingsFieldBuilder() : null;
            } else {
              bindingsBuilder_.addAllMessages(other.bindings_);
            }
          }
        }
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (!other.getLoopId().isEmpty()) {
          loopId_ = other.loopId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.LoopNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.LoopNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> bindings_ =
        java.util.Collections.emptyList();
      private void ensureBindingsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          bindings_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(bindings_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bindingsBuilder_;

      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getBindingsList() {
        if (bindingsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(bindings_);
        } else {
          return bindingsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public int getBindingsCount() {
        if (bindingsBuilder_ == null) {
          return bindings_.size();
        } else {
          return bindingsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getBindings(int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);
        } else {
          return bindingsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.set(index, value);
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder setBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.set(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (bindingsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureBindingsIsMutable();
          bindings_.add(index, value);
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addBindings(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.add(index, builderForValue.build());
          onChanged();
        } else {
          bindingsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder addAllBindings(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, bindings_);
          onChanged();
        } else {
          bindingsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder clearBindings() {
        if (bindingsBuilder_ == null) {
          bindings_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          bindingsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public Builder removeBindings(int index) {
        if (bindingsBuilder_ == null) {
          ensureBindingsIsMutable();
          bindings_.remove(index);
          onChanged();
        } else {
          bindingsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBindingsOrBuilder(
          int index) {
        if (bindingsBuilder_ == null) {
          return bindings_.get(index);  } else {
          return bindingsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getBindingsOrBuilderList() {
        if (bindingsBuilder_ != null) {
          return bindingsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(bindings_);
        }
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder() {
        return getBindingsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addBindingsBuilder(
          int index) {
        return getBindingsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :binding AST nodes with :local :loop 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node bindings = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getBindingsBuilderList() {
        return getBindingsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBindingsFieldBuilder() {
        if (bindingsBuilder_ == null) {
          bindingsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  bindings_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          bindings_ = null;
        }
        return bindingsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of the loop expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private java.lang.Object loopId_ = "";
      /**
       * <pre>
       * Unique symbol identifying this loop as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return The loopId.
       */
      public java.lang.String getLoopId() {
        java.lang.Object ref = loopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          loopId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this loop as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return The bytes for loopId.
       */
      public com.google.protobuf.ByteString
          getLoopIdBytes() {
        java.lang.Object ref = loopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          loopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this loop as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @param value The loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this loop as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoopId() {
        
        loopId_ = getDefaultInstance().getLoopId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this loop as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 3;</code>
       * @param value The bytes for loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        loopId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.LoopNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.LoopNode)
    private static final clojureRT.protobuf.Protobuf.LoopNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.LoopNode();
    }

    public static clojureRT.protobuf.Protobuf.LoopNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<LoopNode>
        PARSER = new com.google.protobuf.AbstractParser<LoopNode>() {
      @java.lang.Override
      public LoopNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new LoopNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<LoopNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<LoopNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.LoopNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MapNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.MapNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getKeysList();
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getKeys(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    int getKeysCount();
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getKeysOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getKeysOrBuilder(
        int index);

    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getValsList();
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    clojureRT.protobuf.Protobuf.Node getVals(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    int getValsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getValsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getValsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a map literal with attached metadata and/or non literal elements 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.MapNode}
   */
  public static final class MapNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.MapNode)
      MapNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MapNode.newBuilder() to construct.
    private MapNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MapNode() {
      keys_ = java.util.Collections.emptyList();
      vals_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MapNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MapNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                keys_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              keys_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                vals_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              vals_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          keys_ = java.util.Collections.unmodifiableList(keys_);
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          vals_ = java.util.Collections.unmodifiableList(vals_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MapNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MapNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.MapNode.class, clojureRT.protobuf.Protobuf.MapNode.Builder.class);
    }

    public static final int KEYS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> keys_;
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getKeysList() {
      return keys_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getKeysOrBuilderList() {
      return keys_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    @java.lang.Override
    public int getKeysCount() {
      return keys_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getKeys(int index) {
      return keys_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the keys of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getKeysOrBuilder(
        int index) {
      return keys_.get(index);
    }

    public static final int VALS_FIELD_NUMBER = 2;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> vals_;
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getValsList() {
      return vals_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getValsOrBuilderList() {
      return vals_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    @java.lang.Override
    public int getValsCount() {
      return vals_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getVals(int index) {
      return vals_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the vals of the map 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getValsOrBuilder(
        int index) {
      return vals_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < keys_.size(); i++) {
        output.writeMessage(1, keys_.get(i));
      }
      for (int i = 0; i < vals_.size(); i++) {
        output.writeMessage(2, vals_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < keys_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, keys_.get(i));
      }
      for (int i = 0; i < vals_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, vals_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.MapNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.MapNode other = (clojureRT.protobuf.Protobuf.MapNode) obj;

      if (!getKeysList()
          .equals(other.getKeysList())) return false;
      if (!getValsList()
          .equals(other.getValsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getKeysCount() > 0) {
        hash = (37 * hash) + KEYS_FIELD_NUMBER;
        hash = (53 * hash) + getKeysList().hashCode();
      }
      if (getValsCount() > 0) {
        hash = (37 * hash) + VALS_FIELD_NUMBER;
        hash = (53 * hash) + getValsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MapNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.MapNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a map literal with attached metadata and/or non literal elements 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.MapNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.MapNode)
        clojureRT.protobuf.Protobuf.MapNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MapNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MapNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.MapNode.class, clojureRT.protobuf.Protobuf.MapNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.MapNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getKeysFieldBuilder();
          getValsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (keysBuilder_ == null) {
          keys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          keysBuilder_.clear();
        }
        if (valsBuilder_ == null) {
          vals_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          valsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MapNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MapNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MapNode build() {
        clojureRT.protobuf.Protobuf.MapNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MapNode buildPartial() {
        clojureRT.protobuf.Protobuf.MapNode result = new clojureRT.protobuf.Protobuf.MapNode(this);
        int from_bitField0_ = bitField0_;
        if (keysBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            keys_ = java.util.Collections.unmodifiableList(keys_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.keys_ = keys_;
        } else {
          result.keys_ = keysBuilder_.build();
        }
        if (valsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            vals_ = java.util.Collections.unmodifiableList(vals_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.vals_ = vals_;
        } else {
          result.vals_ = valsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.MapNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.MapNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.MapNode other) {
        if (other == clojureRT.protobuf.Protobuf.MapNode.getDefaultInstance()) return this;
        if (keysBuilder_ == null) {
          if (!other.keys_.isEmpty()) {
            if (keys_.isEmpty()) {
              keys_ = other.keys_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureKeysIsMutable();
              keys_.addAll(other.keys_);
            }
            onChanged();
          }
        } else {
          if (!other.keys_.isEmpty()) {
            if (keysBuilder_.isEmpty()) {
              keysBuilder_.dispose();
              keysBuilder_ = null;
              keys_ = other.keys_;
              bitField0_ = (bitField0_ & ~0x00000001);
              keysBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getKeysFieldBuilder() : null;
            } else {
              keysBuilder_.addAllMessages(other.keys_);
            }
          }
        }
        if (valsBuilder_ == null) {
          if (!other.vals_.isEmpty()) {
            if (vals_.isEmpty()) {
              vals_ = other.vals_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureValsIsMutable();
              vals_.addAll(other.vals_);
            }
            onChanged();
          }
        } else {
          if (!other.vals_.isEmpty()) {
            if (valsBuilder_.isEmpty()) {
              valsBuilder_.dispose();
              valsBuilder_ = null;
              vals_ = other.vals_;
              bitField0_ = (bitField0_ & ~0x00000002);
              valsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getValsFieldBuilder() : null;
            } else {
              valsBuilder_.addAllMessages(other.vals_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.MapNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.MapNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> keys_ =
        java.util.Collections.emptyList();
      private void ensureKeysIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          keys_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(keys_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> keysBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getKeysList() {
        if (keysBuilder_ == null) {
          return java.util.Collections.unmodifiableList(keys_);
        } else {
          return keysBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public int getKeysCount() {
        if (keysBuilder_ == null) {
          return keys_.size();
        } else {
          return keysBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getKeys(int index) {
        if (keysBuilder_ == null) {
          return keys_.get(index);
        } else {
          return keysBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder setKeys(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (keysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeysIsMutable();
          keys_.set(index, value);
          onChanged();
        } else {
          keysBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder setKeys(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (keysBuilder_ == null) {
          ensureKeysIsMutable();
          keys_.set(index, builderForValue.build());
          onChanged();
        } else {
          keysBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder addKeys(clojureRT.protobuf.Protobuf.Node value) {
        if (keysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeysIsMutable();
          keys_.add(value);
          onChanged();
        } else {
          keysBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder addKeys(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (keysBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureKeysIsMutable();
          keys_.add(index, value);
          onChanged();
        } else {
          keysBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder addKeys(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (keysBuilder_ == null) {
          ensureKeysIsMutable();
          keys_.add(builderForValue.build());
          onChanged();
        } else {
          keysBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder addKeys(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (keysBuilder_ == null) {
          ensureKeysIsMutable();
          keys_.add(index, builderForValue.build());
          onChanged();
        } else {
          keysBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder addAllKeys(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (keysBuilder_ == null) {
          ensureKeysIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, keys_);
          onChanged();
        } else {
          keysBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder clearKeys() {
        if (keysBuilder_ == null) {
          keys_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          keysBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public Builder removeKeys(int index) {
        if (keysBuilder_ == null) {
          ensureKeysIsMutable();
          keys_.remove(index);
          onChanged();
        } else {
          keysBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getKeysBuilder(
          int index) {
        return getKeysFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getKeysOrBuilder(
          int index) {
        if (keysBuilder_ == null) {
          return keys_.get(index);  } else {
          return keysBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getKeysOrBuilderList() {
        if (keysBuilder_ != null) {
          return keysBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(keys_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addKeysBuilder() {
        return getKeysFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addKeysBuilder(
          int index) {
        return getKeysFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the keys of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node keys = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getKeysBuilderList() {
        return getKeysFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getKeysFieldBuilder() {
        if (keysBuilder_ == null) {
          keysBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  keys_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          keys_ = null;
        }
        return keysBuilder_;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> vals_ =
        java.util.Collections.emptyList();
      private void ensureValsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          vals_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(vals_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> valsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getValsList() {
        if (valsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(vals_);
        } else {
          return valsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public int getValsCount() {
        if (valsBuilder_ == null) {
          return vals_.size();
        } else {
          return valsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getVals(int index) {
        if (valsBuilder_ == null) {
          return vals_.get(index);
        } else {
          return valsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder setVals(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (valsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValsIsMutable();
          vals_.set(index, value);
          onChanged();
        } else {
          valsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder setVals(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (valsBuilder_ == null) {
          ensureValsIsMutable();
          vals_.set(index, builderForValue.build());
          onChanged();
        } else {
          valsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder addVals(clojureRT.protobuf.Protobuf.Node value) {
        if (valsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValsIsMutable();
          vals_.add(value);
          onChanged();
        } else {
          valsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder addVals(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (valsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureValsIsMutable();
          vals_.add(index, value);
          onChanged();
        } else {
          valsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder addVals(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (valsBuilder_ == null) {
          ensureValsIsMutable();
          vals_.add(builderForValue.build());
          onChanged();
        } else {
          valsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder addVals(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (valsBuilder_ == null) {
          ensureValsIsMutable();
          vals_.add(index, builderForValue.build());
          onChanged();
        } else {
          valsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder addAllVals(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (valsBuilder_ == null) {
          ensureValsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, vals_);
          onChanged();
        } else {
          valsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder clearVals() {
        if (valsBuilder_ == null) {
          vals_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          valsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public Builder removeVals(int index) {
        if (valsBuilder_ == null) {
          ensureValsIsMutable();
          vals_.remove(index);
          onChanged();
        } else {
          valsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getValsBuilder(
          int index) {
        return getValsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getValsOrBuilder(
          int index) {
        if (valsBuilder_ == null) {
          return vals_.get(index);  } else {
          return valsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getValsOrBuilderList() {
        if (valsBuilder_ != null) {
          return valsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(vals_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addValsBuilder() {
        return getValsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addValsBuilder(
          int index) {
        return getValsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the vals of the map 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node vals = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getValsBuilderList() {
        return getValsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getValsFieldBuilder() {
        if (valsBuilder_ == null) {
          valsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  vals_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          vals_ = null;
        }
        return valsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.MapNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.MapNode)
    private static final clojureRT.protobuf.Protobuf.MapNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.MapNode();
    }

    public static clojureRT.protobuf.Protobuf.MapNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MapNode>
        PARSER = new com.google.protobuf.AbstractParser<MapNode>() {
      @java.lang.Override
      public MapNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MapNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MapNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MapNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MapNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MethodNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.MethodNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();

    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @return A list containing the bridges.
     */
    java.util.List<java.lang.String>
        getBridgesList();
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @return The count of bridges.
     */
    int getBridgesCount();
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @param index The index of the element to return.
     * @return The bridges at the given index.
     */
    java.lang.String getBridges(int index);
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the bridges at the given index.
     */
    com.google.protobuf.ByteString
        getBridgesBytes(int index);

    /**
     * <pre>
     * The number of args this method takes 
     * </pre>
     *
     * <code>uint32 fixedArity = 3;</code>
     * @return The fixedArity.
     */
    int getFixedArity();

    /**
     * <pre>
     * The interface (or Object) this method belongs to 
     * </pre>
     *
     * <code>string interface = 4;</code>
     * @return The interface.
     */
    java.lang.String getInterface();
    /**
     * <pre>
     * The interface (or Object) this method belongs to 
     * </pre>
     *
     * <code>string interface = 4;</code>
     * @return The bytes for interface.
     */
    com.google.protobuf.ByteString
        getInterfaceBytes();

    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 5;</code>
     * @return The loopId.
     */
    java.lang.String getLoopId();
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 5;</code>
     * @return The bytes for loopId.
     */
    com.google.protobuf.ByteString
        getLoopIdBytes();

    /**
     * <pre>
     * The symbol name of this method 
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * The symbol name of this method 
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getParamsList();
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    clojureRT.protobuf.Protobuf.Node getParams(int index);
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    int getParamsCount();
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getParamsOrBuilderList();
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
        int index);

    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     * @return Whether the this field is set.
     */
    boolean hasThis();
    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     * @return The this.
     */
    clojureRT.protobuf.Protobuf.Node getThis();
    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getThisOrBuilder();
  }
  /**
   * <pre>
   * Node for a method in a deftype* or reify* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.MethodNode}
   */
  public static final class MethodNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.MethodNode)
      MethodNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MethodNode.newBuilder() to construct.
    private MethodNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MethodNode() {
      bridges_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      interface_ = "";
      loopId_ = "";
      name_ = "";
      params_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MethodNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MethodNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                bridges_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              bridges_.add(s);
              break;
            }
            case 24: {

              fixedArity_ = input.readUInt32();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              interface_ = s;
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              loopId_ = s;
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              name_ = s;
              break;
            }
            case 58: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                params_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              params_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 66: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (this_ != null) {
                subBuilder = this_.toBuilder();
              }
              this_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(this_);
                this_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          bridges_ = bridges_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          params_ = java.util.Collections.unmodifiableList(params_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MethodNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MethodNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.MethodNode.class, clojureRT.protobuf.Protobuf.MethodNode.Builder.class);
    }

    public static final int BODY_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do node (with :body? `true`) representing the body of this method 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    public static final int BRIDGES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList bridges_;
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @return A list containing the bridges.
     */
    public com.google.protobuf.ProtocolStringList
        getBridgesList() {
      return bridges_;
    }
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @return The count of bridges.
     */
    public int getBridgesCount() {
      return bridges_.size();
    }
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @param index The index of the element to return.
     * @return The bridges at the given index.
     */
    public java.lang.String getBridges(int index) {
      return bridges_.get(index);
    }
    /**
     * <pre>
     * A list of signature for bridge methods to emit 
     * </pre>
     *
     * <code>repeated string bridges = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the bridges at the given index.
     */
    public com.google.protobuf.ByteString
        getBridgesBytes(int index) {
      return bridges_.getByteString(index);
    }

    public static final int FIXEDARITY_FIELD_NUMBER = 3;
    private int fixedArity_;
    /**
     * <pre>
     * The number of args this method takes 
     * </pre>
     *
     * <code>uint32 fixedArity = 3;</code>
     * @return The fixedArity.
     */
    @java.lang.Override
    public int getFixedArity() {
      return fixedArity_;
    }

    public static final int INTERFACE_FIELD_NUMBER = 4;
    private volatile java.lang.Object interface_;
    /**
     * <pre>
     * The interface (or Object) this method belongs to 
     * </pre>
     *
     * <code>string interface = 4;</code>
     * @return The interface.
     */
    @java.lang.Override
    public java.lang.String getInterface() {
      java.lang.Object ref = interface_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        interface_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The interface (or Object) this method belongs to 
     * </pre>
     *
     * <code>string interface = 4;</code>
     * @return The bytes for interface.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getInterfaceBytes() {
      java.lang.Object ref = interface_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        interface_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LOOPID_FIELD_NUMBER = 5;
    private volatile java.lang.Object loopId_;
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 5;</code>
     * @return The loopId.
     */
    @java.lang.Override
    public java.lang.String getLoopId() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        loopId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Unique symbol identifying this method as a target for recursion 
     * </pre>
     *
     * <code>string loopId = 5;</code>
     * @return The bytes for loopId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLoopIdBytes() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        loopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 6;
    private volatile java.lang.Object name_;
    /**
     * <pre>
     * The symbol name of this method 
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The symbol name of this method 
     * </pre>
     *
     * <code>string name = 6;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PARAMS_FIELD_NUMBER = 7;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> params_;
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getParamsList() {
      return params_;
    }
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getParamsOrBuilderList() {
      return params_;
    }
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    @java.lang.Override
    public int getParamsCount() {
      return params_.size();
    }
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getParams(int index) {
      return params_.get(index);
    }
    /**
     * <pre>
     * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
        int index) {
      return params_.get(index);
    }

    public static final int THIS_FIELD_NUMBER = 8;
    private clojureRT.protobuf.Protobuf.Node this_;
    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     * @return Whether the this field is set.
     */
    @java.lang.Override
    public boolean hasThis() {
      return this_ != null;
    }
    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     * @return The this.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getThis() {
      return this_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : this_;
    }
    /**
     * <pre>
     * A :binding AST node with :local :this representing the "this" local 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node this = 8;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getThisOrBuilder() {
      return getThis();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (body_ != null) {
        output.writeMessage(1, getBody());
      }
      for (int i = 0; i < bridges_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, bridges_.getRaw(i));
      }
      if (fixedArity_ != 0) {
        output.writeUInt32(3, fixedArity_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(interface_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, interface_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, loopId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, name_);
      }
      for (int i = 0; i < params_.size(); i++) {
        output.writeMessage(7, params_.get(i));
      }
      if (this_ != null) {
        output.writeMessage(8, getThis());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBody());
      }
      {
        int dataSize = 0;
        for (int i = 0; i < bridges_.size(); i++) {
          dataSize += computeStringSizeNoTag(bridges_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getBridgesList().size();
      }
      if (fixedArity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, fixedArity_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(interface_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, interface_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, loopId_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, name_);
      }
      for (int i = 0; i < params_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, params_.get(i));
      }
      if (this_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getThis());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.MethodNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.MethodNode other = (clojureRT.protobuf.Protobuf.MethodNode) obj;

      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getBridgesList()
          .equals(other.getBridgesList())) return false;
      if (getFixedArity()
          != other.getFixedArity()) return false;
      if (!getInterface()
          .equals(other.getInterface())) return false;
      if (!getLoopId()
          .equals(other.getLoopId())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (!getParamsList()
          .equals(other.getParamsList())) return false;
      if (hasThis() != other.hasThis()) return false;
      if (hasThis()) {
        if (!getThis()
            .equals(other.getThis())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      if (getBridgesCount() > 0) {
        hash = (37 * hash) + BRIDGES_FIELD_NUMBER;
        hash = (53 * hash) + getBridgesList().hashCode();
      }
      hash = (37 * hash) + FIXEDARITY_FIELD_NUMBER;
      hash = (53 * hash) + getFixedArity();
      hash = (37 * hash) + INTERFACE_FIELD_NUMBER;
      hash = (53 * hash) + getInterface().hashCode();
      hash = (37 * hash) + LOOPID_FIELD_NUMBER;
      hash = (53 * hash) + getLoopId().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      if (getParamsCount() > 0) {
        hash = (37 * hash) + PARAMS_FIELD_NUMBER;
        hash = (53 * hash) + getParamsList().hashCode();
      }
      if (hasThis()) {
        hash = (37 * hash) + THIS_FIELD_NUMBER;
        hash = (53 * hash) + getThis().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MethodNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.MethodNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a method in a deftype* or reify* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.MethodNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.MethodNode)
        clojureRT.protobuf.Protobuf.MethodNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MethodNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MethodNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.MethodNode.class, clojureRT.protobuf.Protobuf.MethodNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.MethodNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getParamsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        bridges_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        fixedArity_ = 0;

        interface_ = "";

        loopId_ = "";

        name_ = "";

        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          paramsBuilder_.clear();
        }
        if (thisBuilder_ == null) {
          this_ = null;
        } else {
          this_ = null;
          thisBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MethodNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MethodNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MethodNode build() {
        clojureRT.protobuf.Protobuf.MethodNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MethodNode buildPartial() {
        clojureRT.protobuf.Protobuf.MethodNode result = new clojureRT.protobuf.Protobuf.MethodNode(this);
        int from_bitField0_ = bitField0_;
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          bridges_ = bridges_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.bridges_ = bridges_;
        result.fixedArity_ = fixedArity_;
        result.interface_ = interface_;
        result.loopId_ = loopId_;
        result.name_ = name_;
        if (paramsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            params_ = java.util.Collections.unmodifiableList(params_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.params_ = params_;
        } else {
          result.params_ = paramsBuilder_.build();
        }
        if (thisBuilder_ == null) {
          result.this_ = this_;
        } else {
          result.this_ = thisBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.MethodNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.MethodNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.MethodNode other) {
        if (other == clojureRT.protobuf.Protobuf.MethodNode.getDefaultInstance()) return this;
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (!other.bridges_.isEmpty()) {
          if (bridges_.isEmpty()) {
            bridges_ = other.bridges_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBridgesIsMutable();
            bridges_.addAll(other.bridges_);
          }
          onChanged();
        }
        if (other.getFixedArity() != 0) {
          setFixedArity(other.getFixedArity());
        }
        if (!other.getInterface().isEmpty()) {
          interface_ = other.interface_;
          onChanged();
        }
        if (!other.getLoopId().isEmpty()) {
          loopId_ = other.loopId_;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          onChanged();
        }
        if (paramsBuilder_ == null) {
          if (!other.params_.isEmpty()) {
            if (params_.isEmpty()) {
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureParamsIsMutable();
              params_.addAll(other.params_);
            }
            onChanged();
          }
        } else {
          if (!other.params_.isEmpty()) {
            if (paramsBuilder_.isEmpty()) {
              paramsBuilder_.dispose();
              paramsBuilder_ = null;
              params_ = other.params_;
              bitField0_ = (bitField0_ & ~0x00000002);
              paramsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getParamsFieldBuilder() : null;
            } else {
              paramsBuilder_.addAllMessages(other.params_);
            }
          }
        }
        if (other.hasThis()) {
          mergeThis(other.getThis());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.MethodNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.MethodNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do node (with :body? `true`) representing the body of this method 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private com.google.protobuf.LazyStringList bridges_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBridgesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          bridges_ = new com.google.protobuf.LazyStringArrayList(bridges_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @return A list containing the bridges.
       */
      public com.google.protobuf.ProtocolStringList
          getBridgesList() {
        return bridges_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @return The count of bridges.
       */
      public int getBridgesCount() {
        return bridges_.size();
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param index The index of the element to return.
       * @return The bridges at the given index.
       */
      public java.lang.String getBridges(int index) {
        return bridges_.get(index);
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the bridges at the given index.
       */
      public com.google.protobuf.ByteString
          getBridgesBytes(int index) {
        return bridges_.getByteString(index);
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param index The index to set the value at.
       * @param value The bridges to set.
       * @return This builder for chaining.
       */
      public Builder setBridges(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBridgesIsMutable();
        bridges_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param value The bridges to add.
       * @return This builder for chaining.
       */
      public Builder addBridges(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBridgesIsMutable();
        bridges_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param values The bridges to add.
       * @return This builder for chaining.
       */
      public Builder addAllBridges(
          java.lang.Iterable<java.lang.String> values) {
        ensureBridgesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, bridges_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearBridges() {
        bridges_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A list of signature for bridge methods to emit 
       * </pre>
       *
       * <code>repeated string bridges = 2;</code>
       * @param value The bytes of the bridges to add.
       * @return This builder for chaining.
       */
      public Builder addBridgesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureBridgesIsMutable();
        bridges_.add(value);
        onChanged();
        return this;
      }

      private int fixedArity_ ;
      /**
       * <pre>
       * The number of args this method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 3;</code>
       * @return The fixedArity.
       */
      @java.lang.Override
      public int getFixedArity() {
        return fixedArity_;
      }
      /**
       * <pre>
       * The number of args this method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 3;</code>
       * @param value The fixedArity to set.
       * @return This builder for chaining.
       */
      public Builder setFixedArity(int value) {
        
        fixedArity_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The number of args this method takes 
       * </pre>
       *
       * <code>uint32 fixedArity = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFixedArity() {
        
        fixedArity_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object interface_ = "";
      /**
       * <pre>
       * The interface (or Object) this method belongs to 
       * </pre>
       *
       * <code>string interface = 4;</code>
       * @return The interface.
       */
      public java.lang.String getInterface() {
        java.lang.Object ref = interface_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          interface_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The interface (or Object) this method belongs to 
       * </pre>
       *
       * <code>string interface = 4;</code>
       * @return The bytes for interface.
       */
      public com.google.protobuf.ByteString
          getInterfaceBytes() {
        java.lang.Object ref = interface_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          interface_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The interface (or Object) this method belongs to 
       * </pre>
       *
       * <code>string interface = 4;</code>
       * @param value The interface to set.
       * @return This builder for chaining.
       */
      public Builder setInterface(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        interface_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The interface (or Object) this method belongs to 
       * </pre>
       *
       * <code>string interface = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearInterface() {
        
        interface_ = getDefaultInstance().getInterface();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The interface (or Object) this method belongs to 
       * </pre>
       *
       * <code>string interface = 4;</code>
       * @param value The bytes for interface to set.
       * @return This builder for chaining.
       */
      public Builder setInterfaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        interface_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object loopId_ = "";
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 5;</code>
       * @return The loopId.
       */
      public java.lang.String getLoopId() {
        java.lang.Object ref = loopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          loopId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 5;</code>
       * @return The bytes for loopId.
       */
      public com.google.protobuf.ByteString
          getLoopIdBytes() {
        java.lang.Object ref = loopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          loopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 5;</code>
       * @param value The loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoopId() {
        
        loopId_ = getDefaultInstance().getLoopId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying this method as a target for recursion 
       * </pre>
       *
       * <code>string loopId = 5;</code>
       * @param value The bytes for loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        loopId_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * The symbol name of this method 
       * </pre>
       *
       * <code>string name = 6;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of this method 
       * </pre>
       *
       * <code>string name = 6;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of this method 
       * </pre>
       *
       * <code>string name = 6;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        name_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of this method 
       * </pre>
       *
       * <code>string name = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        
        name_ = getDefaultInstance().getName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of this method 
       * </pre>
       *
       * <code>string name = 6;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        name_ = value;
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> params_ =
        java.util.Collections.emptyList();
      private void ensureParamsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          params_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(params_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> paramsBuilder_;

      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getParamsList() {
        if (paramsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(params_);
        } else {
          return paramsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public int getParamsCount() {
        if (paramsBuilder_ == null) {
          return params_.size();
        } else {
          return paramsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getParams(int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);
        } else {
          return paramsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder setParams(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.set(index, value);
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder setParams(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.set(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder addParams(clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder addParams(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (paramsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureParamsIsMutable();
          params_.add(index, value);
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder addParams(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder addParams(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.add(index, builderForValue.build());
          onChanged();
        } else {
          paramsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder addAllParams(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, params_);
          onChanged();
        } else {
          paramsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder clearParams() {
        if (paramsBuilder_ == null) {
          params_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          paramsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public Builder removeParams(int index) {
        if (paramsBuilder_ == null) {
          ensureParamsIsMutable();
          params_.remove(index);
          onChanged();
        } else {
          paramsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getParamsBuilder(
          int index) {
        return getParamsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getParamsOrBuilder(
          int index) {
        if (paramsBuilder_ == null) {
          return params_.get(index);  } else {
          return paramsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getParamsOrBuilderList() {
        if (paramsBuilder_ != null) {
          return paramsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(params_);
        }
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addParamsBuilder() {
        return getParamsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addParamsBuilder(
          int index) {
        return getParamsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST :binding nodes with :local :arg representing the arguments of the method 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node params = 7;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getParamsBuilderList() {
        return getParamsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getParamsFieldBuilder() {
        if (paramsBuilder_ == null) {
          paramsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  params_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          params_ = null;
        }
        return paramsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node this_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> thisBuilder_;
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       * @return Whether the this field is set.
       */
      public boolean hasThis() {
        return thisBuilder_ != null || this_ != null;
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       * @return The this.
       */
      public clojureRT.protobuf.Protobuf.Node getThis() {
        if (thisBuilder_ == null) {
          return this_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : this_;
        } else {
          return thisBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public Builder setThis(clojureRT.protobuf.Protobuf.Node value) {
        if (thisBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          this_ = value;
          onChanged();
        } else {
          thisBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public Builder setThis(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (thisBuilder_ == null) {
          this_ = builderForValue.build();
          onChanged();
        } else {
          thisBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public Builder mergeThis(clojureRT.protobuf.Protobuf.Node value) {
        if (thisBuilder_ == null) {
          if (this_ != null) {
            this_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(this_).mergeFrom(value).buildPartial();
          } else {
            this_ = value;
          }
          onChanged();
        } else {
          thisBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public Builder clearThis() {
        if (thisBuilder_ == null) {
          this_ = null;
          onChanged();
        } else {
          this_ = null;
          thisBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getThisBuilder() {
        
        onChanged();
        return getThisFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getThisOrBuilder() {
        if (thisBuilder_ != null) {
          return thisBuilder_.getMessageOrBuilder();
        } else {
          return this_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : this_;
        }
      }
      /**
       * <pre>
       * A :binding AST node with :local :this representing the "this" local 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node this = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getThisFieldBuilder() {
        if (thisBuilder_ == null) {
          thisBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getThis(),
                  getParentForChildren(),
                  isClean());
          this_ = null;
        }
        return thisBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.MethodNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.MethodNode)
    private static final clojureRT.protobuf.Protobuf.MethodNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.MethodNode();
    }

    public static clojureRT.protobuf.Protobuf.MethodNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MethodNode>
        PARSER = new com.google.protobuf.AbstractParser<MethodNode>() {
      @java.lang.Override
      public MethodNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MethodNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MethodNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MethodNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MethodNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitorEnterNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.MonitorEnterNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for a monitor-enter special-form statement 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.MonitorEnterNode}
   */
  public static final class MonitorEnterNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.MonitorEnterNode)
      MonitorEnterNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitorEnterNode.newBuilder() to construct.
    private MonitorEnterNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitorEnterNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitorEnterNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitorEnterNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorEnterNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.MonitorEnterNode.class, clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the monitor-enter sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != null) {
        output.writeMessage(1, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.MonitorEnterNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.MonitorEnterNode other = (clojureRT.protobuf.Protobuf.MonitorEnterNode) obj;

      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorEnterNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.MonitorEnterNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a monitor-enter special-form statement 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.MonitorEnterNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.MonitorEnterNode)
        clojureRT.protobuf.Protobuf.MonitorEnterNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorEnterNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.MonitorEnterNode.class, clojureRT.protobuf.Protobuf.MonitorEnterNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.MonitorEnterNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorEnterNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorEnterNode build() {
        clojureRT.protobuf.Protobuf.MonitorEnterNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorEnterNode buildPartial() {
        clojureRT.protobuf.Protobuf.MonitorEnterNode result = new clojureRT.protobuf.Protobuf.MonitorEnterNode(this);
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.MonitorEnterNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.MonitorEnterNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.MonitorEnterNode other) {
        if (other == clojureRT.protobuf.Protobuf.MonitorEnterNode.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.MonitorEnterNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.MonitorEnterNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the monitor-enter sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.MonitorEnterNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.MonitorEnterNode)
    private static final clojureRT.protobuf.Protobuf.MonitorEnterNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.MonitorEnterNode();
    }

    public static clojureRT.protobuf.Protobuf.MonitorEnterNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitorEnterNode>
        PARSER = new com.google.protobuf.AbstractParser<MonitorEnterNode>() {
      @java.lang.Override
      public MonitorEnterNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitorEnterNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitorEnterNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitorEnterNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorEnterNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitorExitNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.MonitorExitNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for a monitor-exit special-form statement 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.MonitorExitNode}
   */
  public static final class MonitorExitNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.MonitorExitNode)
      MonitorExitNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitorExitNode.newBuilder() to construct.
    private MonitorExitNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitorExitNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitorExitNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitorExitNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorExitNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorExitNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.MonitorExitNode.class, clojureRT.protobuf.Protobuf.MonitorExitNode.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the monitor-exit sentinel 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != null) {
        output.writeMessage(1, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.MonitorExitNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.MonitorExitNode other = (clojureRT.protobuf.Protobuf.MonitorExitNode) obj;

      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MonitorExitNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.MonitorExitNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a monitor-exit special-form statement 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.MonitorExitNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.MonitorExitNode)
        clojureRT.protobuf.Protobuf.MonitorExitNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorExitNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorExitNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.MonitorExitNode.class, clojureRT.protobuf.Protobuf.MonitorExitNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.MonitorExitNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MonitorExitNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorExitNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorExitNode build() {
        clojureRT.protobuf.Protobuf.MonitorExitNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MonitorExitNode buildPartial() {
        clojureRT.protobuf.Protobuf.MonitorExitNode result = new clojureRT.protobuf.Protobuf.MonitorExitNode(this);
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.MonitorExitNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.MonitorExitNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.MonitorExitNode other) {
        if (other == clojureRT.protobuf.Protobuf.MonitorExitNode.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.MonitorExitNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.MonitorExitNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the monitor-exit sentinel 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.MonitorExitNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.MonitorExitNode)
    private static final clojureRT.protobuf.Protobuf.MonitorExitNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.MonitorExitNode();
    }

    public static clojureRT.protobuf.Protobuf.MonitorExitNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitorExitNode>
        PARSER = new com.google.protobuf.AbstractParser<MonitorExitNode>() {
      @java.lang.Override
      public MonitorExitNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitorExitNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitorExitNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitorExitNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MonitorExitNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NewNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.NewNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return Whether the class field is set.
     */
    boolean hasClass_();
    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return The class.
     */
    clojureRT.protobuf.Protobuf.Node getClass_();
    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder();

    /**
     * <pre>
     * `true` if the constructor call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 3;</code>
     * @return Whether the isValidated field is set.
     */
    boolean hasIsValidated();
    /**
     * <pre>
     * `true` if the constructor call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 3;</code>
     * @return The isValidated.
     */
    boolean getIsValidated();
  }
  /**
   * <pre>
   * Node for a new special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.NewNode}
   */
  public static final class NewNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.NewNode)
      NewNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use NewNode.newBuilder() to construct.
    private NewNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private NewNode() {
      args_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new NewNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private NewNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (class__ != null) {
                subBuilder = class__.toBuilder();
              }
              class__ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(class__);
                class__ = subBuilder.buildPartial();
              }

              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              isValidated_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_NewNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_NewNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.NewNode.class, clojureRT.protobuf.Protobuf.NewNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the arguments passed to the Class constructor 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node class__;
    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return Whether the class field is set.
     */
    @java.lang.Override
    public boolean hasClass_() {
      return class__ != null;
    }
    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getClass_() {
      return class__ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
    }
    /**
     * <pre>
     * A :const AST node with :type :class representing the Class to instantiate 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node class = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder() {
      return getClass_();
    }

    public static final int ISVALIDATED_FIELD_NUMBER = 3;
    private boolean isValidated_;
    /**
     * <pre>
     * `true` if the constructor call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 3;</code>
     * @return Whether the isValidated field is set.
     */
    @java.lang.Override
    public boolean hasIsValidated() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if the constructor call could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 3;</code>
     * @return The isValidated.
     */
    @java.lang.Override
    public boolean getIsValidated() {
      return isValidated_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (class__ != null) {
        output.writeMessage(2, getClass_());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(3, isValidated_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (class__ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getClass_());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, isValidated_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.NewNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.NewNode other = (clojureRT.protobuf.Protobuf.NewNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasClass_() != other.hasClass_()) return false;
      if (hasClass_()) {
        if (!getClass_()
            .equals(other.getClass_())) return false;
      }
      if (hasIsValidated() != other.hasIsValidated()) return false;
      if (hasIsValidated()) {
        if (getIsValidated()
            != other.getIsValidated()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasClass_()) {
        hash = (37 * hash) + CLASS_FIELD_NUMBER;
        hash = (53 * hash) + getClass_().hashCode();
      }
      if (hasIsValidated()) {
        hash = (37 * hash) + ISVALIDATED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsValidated());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.NewNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.NewNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a new special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.NewNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.NewNode)
        clojureRT.protobuf.Protobuf.NewNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_NewNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_NewNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.NewNode.class, clojureRT.protobuf.Protobuf.NewNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.NewNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        if (class_Builder_ == null) {
          class__ = null;
        } else {
          class__ = null;
          class_Builder_ = null;
        }
        isValidated_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_NewNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.NewNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.NewNode build() {
        clojureRT.protobuf.Protobuf.NewNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.NewNode buildPartial() {
        clojureRT.protobuf.Protobuf.NewNode result = new clojureRT.protobuf.Protobuf.NewNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (class_Builder_ == null) {
          result.class__ = class__;
        } else {
          result.class__ = class_Builder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.isValidated_ = isValidated_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.NewNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.NewNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.NewNode other) {
        if (other == clojureRT.protobuf.Protobuf.NewNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasClass_()) {
          mergeClass_(other.getClass_());
        }
        if (other.hasIsValidated()) {
          setIsValidated(other.getIsValidated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.NewNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.NewNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the arguments passed to the Class constructor 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node class__;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> class_Builder_;
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       * @return Whether the class field is set.
       */
      public boolean hasClass_() {
        return class_Builder_ != null || class__ != null;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       * @return The class.
       */
      public clojureRT.protobuf.Protobuf.Node getClass_() {
        if (class_Builder_ == null) {
          return class__ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
        } else {
          return class_Builder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder setClass_(clojureRT.protobuf.Protobuf.Node value) {
        if (class_Builder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          class__ = value;
          onChanged();
        } else {
          class_Builder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder setClass_(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (class_Builder_ == null) {
          class__ = builderForValue.build();
          onChanged();
        } else {
          class_Builder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder mergeClass_(clojureRT.protobuf.Protobuf.Node value) {
        if (class_Builder_ == null) {
          if (class__ != null) {
            class__ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(class__).mergeFrom(value).buildPartial();
          } else {
            class__ = value;
          }
          onChanged();
        } else {
          class_Builder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public Builder clearClass_() {
        if (class_Builder_ == null) {
          class__ = null;
          onChanged();
        } else {
          class__ = null;
          class_Builder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getClass_Builder() {
        
        onChanged();
        return getClass_FieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getClass_OrBuilder() {
        if (class_Builder_ != null) {
          return class_Builder_.getMessageOrBuilder();
        } else {
          return class__ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : class__;
        }
      }
      /**
       * <pre>
       * A :const AST node with :type :class representing the Class to instantiate 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node class = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getClass_FieldBuilder() {
        if (class_Builder_ == null) {
          class_Builder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getClass_(),
                  getParentForChildren(),
                  isClean());
          class__ = null;
        }
        return class_Builder_;
      }

      private boolean isValidated_ ;
      /**
       * <pre>
       * `true` if the constructor call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 3;</code>
       * @return Whether the isValidated field is set.
       */
      @java.lang.Override
      public boolean hasIsValidated() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * `true` if the constructor call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 3;</code>
       * @return The isValidated.
       */
      @java.lang.Override
      public boolean getIsValidated() {
        return isValidated_;
      }
      /**
       * <pre>
       * `true` if the constructor call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 3;</code>
       * @param value The isValidated to set.
       * @return This builder for chaining.
       */
      public Builder setIsValidated(boolean value) {
        bitField0_ |= 0x00000002;
        isValidated_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the constructor call could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsValidated() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isValidated_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.NewNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.NewNode)
    private static final clojureRT.protobuf.Protobuf.NewNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.NewNode();
    }

    public static clojureRT.protobuf.Protobuf.NewNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<NewNode>
        PARSER = new com.google.protobuf.AbstractParser<NewNode>() {
      @java.lang.Override
      public NewNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new NewNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<NewNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<NewNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NewNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface PrimInvokeNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.PrimInvokeNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return Whether the fn field is set.
     */
    boolean hasFn();
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return The fn.
     */
    clojureRT.protobuf.Protobuf.Node getFn();
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder();

    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return Whether the meta field is set.
     */
    boolean hasMeta();
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The meta.
     */
    java.lang.String getMeta();
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The bytes for meta.
     */
    com.google.protobuf.ByteString
        getMetaBytes();

    /**
     * <pre>
     * The primitive interface in IFn that will be used 
     * </pre>
     *
     * <code>string primInterface = 4;</code>
     * @return The primInterface.
     */
    java.lang.String getPrimInterface();
    /**
     * <pre>
     * The primitive interface in IFn that will be used 
     * </pre>
     *
     * <code>string primInterface = 4;</code>
     * @return The bytes for primInterface.
     */
    com.google.protobuf.ByteString
        getPrimInterfaceBytes();
  }
  /**
   * <pre>
   * Node for an invoke expression that can be optimized using one of the primitive interfaces in IFn 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.PrimInvokeNode}
   */
  public static final class PrimInvokeNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.PrimInvokeNode)
      PrimInvokeNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use PrimInvokeNode.newBuilder() to construct.
    private PrimInvokeNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private PrimInvokeNode() {
      args_ = java.util.Collections.emptyList();
      meta_ = "";
      primInterface_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new PrimInvokeNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private PrimInvokeNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (fn_ != null) {
                subBuilder = fn_.toBuilder();
              }
              fn_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(fn_);
                fn_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              meta_ = s;
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();

              primInterface_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_PrimInvokeNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.PrimInvokeNode.class, clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int FN_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node fn_;
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return Whether the fn field is set.
     */
    @java.lang.Override
    public boolean hasFn() {
      return fn_ != null;
    }
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     * @return The fn.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getFn() {
      return fn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
    }
    /**
     * <pre>
     * An AST node representing the function to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node fn = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder() {
      return getFn();
    }

    public static final int META_FIELD_NUMBER = 3;
    private volatile java.lang.Object meta_;
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return Whether the meta field is set.
     */
    @java.lang.Override
    public boolean hasMeta() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The meta.
     */
    @java.lang.Override
    public java.lang.String getMeta() {
      java.lang.Object ref = meta_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        meta_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Map of metadata attached to the invoke :form 
     * </pre>
     *
     * <code>optional string meta = 3;</code>
     * @return The bytes for meta.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMetaBytes() {
      java.lang.Object ref = meta_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        meta_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PRIMINTERFACE_FIELD_NUMBER = 4;
    private volatile java.lang.Object primInterface_;
    /**
     * <pre>
     * The primitive interface in IFn that will be used 
     * </pre>
     *
     * <code>string primInterface = 4;</code>
     * @return The primInterface.
     */
    @java.lang.Override
    public java.lang.String getPrimInterface() {
      java.lang.Object ref = primInterface_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        primInterface_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The primitive interface in IFn that will be used 
     * </pre>
     *
     * <code>string primInterface = 4;</code>
     * @return The bytes for primInterface.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getPrimInterfaceBytes() {
      java.lang.Object ref = primInterface_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        primInterface_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (fn_ != null) {
        output.writeMessage(2, getFn());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, meta_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(primInterface_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, primInterface_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (fn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getFn());
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, meta_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(primInterface_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, primInterface_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.PrimInvokeNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.PrimInvokeNode other = (clojureRT.protobuf.Protobuf.PrimInvokeNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasFn() != other.hasFn()) return false;
      if (hasFn()) {
        if (!getFn()
            .equals(other.getFn())) return false;
      }
      if (hasMeta() != other.hasMeta()) return false;
      if (hasMeta()) {
        if (!getMeta()
            .equals(other.getMeta())) return false;
      }
      if (!getPrimInterface()
          .equals(other.getPrimInterface())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasFn()) {
        hash = (37 * hash) + FN_FIELD_NUMBER;
        hash = (53 * hash) + getFn().hashCode();
      }
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta().hashCode();
      }
      hash = (37 * hash) + PRIMINTERFACE_FIELD_NUMBER;
      hash = (53 * hash) + getPrimInterface().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.PrimInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.PrimInvokeNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an invoke expression that can be optimized using one of the primitive interfaces in IFn 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.PrimInvokeNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.PrimInvokeNode)
        clojureRT.protobuf.Protobuf.PrimInvokeNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_PrimInvokeNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.PrimInvokeNode.class, clojureRT.protobuf.Protobuf.PrimInvokeNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.PrimInvokeNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        if (fnBuilder_ == null) {
          fn_ = null;
        } else {
          fn_ = null;
          fnBuilder_ = null;
        }
        meta_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        primInterface_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.PrimInvokeNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.PrimInvokeNode build() {
        clojureRT.protobuf.Protobuf.PrimInvokeNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.PrimInvokeNode buildPartial() {
        clojureRT.protobuf.Protobuf.PrimInvokeNode result = new clojureRT.protobuf.Protobuf.PrimInvokeNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (fnBuilder_ == null) {
          result.fn_ = fn_;
        } else {
          result.fn_ = fnBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          to_bitField0_ |= 0x00000001;
        }
        result.meta_ = meta_;
        result.primInterface_ = primInterface_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.PrimInvokeNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.PrimInvokeNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.PrimInvokeNode other) {
        if (other == clojureRT.protobuf.Protobuf.PrimInvokeNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasFn()) {
          mergeFn(other.getFn());
        }
        if (other.hasMeta()) {
          bitField0_ |= 0x00000002;
          meta_ = other.meta_;
          onChanged();
        }
        if (!other.getPrimInterface().isEmpty()) {
          primInterface_ = other.primInterface_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.PrimInvokeNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.PrimInvokeNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node fn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> fnBuilder_;
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       * @return Whether the fn field is set.
       */
      public boolean hasFn() {
        return fnBuilder_ != null || fn_ != null;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       * @return The fn.
       */
      public clojureRT.protobuf.Protobuf.Node getFn() {
        if (fnBuilder_ == null) {
          return fn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
        } else {
          return fnBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder setFn(clojureRT.protobuf.Protobuf.Node value) {
        if (fnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          fn_ = value;
          onChanged();
        } else {
          fnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder setFn(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (fnBuilder_ == null) {
          fn_ = builderForValue.build();
          onChanged();
        } else {
          fnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder mergeFn(clojureRT.protobuf.Protobuf.Node value) {
        if (fnBuilder_ == null) {
          if (fn_ != null) {
            fn_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(fn_).mergeFrom(value).buildPartial();
          } else {
            fn_ = value;
          }
          onChanged();
        } else {
          fnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public Builder clearFn() {
        if (fnBuilder_ == null) {
          fn_ = null;
          onChanged();
        } else {
          fn_ = null;
          fnBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getFnBuilder() {
        
        onChanged();
        return getFnFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getFnOrBuilder() {
        if (fnBuilder_ != null) {
          return fnBuilder_.getMessageOrBuilder();
        } else {
          return fn_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : fn_;
        }
      }
      /**
       * <pre>
       * An AST node representing the function to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node fn = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getFnFieldBuilder() {
        if (fnBuilder_ == null) {
          fnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getFn(),
                  getParentForChildren(),
                  isClean());
          fn_ = null;
        }
        return fnBuilder_;
      }

      private java.lang.Object meta_ = "";
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return Whether the meta field is set.
       */
      public boolean hasMeta() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return The meta.
       */
      public java.lang.String getMeta() {
        java.lang.Object ref = meta_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          meta_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return The bytes for meta.
       */
      public com.google.protobuf.ByteString
          getMetaBytes() {
        java.lang.Object ref = meta_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          meta_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @param value The meta to set.
       * @return This builder for chaining.
       */
      public Builder setMeta(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        meta_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMeta() {
        bitField0_ = (bitField0_ & ~0x00000002);
        meta_ = getDefaultInstance().getMeta();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Map of metadata attached to the invoke :form 
       * </pre>
       *
       * <code>optional string meta = 3;</code>
       * @param value The bytes for meta to set.
       * @return This builder for chaining.
       */
      public Builder setMetaBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        bitField0_ |= 0x00000002;
        meta_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object primInterface_ = "";
      /**
       * <pre>
       * The primitive interface in IFn that will be used 
       * </pre>
       *
       * <code>string primInterface = 4;</code>
       * @return The primInterface.
       */
      public java.lang.String getPrimInterface() {
        java.lang.Object ref = primInterface_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          primInterface_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The primitive interface in IFn that will be used 
       * </pre>
       *
       * <code>string primInterface = 4;</code>
       * @return The bytes for primInterface.
       */
      public com.google.protobuf.ByteString
          getPrimInterfaceBytes() {
        java.lang.Object ref = primInterface_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          primInterface_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The primitive interface in IFn that will be used 
       * </pre>
       *
       * <code>string primInterface = 4;</code>
       * @param value The primInterface to set.
       * @return This builder for chaining.
       */
      public Builder setPrimInterface(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        primInterface_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The primitive interface in IFn that will be used 
       * </pre>
       *
       * <code>string primInterface = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearPrimInterface() {
        
        primInterface_ = getDefaultInstance().getPrimInterface();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The primitive interface in IFn that will be used 
       * </pre>
       *
       * <code>string primInterface = 4;</code>
       * @param value The bytes for primInterface to set.
       * @return This builder for chaining.
       */
      public Builder setPrimInterfaceBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        primInterface_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.PrimInvokeNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.PrimInvokeNode)
    private static final clojureRT.protobuf.Protobuf.PrimInvokeNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.PrimInvokeNode();
    }

    public static clojureRT.protobuf.Protobuf.PrimInvokeNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<PrimInvokeNode>
        PARSER = new com.google.protobuf.AbstractParser<PrimInvokeNode>() {
      @java.lang.Override
      public PrimInvokeNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PrimInvokeNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<PrimInvokeNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<PrimInvokeNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.PrimInvokeNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ProtocolInvokeNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.ProtocolInvokeNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     * @return Whether the protocolFn field is set.
     */
    boolean hasProtocolFn();
    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     * @return The protocolFn.
     */
    clojureRT.protobuf.Protobuf.Node getProtocolFn();
    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getProtocolFnOrBuilder();

    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();
  }
  /**
   * <pre>
   * Node for an invoke expression where the function is a protocol function var 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.ProtocolInvokeNode}
   */
  public static final class ProtocolInvokeNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.ProtocolInvokeNode)
      ProtocolInvokeNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ProtocolInvokeNode.newBuilder() to construct.
    private ProtocolInvokeNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ProtocolInvokeNode() {
      args_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ProtocolInvokeNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ProtocolInvokeNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (protocolFn_ != null) {
                subBuilder = protocolFn_.toBuilder();
              }
              protocolFn_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(protocolFn_);
                protocolFn_ = subBuilder.buildPartial();
              }

              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ProtocolInvokeNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.ProtocolInvokeNode.class, clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder.class);
    }

    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the protocol function 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int PROTOCOLFN_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node protocolFn_;
    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     * @return Whether the protocolFn field is set.
     */
    @java.lang.Override
    public boolean hasProtocolFn() {
      return protocolFn_ != null;
    }
    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     * @return The protocolFn.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getProtocolFn() {
      return protocolFn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : protocolFn_;
    }
    /**
     * <pre>
     * An AST node representing the protocol function var to invoke 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getProtocolFnOrBuilder() {
      return getProtocolFn();
    }

    public static final int TARGET_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the target of the protocol function call 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (protocolFn_ != null) {
        output.writeMessage(2, getProtocolFn());
      }
      if (target_ != null) {
        output.writeMessage(3, getTarget());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (protocolFn_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getProtocolFn());
      }
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTarget());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.ProtocolInvokeNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.ProtocolInvokeNode other = (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (hasProtocolFn() != other.hasProtocolFn()) return false;
      if (hasProtocolFn()) {
        if (!getProtocolFn()
            .equals(other.getProtocolFn())) return false;
      }
      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      if (hasProtocolFn()) {
        hash = (37 * hash) + PROTOCOLFN_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolFn().hashCode();
      }
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.ProtocolInvokeNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for an invoke expression where the function is a protocol function var 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.ProtocolInvokeNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.ProtocolInvokeNode)
        clojureRT.protobuf.Protobuf.ProtocolInvokeNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ProtocolInvokeNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.ProtocolInvokeNode.class, clojureRT.protobuf.Protobuf.ProtocolInvokeNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.ProtocolInvokeNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        if (protocolFnBuilder_ == null) {
          protocolFn_ = null;
        } else {
          protocolFn_ = null;
          protocolFnBuilder_ = null;
        }
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNode build() {
        clojureRT.protobuf.Protobuf.ProtocolInvokeNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ProtocolInvokeNode buildPartial() {
        clojureRT.protobuf.Protobuf.ProtocolInvokeNode result = new clojureRT.protobuf.Protobuf.ProtocolInvokeNode(this);
        int from_bitField0_ = bitField0_;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        if (protocolFnBuilder_ == null) {
          result.protocolFn_ = protocolFn_;
        } else {
          result.protocolFn_ = protocolFnBuilder_.build();
        }
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.ProtocolInvokeNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.ProtocolInvokeNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.ProtocolInvokeNode other) {
        if (other == clojureRT.protobuf.Protobuf.ProtocolInvokeNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (other.hasProtocolFn()) {
          mergeProtocolFn(other.getProtocolFn());
        }
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.ProtocolInvokeNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.ProtocolInvokeNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the protocol function 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node protocolFn_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> protocolFnBuilder_;
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       * @return Whether the protocolFn field is set.
       */
      public boolean hasProtocolFn() {
        return protocolFnBuilder_ != null || protocolFn_ != null;
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       * @return The protocolFn.
       */
      public clojureRT.protobuf.Protobuf.Node getProtocolFn() {
        if (protocolFnBuilder_ == null) {
          return protocolFn_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : protocolFn_;
        } else {
          return protocolFnBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public Builder setProtocolFn(clojureRT.protobuf.Protobuf.Node value) {
        if (protocolFnBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          protocolFn_ = value;
          onChanged();
        } else {
          protocolFnBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public Builder setProtocolFn(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (protocolFnBuilder_ == null) {
          protocolFn_ = builderForValue.build();
          onChanged();
        } else {
          protocolFnBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public Builder mergeProtocolFn(clojureRT.protobuf.Protobuf.Node value) {
        if (protocolFnBuilder_ == null) {
          if (protocolFn_ != null) {
            protocolFn_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(protocolFn_).mergeFrom(value).buildPartial();
          } else {
            protocolFn_ = value;
          }
          onChanged();
        } else {
          protocolFnBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public Builder clearProtocolFn() {
        if (protocolFnBuilder_ == null) {
          protocolFn_ = null;
          onChanged();
        } else {
          protocolFn_ = null;
          protocolFnBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getProtocolFnBuilder() {
        
        onChanged();
        return getProtocolFnFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getProtocolFnOrBuilder() {
        if (protocolFnBuilder_ != null) {
          return protocolFnBuilder_.getMessageOrBuilder();
        } else {
          return protocolFn_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : protocolFn_;
        }
      }
      /**
       * <pre>
       * An AST node representing the protocol function var to invoke 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node protocolFn = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getProtocolFnFieldBuilder() {
        if (protocolFnBuilder_ == null) {
          protocolFnBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getProtocolFn(),
                  getParentForChildren(),
                  isClean());
          protocolFn_ = null;
        }
        return protocolFnBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the target of the protocol function call 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.ProtocolInvokeNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.ProtocolInvokeNode)
    private static final clojureRT.protobuf.Protobuf.ProtocolInvokeNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.ProtocolInvokeNode();
    }

    public static clojureRT.protobuf.Protobuf.ProtocolInvokeNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ProtocolInvokeNode>
        PARSER = new com.google.protobuf.AbstractParser<ProtocolInvokeNode>() {
      @java.lang.Override
      public ProtocolInvokeNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ProtocolInvokeNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ProtocolInvokeNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ProtocolInvokeNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ProtocolInvokeNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface QuoteNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.QuoteNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return Whether the expr field is set.
     */
    boolean hasExpr();
    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return The expr.
     */
    clojureRT.protobuf.Protobuf.Node getExpr();
    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder();

    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isLiteral = 2;</code>
     * @return The isLiteral.
     */
    boolean getIsLiteral();
  }
  /**
   * <pre>
   * Node for a quote special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.QuoteNode}
   */
  public static final class QuoteNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.QuoteNode)
      QuoteNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use QuoteNode.newBuilder() to construct.
    private QuoteNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private QuoteNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new QuoteNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private QuoteNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (expr_ != null) {
                subBuilder = expr_.toBuilder();
              }
              expr_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expr_);
                expr_ = subBuilder.buildPartial();
              }

              break;
            }
            case 16: {

              isLiteral_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_QuoteNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_QuoteNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.QuoteNode.class, clojureRT.protobuf.Protobuf.QuoteNode.Builder.class);
    }

    public static final int EXPR_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node expr_;
    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return Whether the expr field is set.
     */
    @java.lang.Override
    public boolean hasExpr() {
      return expr_ != null;
    }
    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return The expr.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getExpr() {
      return expr_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
    }
    /**
     * <pre>
     * A :const AST node representing the quoted value 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder() {
      return getExpr();
    }

    public static final int ISLITERAL_FIELD_NUMBER = 2;
    private boolean isLiteral_;
    /**
     * <pre>
     * `true` 
     * </pre>
     *
     * <code>bool isLiteral = 2;</code>
     * @return The isLiteral.
     */
    @java.lang.Override
    public boolean getIsLiteral() {
      return isLiteral_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expr_ != null) {
        output.writeMessage(1, getExpr());
      }
      if (isLiteral_ != false) {
        output.writeBool(2, isLiteral_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpr());
      }
      if (isLiteral_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, isLiteral_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.QuoteNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.QuoteNode other = (clojureRT.protobuf.Protobuf.QuoteNode) obj;

      if (hasExpr() != other.hasExpr()) return false;
      if (hasExpr()) {
        if (!getExpr()
            .equals(other.getExpr())) return false;
      }
      if (getIsLiteral()
          != other.getIsLiteral()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpr()) {
        hash = (37 * hash) + EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getExpr().hashCode();
      }
      hash = (37 * hash) + ISLITERAL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getIsLiteral());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.QuoteNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.QuoteNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a quote special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.QuoteNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.QuoteNode)
        clojureRT.protobuf.Protobuf.QuoteNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_QuoteNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_QuoteNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.QuoteNode.class, clojureRT.protobuf.Protobuf.QuoteNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.QuoteNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exprBuilder_ == null) {
          expr_ = null;
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }
        isLiteral_ = false;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_QuoteNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.QuoteNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.QuoteNode build() {
        clojureRT.protobuf.Protobuf.QuoteNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.QuoteNode buildPartial() {
        clojureRT.protobuf.Protobuf.QuoteNode result = new clojureRT.protobuf.Protobuf.QuoteNode(this);
        if (exprBuilder_ == null) {
          result.expr_ = expr_;
        } else {
          result.expr_ = exprBuilder_.build();
        }
        result.isLiteral_ = isLiteral_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.QuoteNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.QuoteNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.QuoteNode other) {
        if (other == clojureRT.protobuf.Protobuf.QuoteNode.getDefaultInstance()) return this;
        if (other.hasExpr()) {
          mergeExpr(other.getExpr());
        }
        if (other.getIsLiteral() != false) {
          setIsLiteral(other.getIsLiteral());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.QuoteNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.QuoteNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node expr_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> exprBuilder_;
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       * @return Whether the expr field is set.
       */
      public boolean hasExpr() {
        return exprBuilder_ != null || expr_ != null;
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       * @return The expr.
       */
      public clojureRT.protobuf.Protobuf.Node getExpr() {
        if (exprBuilder_ == null) {
          return expr_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
        } else {
          return exprBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder setExpr(clojureRT.protobuf.Protobuf.Node value) {
        if (exprBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expr_ = value;
          onChanged();
        } else {
          exprBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder setExpr(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exprBuilder_ == null) {
          expr_ = builderForValue.build();
          onChanged();
        } else {
          exprBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder mergeExpr(clojureRT.protobuf.Protobuf.Node value) {
        if (exprBuilder_ == null) {
          if (expr_ != null) {
            expr_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(expr_).mergeFrom(value).buildPartial();
          } else {
            expr_ = value;
          }
          onChanged();
        } else {
          exprBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder clearExpr() {
        if (exprBuilder_ == null) {
          expr_ = null;
          onChanged();
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getExprBuilder() {
        
        onChanged();
        return getExprFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder() {
        if (exprBuilder_ != null) {
          return exprBuilder_.getMessageOrBuilder();
        } else {
          return expr_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
        }
      }
      /**
       * <pre>
       * A :const AST node representing the quoted value 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getExprFieldBuilder() {
        if (exprBuilder_ == null) {
          exprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getExpr(),
                  getParentForChildren(),
                  isClean());
          expr_ = null;
        }
        return exprBuilder_;
      }

      private boolean isLiteral_ ;
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 2;</code>
       * @return The isLiteral.
       */
      @java.lang.Override
      public boolean getIsLiteral() {
        return isLiteral_;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 2;</code>
       * @param value The isLiteral to set.
       * @return This builder for chaining.
       */
      public Builder setIsLiteral(boolean value) {
        
        isLiteral_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` 
       * </pre>
       *
       * <code>bool isLiteral = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsLiteral() {
        
        isLiteral_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.QuoteNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.QuoteNode)
    private static final clojureRT.protobuf.Protobuf.QuoteNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.QuoteNode();
    }

    public static clojureRT.protobuf.Protobuf.QuoteNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<QuoteNode>
        PARSER = new com.google.protobuf.AbstractParser<QuoteNode>() {
      @java.lang.Override
      public QuoteNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new QuoteNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<QuoteNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<QuoteNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.QuoteNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface RecurNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.RecurNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getExprsList();
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getExprs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    int getExprsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getExprsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getExprsOrBuilder(
        int index);

    /**
     * <pre>
     * Unique symbol identifying the enclosing loop target 
     * </pre>
     *
     * <code>string loopId = 2;</code>
     * @return The loopId.
     */
    java.lang.String getLoopId();
    /**
     * <pre>
     * Unique symbol identifying the enclosing loop target 
     * </pre>
     *
     * <code>string loopId = 2;</code>
     * @return The bytes for loopId.
     */
    com.google.protobuf.ByteString
        getLoopIdBytes();
  }
  /**
   * <pre>
   * Node for a recur special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.RecurNode}
   */
  public static final class RecurNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.RecurNode)
      RecurNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use RecurNode.newBuilder() to construct.
    private RecurNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private RecurNode() {
      exprs_ = java.util.Collections.emptyList();
      loopId_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new RecurNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private RecurNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                exprs_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              exprs_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              loopId_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          exprs_ = java.util.Collections.unmodifiableList(exprs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_RecurNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_RecurNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.RecurNode.class, clojureRT.protobuf.Protobuf.RecurNode.Builder.class);
    }

    public static final int EXPRS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> exprs_;
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getExprsList() {
      return exprs_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getExprsOrBuilderList() {
      return exprs_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    @java.lang.Override
    public int getExprsCount() {
      return exprs_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getExprs(int index) {
      return exprs_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprsOrBuilder(
        int index) {
      return exprs_.get(index);
    }

    public static final int LOOPID_FIELD_NUMBER = 2;
    private volatile java.lang.Object loopId_;
    /**
     * <pre>
     * Unique symbol identifying the enclosing loop target 
     * </pre>
     *
     * <code>string loopId = 2;</code>
     * @return The loopId.
     */
    @java.lang.Override
    public java.lang.String getLoopId() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        loopId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Unique symbol identifying the enclosing loop target 
     * </pre>
     *
     * <code>string loopId = 2;</code>
     * @return The bytes for loopId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getLoopIdBytes() {
      java.lang.Object ref = loopId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        loopId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < exprs_.size(); i++) {
        output.writeMessage(1, exprs_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, loopId_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < exprs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, exprs_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(loopId_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, loopId_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.RecurNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.RecurNode other = (clojureRT.protobuf.Protobuf.RecurNode) obj;

      if (!getExprsList()
          .equals(other.getExprsList())) return false;
      if (!getLoopId()
          .equals(other.getLoopId())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getExprsCount() > 0) {
        hash = (37 * hash) + EXPRS_FIELD_NUMBER;
        hash = (53 * hash) + getExprsList().hashCode();
      }
      hash = (37 * hash) + LOOPID_FIELD_NUMBER;
      hash = (53 * hash) + getLoopId().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.RecurNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.RecurNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a recur special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.RecurNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.RecurNode)
        clojureRT.protobuf.Protobuf.RecurNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_RecurNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_RecurNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.RecurNode.class, clojureRT.protobuf.Protobuf.RecurNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.RecurNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getExprsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exprsBuilder_ == null) {
          exprs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          exprsBuilder_.clear();
        }
        loopId_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_RecurNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.RecurNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.RecurNode build() {
        clojureRT.protobuf.Protobuf.RecurNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.RecurNode buildPartial() {
        clojureRT.protobuf.Protobuf.RecurNode result = new clojureRT.protobuf.Protobuf.RecurNode(this);
        int from_bitField0_ = bitField0_;
        if (exprsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            exprs_ = java.util.Collections.unmodifiableList(exprs_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.exprs_ = exprs_;
        } else {
          result.exprs_ = exprsBuilder_.build();
        }
        result.loopId_ = loopId_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.RecurNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.RecurNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.RecurNode other) {
        if (other == clojureRT.protobuf.Protobuf.RecurNode.getDefaultInstance()) return this;
        if (exprsBuilder_ == null) {
          if (!other.exprs_.isEmpty()) {
            if (exprs_.isEmpty()) {
              exprs_ = other.exprs_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureExprsIsMutable();
              exprs_.addAll(other.exprs_);
            }
            onChanged();
          }
        } else {
          if (!other.exprs_.isEmpty()) {
            if (exprsBuilder_.isEmpty()) {
              exprsBuilder_.dispose();
              exprsBuilder_ = null;
              exprs_ = other.exprs_;
              bitField0_ = (bitField0_ & ~0x00000001);
              exprsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getExprsFieldBuilder() : null;
            } else {
              exprsBuilder_.addAllMessages(other.exprs_);
            }
          }
        }
        if (!other.getLoopId().isEmpty()) {
          loopId_ = other.loopId_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.RecurNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.RecurNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> exprs_ =
        java.util.Collections.emptyList();
      private void ensureExprsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          exprs_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(exprs_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> exprsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getExprsList() {
        if (exprsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(exprs_);
        } else {
          return exprsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public int getExprsCount() {
        if (exprsBuilder_ == null) {
          return exprs_.size();
        } else {
          return exprsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getExprs(int index) {
        if (exprsBuilder_ == null) {
          return exprs_.get(index);
        } else {
          return exprsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder setExprs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (exprsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExprsIsMutable();
          exprs_.set(index, value);
          onChanged();
        } else {
          exprsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder setExprs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exprsBuilder_ == null) {
          ensureExprsIsMutable();
          exprs_.set(index, builderForValue.build());
          onChanged();
        } else {
          exprsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder addExprs(clojureRT.protobuf.Protobuf.Node value) {
        if (exprsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExprsIsMutable();
          exprs_.add(value);
          onChanged();
        } else {
          exprsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder addExprs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (exprsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureExprsIsMutable();
          exprs_.add(index, value);
          onChanged();
        } else {
          exprsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder addExprs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exprsBuilder_ == null) {
          ensureExprsIsMutable();
          exprs_.add(builderForValue.build());
          onChanged();
        } else {
          exprsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder addExprs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exprsBuilder_ == null) {
          ensureExprsIsMutable();
          exprs_.add(index, builderForValue.build());
          onChanged();
        } else {
          exprsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder addAllExprs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (exprsBuilder_ == null) {
          ensureExprsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, exprs_);
          onChanged();
        } else {
          exprsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder clearExprs() {
        if (exprsBuilder_ == null) {
          exprs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          exprsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public Builder removeExprs(int index) {
        if (exprsBuilder_ == null) {
          ensureExprsIsMutable();
          exprs_.remove(index);
          onChanged();
        } else {
          exprsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getExprsBuilder(
          int index) {
        return getExprsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprsOrBuilder(
          int index) {
        if (exprsBuilder_ == null) {
          return exprs_.get(index);  } else {
          return exprsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getExprsOrBuilderList() {
        if (exprsBuilder_ != null) {
          return exprsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(exprs_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addExprsBuilder() {
        return getExprsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addExprsBuilder(
          int index) {
        return getExprsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the new bound values for the loop binding on the next loop iteration 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node exprs = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getExprsBuilderList() {
        return getExprsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getExprsFieldBuilder() {
        if (exprsBuilder_ == null) {
          exprsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  exprs_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          exprs_ = null;
        }
        return exprsBuilder_;
      }

      private java.lang.Object loopId_ = "";
      /**
       * <pre>
       * Unique symbol identifying the enclosing loop target 
       * </pre>
       *
       * <code>string loopId = 2;</code>
       * @return The loopId.
       */
      public java.lang.String getLoopId() {
        java.lang.Object ref = loopId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          loopId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying the enclosing loop target 
       * </pre>
       *
       * <code>string loopId = 2;</code>
       * @return The bytes for loopId.
       */
      public com.google.protobuf.ByteString
          getLoopIdBytes() {
        java.lang.Object ref = loopId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          loopId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Unique symbol identifying the enclosing loop target 
       * </pre>
       *
       * <code>string loopId = 2;</code>
       * @param value The loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopId(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        loopId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying the enclosing loop target 
       * </pre>
       *
       * <code>string loopId = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoopId() {
        
        loopId_ = getDefaultInstance().getLoopId();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Unique symbol identifying the enclosing loop target 
       * </pre>
       *
       * <code>string loopId = 2;</code>
       * @param value The bytes for loopId to set.
       * @return This builder for chaining.
       */
      public Builder setLoopIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        loopId_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.RecurNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.RecurNode)
    private static final clojureRT.protobuf.Protobuf.RecurNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.RecurNode();
    }

    public static clojureRT.protobuf.Protobuf.RecurNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<RecurNode>
        PARSER = new com.google.protobuf.AbstractParser<RecurNode>() {
      @java.lang.Override
      public RecurNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RecurNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<RecurNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<RecurNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.RecurNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ReifyNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.ReifyNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The generated class for the reify, should *never* be instantiated or used on instance? checks 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The className.
     */
    java.lang.String getClassName();
    /**
     * <pre>
     * The generated class for the reify, should *never* be instantiated or used on instance? checks 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The bytes for className.
     */
    com.google.protobuf.ByteString
        getClassNameBytes();

    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @return A list containing the interfaces.
     */
    java.util.List<java.lang.String>
        getInterfacesList();
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @return The count of interfaces.
     */
    int getInterfacesCount();
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @param index The index of the element to return.
     * @return The interfaces at the given index.
     */
    java.lang.String getInterfaces(int index);
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the interfaces at the given index.
     */
    com.google.protobuf.ByteString
        getInterfacesBytes(int index);

    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getMethodsList();
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    clojureRT.protobuf.Protobuf.Node getMethods(int index);
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    int getMethodsCount();
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList();
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a reify* special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.ReifyNode}
   */
  public static final class ReifyNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.ReifyNode)
      ReifyNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ReifyNode.newBuilder() to construct.
    private ReifyNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ReifyNode() {
      className_ = "";
      interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      methods_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ReifyNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ReifyNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              className_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                interfaces_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              interfaces_.add(s);
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000002;
              }
              methods_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          interfaces_ = interfaces_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          methods_ = java.util.Collections.unmodifiableList(methods_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ReifyNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ReifyNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.ReifyNode.class, clojureRT.protobuf.Protobuf.ReifyNode.Builder.class);
    }

    public static final int CLASSNAME_FIELD_NUMBER = 1;
    private volatile java.lang.Object className_;
    /**
     * <pre>
     * The generated class for the reify, should *never* be instantiated or used on instance? checks 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The className.
     */
    @java.lang.Override
    public java.lang.String getClassName() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        className_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The generated class for the reify, should *never* be instantiated or used on instance? checks 
     * </pre>
     *
     * <code>string className = 1;</code>
     * @return The bytes for className.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClassNameBytes() {
      java.lang.Object ref = className_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        className_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int INTERFACES_FIELD_NUMBER = 2;
    private com.google.protobuf.LazyStringList interfaces_;
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @return A list containing the interfaces.
     */
    public com.google.protobuf.ProtocolStringList
        getInterfacesList() {
      return interfaces_;
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @return The count of interfaces.
     */
    public int getInterfacesCount() {
      return interfaces_.size();
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @param index The index of the element to return.
     * @return The interfaces at the given index.
     */
    public java.lang.String getInterfaces(int index) {
      return interfaces_.get(index);
    }
    /**
     * <pre>
     * A set of the interfaces implemented by the generated type 
     * </pre>
     *
     * <code>repeated string interfaces = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the interfaces at the given index.
     */
    public com.google.protobuf.ByteString
        getInterfacesBytes(int index) {
      return interfaces_.getByteString(index);
    }

    public static final int METHODS_FIELD_NUMBER = 3;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_;
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getMethodsOrBuilderList() {
      return methods_;
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public int getMethodsCount() {
      return methods_.size();
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
      return methods_.get(index);
    }
    /**
     * <pre>
     * A vector :method AST nodes representing the reify methods 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
        int index) {
      return methods_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, className_);
      }
      for (int i = 0; i < interfaces_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, interfaces_.getRaw(i));
      }
      for (int i = 0; i < methods_.size(); i++) {
        output.writeMessage(3, methods_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(className_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, className_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < interfaces_.size(); i++) {
          dataSize += computeStringSizeNoTag(interfaces_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getInterfacesList().size();
      }
      for (int i = 0; i < methods_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, methods_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.ReifyNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.ReifyNode other = (clojureRT.protobuf.Protobuf.ReifyNode) obj;

      if (!getClassName()
          .equals(other.getClassName())) return false;
      if (!getInterfacesList()
          .equals(other.getInterfacesList())) return false;
      if (!getMethodsList()
          .equals(other.getMethodsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + CLASSNAME_FIELD_NUMBER;
      hash = (53 * hash) + getClassName().hashCode();
      if (getInterfacesCount() > 0) {
        hash = (37 * hash) + INTERFACES_FIELD_NUMBER;
        hash = (53 * hash) + getInterfacesList().hashCode();
      }
      if (getMethodsCount() > 0) {
        hash = (37 * hash) + METHODS_FIELD_NUMBER;
        hash = (53 * hash) + getMethodsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ReifyNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.ReifyNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a reify* special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.ReifyNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.ReifyNode)
        clojureRT.protobuf.Protobuf.ReifyNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ReifyNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ReifyNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.ReifyNode.class, clojureRT.protobuf.Protobuf.ReifyNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.ReifyNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMethodsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        className_ = "";

        interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          methodsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ReifyNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ReifyNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ReifyNode build() {
        clojureRT.protobuf.Protobuf.ReifyNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ReifyNode buildPartial() {
        clojureRT.protobuf.Protobuf.ReifyNode result = new clojureRT.protobuf.Protobuf.ReifyNode(this);
        int from_bitField0_ = bitField0_;
        result.className_ = className_;
        if (((bitField0_ & 0x00000001) != 0)) {
          interfaces_ = interfaces_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.interfaces_ = interfaces_;
        if (methodsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0)) {
            methods_ = java.util.Collections.unmodifiableList(methods_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.methods_ = methods_;
        } else {
          result.methods_ = methodsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.ReifyNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.ReifyNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.ReifyNode other) {
        if (other == clojureRT.protobuf.Protobuf.ReifyNode.getDefaultInstance()) return this;
        if (!other.getClassName().isEmpty()) {
          className_ = other.className_;
          onChanged();
        }
        if (!other.interfaces_.isEmpty()) {
          if (interfaces_.isEmpty()) {
            interfaces_ = other.interfaces_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureInterfacesIsMutable();
            interfaces_.addAll(other.interfaces_);
          }
          onChanged();
        }
        if (methodsBuilder_ == null) {
          if (!other.methods_.isEmpty()) {
            if (methods_.isEmpty()) {
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMethodsIsMutable();
              methods_.addAll(other.methods_);
            }
            onChanged();
          }
        } else {
          if (!other.methods_.isEmpty()) {
            if (methodsBuilder_.isEmpty()) {
              methodsBuilder_.dispose();
              methodsBuilder_ = null;
              methods_ = other.methods_;
              bitField0_ = (bitField0_ & ~0x00000002);
              methodsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMethodsFieldBuilder() : null;
            } else {
              methodsBuilder_.addAllMessages(other.methods_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.ReifyNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.ReifyNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object className_ = "";
      /**
       * <pre>
       * The generated class for the reify, should *never* be instantiated or used on instance? checks 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return The className.
       */
      public java.lang.String getClassName() {
        java.lang.Object ref = className_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          className_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The generated class for the reify, should *never* be instantiated or used on instance? checks 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return The bytes for className.
       */
      public com.google.protobuf.ByteString
          getClassNameBytes() {
        java.lang.Object ref = className_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          className_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The generated class for the reify, should *never* be instantiated or used on instance? checks 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @param value The className to set.
       * @return This builder for chaining.
       */
      public Builder setClassName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        className_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The generated class for the reify, should *never* be instantiated or used on instance? checks 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClassName() {
        
        className_ = getDefaultInstance().getClassName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The generated class for the reify, should *never* be instantiated or used on instance? checks 
       * </pre>
       *
       * <code>string className = 1;</code>
       * @param value The bytes for className to set.
       * @return This builder for chaining.
       */
      public Builder setClassNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        className_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureInterfacesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          interfaces_ = new com.google.protobuf.LazyStringArrayList(interfaces_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @return A list containing the interfaces.
       */
      public com.google.protobuf.ProtocolStringList
          getInterfacesList() {
        return interfaces_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @return The count of interfaces.
       */
      public int getInterfacesCount() {
        return interfaces_.size();
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param index The index of the element to return.
       * @return The interfaces at the given index.
       */
      public java.lang.String getInterfaces(int index) {
        return interfaces_.get(index);
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param index The index of the value to return.
       * @return The bytes of the interfaces at the given index.
       */
      public com.google.protobuf.ByteString
          getInterfacesBytes(int index) {
        return interfaces_.getByteString(index);
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param index The index to set the value at.
       * @param value The interfaces to set.
       * @return This builder for chaining.
       */
      public Builder setInterfaces(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInterfacesIsMutable();
        interfaces_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param value The interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addInterfaces(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureInterfacesIsMutable();
        interfaces_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param values The interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addAllInterfaces(
          java.lang.Iterable<java.lang.String> values) {
        ensureInterfacesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, interfaces_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearInterfaces() {
        interfaces_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the interfaces implemented by the generated type 
       * </pre>
       *
       * <code>repeated string interfaces = 2;</code>
       * @param value The bytes of the interfaces to add.
       * @return This builder for chaining.
       */
      public Builder addInterfacesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureInterfacesIsMutable();
        interfaces_.add(value);
        onChanged();
        return this;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> methods_ =
        java.util.Collections.emptyList();
      private void ensureMethodsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          methods_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(methods_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> methodsBuilder_;

      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getMethodsList() {
        if (methodsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(methods_);
        } else {
          return methodsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public int getMethodsCount() {
        if (methodsBuilder_ == null) {
          return methods_.size();
        } else {
          return methodsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getMethods(int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);
        } else {
          return methodsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.set(index, value);
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder setMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.set(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (methodsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMethodsIsMutable();
          methods_.add(index, value);
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addMethods(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.add(index, builderForValue.build());
          onChanged();
        } else {
          methodsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder addAllMethods(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, methods_);
          onChanged();
        } else {
          methodsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder clearMethods() {
        if (methodsBuilder_ == null) {
          methods_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          methodsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public Builder removeMethods(int index) {
        if (methodsBuilder_ == null) {
          ensureMethodsIsMutable();
          methods_.remove(index);
          onChanged();
        } else {
          methodsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMethodsOrBuilder(
          int index) {
        if (methodsBuilder_ == null) {
          return methods_.get(index);  } else {
          return methodsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getMethodsOrBuilderList() {
        if (methodsBuilder_ != null) {
          return methodsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(methods_);
        }
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder() {
        return getMethodsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addMethodsBuilder(
          int index) {
        return getMethodsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector :method AST nodes representing the reify methods 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node methods = 3;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getMethodsBuilderList() {
        return getMethodsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMethodsFieldBuilder() {
        if (methodsBuilder_ == null) {
          methodsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  methods_,
                  ((bitField0_ & 0x00000002) != 0),
                  getParentForChildren(),
                  isClean());
          methods_ = null;
        }
        return methodsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.ReifyNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.ReifyNode)
    private static final clojureRT.protobuf.Protobuf.ReifyNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.ReifyNode();
    }

    public static clojureRT.protobuf.Protobuf.ReifyNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ReifyNode>
        PARSER = new com.google.protobuf.AbstractParser<ReifyNode>() {
      @java.lang.Override
      public ReifyNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ReifyNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ReifyNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ReifyNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ReifyNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface SetNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.SetNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getItemsList();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getItems(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    int getItemsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getItemsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a set literal with attached metadata and/or non literal elements 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.SetNode}
   */
  public static final class SetNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.SetNode)
      SetNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use SetNode.newBuilder() to construct.
    private SetNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private SetNode() {
      items_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new SetNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private SetNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                items_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              items_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          items_ = java.util.Collections.unmodifiableList(items_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_SetNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_SetNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.SetNode.class, clojureRT.protobuf.Protobuf.SetNode.Builder.class);
    }

    public static final int ITEMS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> items_;
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getItemsList() {
      return items_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getItemsOrBuilderList() {
      return items_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public int getItemsCount() {
      return items_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getItems(int index) {
      return items_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the set 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
        int index) {
      return items_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < items_.size(); i++) {
        output.writeMessage(1, items_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < items_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, items_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.SetNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.SetNode other = (clojureRT.protobuf.Protobuf.SetNode) obj;

      if (!getItemsList()
          .equals(other.getItemsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getItemsCount() > 0) {
        hash = (37 * hash) + ITEMS_FIELD_NUMBER;
        hash = (53 * hash) + getItemsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.SetNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.SetNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a set literal with attached metadata and/or non literal elements 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.SetNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.SetNode)
        clojureRT.protobuf.Protobuf.SetNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_SetNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_SetNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.SetNode.class, clojureRT.protobuf.Protobuf.SetNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.SetNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getItemsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_SetNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.SetNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.SetNode build() {
        clojureRT.protobuf.Protobuf.SetNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.SetNode buildPartial() {
        clojureRT.protobuf.Protobuf.SetNode result = new clojureRT.protobuf.Protobuf.SetNode(this);
        int from_bitField0_ = bitField0_;
        if (itemsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            items_ = java.util.Collections.unmodifiableList(items_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.items_ = items_;
        } else {
          result.items_ = itemsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.SetNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.SetNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.SetNode other) {
        if (other == clojureRT.protobuf.Protobuf.SetNode.getDefaultInstance()) return this;
        if (itemsBuilder_ == null) {
          if (!other.items_.isEmpty()) {
            if (items_.isEmpty()) {
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureItemsIsMutable();
              items_.addAll(other.items_);
            }
            onChanged();
          }
        } else {
          if (!other.items_.isEmpty()) {
            if (itemsBuilder_.isEmpty()) {
              itemsBuilder_.dispose();
              itemsBuilder_ = null;
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
              itemsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getItemsFieldBuilder() : null;
            } else {
              itemsBuilder_.addAllMessages(other.items_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.SetNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.SetNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> items_ =
        java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          items_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(items_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> itemsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getItemsList() {
        if (itemsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(items_);
        } else {
          return itemsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public int getItemsCount() {
        if (itemsBuilder_ == null) {
          return items_.size();
        } else {
          return itemsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getItems(int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);
        } else {
          return itemsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder setItems(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.set(index, value);
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder setItems(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.set(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(index, value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addAllItems(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, items_);
          onChanged();
        } else {
          itemsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder clearItems() {
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder removeItems(int index) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.remove(index);
          onChanged();
        } else {
          itemsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getItemsBuilder(
          int index) {
        return getItemsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
          int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);  } else {
          return itemsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getItemsOrBuilderList() {
        if (itemsBuilder_ != null) {
          return itemsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(items_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addItemsBuilder() {
        return getItemsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addItemsBuilder(
          int index) {
        return getItemsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the set 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getItemsBuilderList() {
        return getItemsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getItemsFieldBuilder() {
        if (itemsBuilder_ == null) {
          itemsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  items_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          items_ = null;
        }
        return itemsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.SetNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.SetNode)
    private static final clojureRT.protobuf.Protobuf.SetNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.SetNode();
    }

    public static clojureRT.protobuf.Protobuf.SetNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<SetNode>
        PARSER = new com.google.protobuf.AbstractParser<SetNode>() {
      @java.lang.Override
      public SetNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new SetNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<SetNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<SetNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.SetNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MutateSetNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.MutateSetNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    boolean hasTarget();
    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    clojureRT.protobuf.Protobuf.Node getTarget();
    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder();

    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     * @return Whether the val field is set.
     */
    boolean hasVal();
    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     * @return The val.
     */
    clojureRT.protobuf.Protobuf.Node getVal();
    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getValOrBuilder();
  }
  /**
   * <pre>
   * Node for a set! special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.MutateSetNode}
   */
  public static final class MutateSetNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.MutateSetNode)
      MutateSetNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MutateSetNode.newBuilder() to construct.
    private MutateSetNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MutateSetNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MutateSetNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MutateSetNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (target_ != null) {
                subBuilder = target_.toBuilder();
              }
              target_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(target_);
                target_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (val_ != null) {
                subBuilder = val_.toBuilder();
              }
              val_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(val_);
                val_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MutateSetNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MutateSetNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.MutateSetNode.class, clojureRT.protobuf.Protobuf.MutateSetNode.Builder.class);
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node target_;
    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return Whether the target field is set.
     */
    @java.lang.Override
    public boolean hasTarget() {
      return target_ != null;
    }
    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     * @return The target.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getTarget() {
      return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
    }
    /**
     * <pre>
     * An AST node representing the target of the set! expression, must be :assignable? 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node target = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
      return getTarget();
    }

    public static final int VAL_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node val_;
    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     * @return Whether the val field is set.
     */
    @java.lang.Override
    public boolean hasVal() {
      return val_ != null;
    }
    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     * @return The val.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getVal() {
      return val_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : val_;
    }
    /**
     * <pre>
     * An AST node representing the new value for the target 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node val = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getValOrBuilder() {
      return getVal();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (target_ != null) {
        output.writeMessage(1, getTarget());
      }
      if (val_ != null) {
        output.writeMessage(2, getVal());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (target_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTarget());
      }
      if (val_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getVal());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.MutateSetNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.MutateSetNode other = (clojureRT.protobuf.Protobuf.MutateSetNode) obj;

      if (hasTarget() != other.hasTarget()) return false;
      if (hasTarget()) {
        if (!getTarget()
            .equals(other.getTarget())) return false;
      }
      if (hasVal() != other.hasVal()) return false;
      if (hasVal()) {
        if (!getVal()
            .equals(other.getVal())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTarget()) {
        hash = (37 * hash) + TARGET_FIELD_NUMBER;
        hash = (53 * hash) + getTarget().hashCode();
      }
      if (hasVal()) {
        hash = (37 * hash) + VAL_FIELD_NUMBER;
        hash = (53 * hash) + getVal().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.MutateSetNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.MutateSetNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a set! special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.MutateSetNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.MutateSetNode)
        clojureRT.protobuf.Protobuf.MutateSetNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MutateSetNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MutateSetNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.MutateSetNode.class, clojureRT.protobuf.Protobuf.MutateSetNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.MutateSetNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (targetBuilder_ == null) {
          target_ = null;
        } else {
          target_ = null;
          targetBuilder_ = null;
        }
        if (valBuilder_ == null) {
          val_ = null;
        } else {
          val_ = null;
          valBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_MutateSetNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MutateSetNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MutateSetNode build() {
        clojureRT.protobuf.Protobuf.MutateSetNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.MutateSetNode buildPartial() {
        clojureRT.protobuf.Protobuf.MutateSetNode result = new clojureRT.protobuf.Protobuf.MutateSetNode(this);
        if (targetBuilder_ == null) {
          result.target_ = target_;
        } else {
          result.target_ = targetBuilder_.build();
        }
        if (valBuilder_ == null) {
          result.val_ = val_;
        } else {
          result.val_ = valBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.MutateSetNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.MutateSetNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.MutateSetNode other) {
        if (other == clojureRT.protobuf.Protobuf.MutateSetNode.getDefaultInstance()) return this;
        if (other.hasTarget()) {
          mergeTarget(other.getTarget());
        }
        if (other.hasVal()) {
          mergeVal(other.getVal());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.MutateSetNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.MutateSetNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node target_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> targetBuilder_;
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return Whether the target field is set.
       */
      public boolean hasTarget() {
        return targetBuilder_ != null || target_ != null;
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       * @return The target.
       */
      public clojureRT.protobuf.Protobuf.Node getTarget() {
        if (targetBuilder_ == null) {
          return target_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        } else {
          return targetBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          target_ = value;
          onChanged();
        } else {
          targetBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder setTarget(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (targetBuilder_ == null) {
          target_ = builderForValue.build();
          onChanged();
        } else {
          targetBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder mergeTarget(clojureRT.protobuf.Protobuf.Node value) {
        if (targetBuilder_ == null) {
          if (target_ != null) {
            target_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(target_).mergeFrom(value).buildPartial();
          } else {
            target_ = value;
          }
          onChanged();
        } else {
          targetBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public Builder clearTarget() {
        if (targetBuilder_ == null) {
          target_ = null;
          onChanged();
        } else {
          target_ = null;
          targetBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getTargetBuilder() {
        
        onChanged();
        return getTargetFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getTargetOrBuilder() {
        if (targetBuilder_ != null) {
          return targetBuilder_.getMessageOrBuilder();
        } else {
          return target_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : target_;
        }
      }
      /**
       * <pre>
       * An AST node representing the target of the set! expression, must be :assignable? 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node target = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getTargetFieldBuilder() {
        if (targetBuilder_ == null) {
          targetBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getTarget(),
                  getParentForChildren(),
                  isClean());
          target_ = null;
        }
        return targetBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node val_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> valBuilder_;
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       * @return Whether the val field is set.
       */
      public boolean hasVal() {
        return valBuilder_ != null || val_ != null;
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       * @return The val.
       */
      public clojureRT.protobuf.Protobuf.Node getVal() {
        if (valBuilder_ == null) {
          return val_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : val_;
        } else {
          return valBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public Builder setVal(clojureRT.protobuf.Protobuf.Node value) {
        if (valBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          val_ = value;
          onChanged();
        } else {
          valBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public Builder setVal(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (valBuilder_ == null) {
          val_ = builderForValue.build();
          onChanged();
        } else {
          valBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public Builder mergeVal(clojureRT.protobuf.Protobuf.Node value) {
        if (valBuilder_ == null) {
          if (val_ != null) {
            val_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(val_).mergeFrom(value).buildPartial();
          } else {
            val_ = value;
          }
          onChanged();
        } else {
          valBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public Builder clearVal() {
        if (valBuilder_ == null) {
          val_ = null;
          onChanged();
        } else {
          val_ = null;
          valBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getValBuilder() {
        
        onChanged();
        return getValFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getValOrBuilder() {
        if (valBuilder_ != null) {
          return valBuilder_.getMessageOrBuilder();
        } else {
          return val_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : val_;
        }
      }
      /**
       * <pre>
       * An AST node representing the new value for the target 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node val = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getValFieldBuilder() {
        if (valBuilder_ == null) {
          valBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getVal(),
                  getParentForChildren(),
                  isClean());
          val_ = null;
        }
        return valBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.MutateSetNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.MutateSetNode)
    private static final clojureRT.protobuf.Protobuf.MutateSetNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.MutateSetNode();
    }

    public static clojureRT.protobuf.Protobuf.MutateSetNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MutateSetNode>
        PARSER = new com.google.protobuf.AbstractParser<MutateSetNode>() {
      @java.lang.Override
      public MutateSetNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MutateSetNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MutateSetNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MutateSetNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.MutateSetNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StaticCallNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.StaticCallNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getArgsList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getArgs(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    int getArgsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index);

    /**
     * <pre>
     * The Class the static method belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * The Class the static method belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();

    /**
     * <pre>
     * The symbol name of the static method 
     * </pre>
     *
     * <code>string method = 3;</code>
     * @return The method.
     */
    java.lang.String getMethod();
    /**
     * <pre>
     * The symbol name of the static method 
     * </pre>
     *
     * <code>string method = 3;</code>
     * @return The bytes for method.
     */
    com.google.protobuf.ByteString
        getMethodBytes();

    /**
     * <pre>
     * `true` if the static method could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 4;</code>
     * @return Whether the isValidated field is set.
     */
    boolean hasIsValidated();
    /**
     * <pre>
     * `true` if the static method could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 4;</code>
     * @return The isValidated.
     */
    boolean getIsValidated();
  }
  /**
   * <pre>
   * Node for a static method call 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.StaticCallNode}
   */
  public static final class StaticCallNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.StaticCallNode)
      StaticCallNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StaticCallNode.newBuilder() to construct.
    private StaticCallNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StaticCallNode() {
      args_ = java.util.Collections.emptyList();
      class__ = "";
      method_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StaticCallNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StaticCallNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              args_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              class__ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              method_ = s;
              break;
            }
            case 32: {
              bitField0_ |= 0x00000001;
              isValidated_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          args_ = java.util.Collections.unmodifiableList(args_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticCallNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticCallNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.StaticCallNode.class, clojureRT.protobuf.Protobuf.StaticCallNode.Builder.class);
    }

    private int bitField0_;
    public static final int ARGS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> args_;
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getArgsOrBuilderList() {
      return args_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public int getArgsCount() {
      return args_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
      return args_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the args to the method call 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
        int index) {
      return args_.get(index);
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * The Class the static method belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Class the static method belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int METHOD_FIELD_NUMBER = 3;
    private volatile java.lang.Object method_;
    /**
     * <pre>
     * The symbol name of the static method 
     * </pre>
     *
     * <code>string method = 3;</code>
     * @return The method.
     */
    @java.lang.Override
    public java.lang.String getMethod() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        method_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The symbol name of the static method 
     * </pre>
     *
     * <code>string method = 3;</code>
     * @return The bytes for method.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getMethodBytes() {
      java.lang.Object ref = method_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        method_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int ISVALIDATED_FIELD_NUMBER = 4;
    private boolean isValidated_;
    /**
     * <pre>
     * `true` if the static method could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 4;</code>
     * @return Whether the isValidated field is set.
     */
    @java.lang.Override
    public boolean hasIsValidated() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if the static method could be resolved at compile time 
     * </pre>
     *
     * <code>optional bool isValidated = 4;</code>
     * @return The isValidated.
     */
    @java.lang.Override
    public boolean getIsValidated() {
      return isValidated_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < args_.size(); i++) {
        output.writeMessage(1, args_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, method_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(4, isValidated_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < args_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, args_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(method_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, method_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, isValidated_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.StaticCallNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.StaticCallNode other = (clojureRT.protobuf.Protobuf.StaticCallNode) obj;

      if (!getArgsList()
          .equals(other.getArgsList())) return false;
      if (!getClass_()
          .equals(other.getClass_())) return false;
      if (!getMethod()
          .equals(other.getMethod())) return false;
      if (hasIsValidated() != other.hasIsValidated()) return false;
      if (hasIsValidated()) {
        if (getIsValidated()
            != other.getIsValidated()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getArgsCount() > 0) {
        hash = (37 * hash) + ARGS_FIELD_NUMBER;
        hash = (53 * hash) + getArgsList().hashCode();
      }
      hash = (37 * hash) + CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getClass_().hashCode();
      hash = (37 * hash) + METHOD_FIELD_NUMBER;
      hash = (53 * hash) + getMethod().hashCode();
      if (hasIsValidated()) {
        hash = (37 * hash) + ISVALIDATED_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsValidated());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticCallNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.StaticCallNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a static method call 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.StaticCallNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.StaticCallNode)
        clojureRT.protobuf.Protobuf.StaticCallNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticCallNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticCallNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.StaticCallNode.class, clojureRT.protobuf.Protobuf.StaticCallNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.StaticCallNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getArgsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          argsBuilder_.clear();
        }
        class__ = "";

        method_ = "";

        isValidated_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticCallNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticCallNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticCallNode build() {
        clojureRT.protobuf.Protobuf.StaticCallNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticCallNode buildPartial() {
        clojureRT.protobuf.Protobuf.StaticCallNode result = new clojureRT.protobuf.Protobuf.StaticCallNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (argsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            args_ = java.util.Collections.unmodifiableList(args_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.args_ = args_;
        } else {
          result.args_ = argsBuilder_.build();
        }
        result.class__ = class__;
        result.method_ = method_;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.isValidated_ = isValidated_;
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.StaticCallNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.StaticCallNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.StaticCallNode other) {
        if (other == clojureRT.protobuf.Protobuf.StaticCallNode.getDefaultInstance()) return this;
        if (argsBuilder_ == null) {
          if (!other.args_.isEmpty()) {
            if (args_.isEmpty()) {
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureArgsIsMutable();
              args_.addAll(other.args_);
            }
            onChanged();
          }
        } else {
          if (!other.args_.isEmpty()) {
            if (argsBuilder_.isEmpty()) {
              argsBuilder_.dispose();
              argsBuilder_ = null;
              args_ = other.args_;
              bitField0_ = (bitField0_ & ~0x00000001);
              argsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getArgsFieldBuilder() : null;
            } else {
              argsBuilder_.addAllMessages(other.args_);
            }
          }
        }
        if (!other.getClass_().isEmpty()) {
          class__ = other.class__;
          onChanged();
        }
        if (!other.getMethod().isEmpty()) {
          method_ = other.method_;
          onChanged();
        }
        if (other.hasIsValidated()) {
          setIsValidated(other.getIsValidated());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.StaticCallNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.StaticCallNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> args_ =
        java.util.Collections.emptyList();
      private void ensureArgsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          args_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(args_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> argsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getArgsList() {
        if (argsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(args_);
        } else {
          return argsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public int getArgsCount() {
        if (argsBuilder_ == null) {
          return args_.size();
        } else {
          return argsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getArgs(int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);
        } else {
          return argsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.set(index, value);
          onChanged();
        } else {
          argsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder setArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.set(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(value);
          onChanged();
        } else {
          argsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (argsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureArgsIsMutable();
          args_.add(index, value);
          onChanged();
        } else {
          argsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addArgs(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.add(index, builderForValue.build());
          onChanged();
        } else {
          argsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder addAllArgs(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, args_);
          onChanged();
        } else {
          argsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder clearArgs() {
        if (argsBuilder_ == null) {
          args_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          argsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public Builder removeArgs(int index) {
        if (argsBuilder_ == null) {
          ensureArgsIsMutable();
          args_.remove(index);
          onChanged();
        } else {
          argsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getArgsBuilder(
          int index) {
        return getArgsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getArgsOrBuilder(
          int index) {
        if (argsBuilder_ == null) {
          return args_.get(index);  } else {
          return argsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getArgsOrBuilderList() {
        if (argsBuilder_ != null) {
          return argsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(args_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder() {
        return getArgsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addArgsBuilder(
          int index) {
        return getArgsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the args to the method call 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node args = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getArgsBuilderList() {
        return getArgsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getArgsFieldBuilder() {
        if (argsBuilder_ == null) {
          argsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  args_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          args_ = null;
        }
        return argsBuilder_;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * The Class the static method belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Class the static method belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Class the static method belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class the static method belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class the static method belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        class__ = value;
        onChanged();
        return this;
      }

      private java.lang.Object method_ = "";
      /**
       * <pre>
       * The symbol name of the static method 
       * </pre>
       *
       * <code>string method = 3;</code>
       * @return The method.
       */
      public java.lang.String getMethod() {
        java.lang.Object ref = method_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          method_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the static method 
       * </pre>
       *
       * <code>string method = 3;</code>
       * @return The bytes for method.
       */
      public com.google.protobuf.ByteString
          getMethodBytes() {
        java.lang.Object ref = method_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          method_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the static method 
       * </pre>
       *
       * <code>string method = 3;</code>
       * @param value The method to set.
       * @return This builder for chaining.
       */
      public Builder setMethod(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        method_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the static method 
       * </pre>
       *
       * <code>string method = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMethod() {
        
        method_ = getDefaultInstance().getMethod();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the static method 
       * </pre>
       *
       * <code>string method = 3;</code>
       * @param value The bytes for method to set.
       * @return This builder for chaining.
       */
      public Builder setMethodBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        method_ = value;
        onChanged();
        return this;
      }

      private boolean isValidated_ ;
      /**
       * <pre>
       * `true` if the static method could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 4;</code>
       * @return Whether the isValidated field is set.
       */
      @java.lang.Override
      public boolean hasIsValidated() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * `true` if the static method could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 4;</code>
       * @return The isValidated.
       */
      @java.lang.Override
      public boolean getIsValidated() {
        return isValidated_;
      }
      /**
       * <pre>
       * `true` if the static method could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 4;</code>
       * @param value The isValidated to set.
       * @return This builder for chaining.
       */
      public Builder setIsValidated(boolean value) {
        bitField0_ |= 0x00000002;
        isValidated_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the static method could be resolved at compile time 
       * </pre>
       *
       * <code>optional bool isValidated = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsValidated() {
        bitField0_ = (bitField0_ & ~0x00000002);
        isValidated_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.StaticCallNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.StaticCallNode)
    private static final clojureRT.protobuf.Protobuf.StaticCallNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.StaticCallNode();
    }

    public static clojureRT.protobuf.Protobuf.StaticCallNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StaticCallNode>
        PARSER = new com.google.protobuf.AbstractParser<StaticCallNode>() {
      @java.lang.Override
      public StaticCallNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StaticCallNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StaticCallNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StaticCallNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticCallNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StaticFieldNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.StaticFieldNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` if the static field is set!able 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return Whether the isAssignable field is set.
     */
    boolean hasIsAssignable();
    /**
     * <pre>
     * `true` if the static field is set!able 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    boolean getIsAssignable();

    /**
     * <pre>
     * The Class the static field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    java.lang.String getClass_();
    /**
     * <pre>
     * The Class the static field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    com.google.protobuf.ByteString
        getClass_Bytes();

    /**
     * <pre>
     * The symbol name of the static field 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The field.
     */
    java.lang.String getField();
    /**
     * <pre>
     * The symbol name of the static field 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The bytes for field.
     */
    com.google.protobuf.ByteString
        getFieldBytes();
  }
  /**
   * <pre>
   * Node for a static field access 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.StaticFieldNode}
   */
  public static final class StaticFieldNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.StaticFieldNode)
      StaticFieldNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StaticFieldNode.newBuilder() to construct.
    private StaticFieldNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StaticFieldNode() {
      class__ = "";
      field_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StaticFieldNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StaticFieldNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              isAssignable_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              class__ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              field_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticFieldNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticFieldNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.StaticFieldNode.class, clojureRT.protobuf.Protobuf.StaticFieldNode.Builder.class);
    }

    private int bitField0_;
    public static final int ISASSIGNABLE_FIELD_NUMBER = 1;
    private boolean isAssignable_;
    /**
     * <pre>
     * `true` if the static field is set!able 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return Whether the isAssignable field is set.
     */
    @java.lang.Override
    public boolean hasIsAssignable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if the static field is set!able 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    @java.lang.Override
    public boolean getIsAssignable() {
      return isAssignable_;
    }

    public static final int CLASS_FIELD_NUMBER = 2;
    private volatile java.lang.Object class__;
    /**
     * <pre>
     * The Class the static field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The class.
     */
    @java.lang.Override
    public java.lang.String getClass_() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        class__ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Class the static field belongs to 
     * </pre>
     *
     * <code>string class = 2;</code>
     * @return The bytes for class.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getClass_Bytes() {
      java.lang.Object ref = class__;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        class__ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FIELD_FIELD_NUMBER = 3;
    private volatile java.lang.Object field_;
    /**
     * <pre>
     * The symbol name of the static field 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The field.
     */
    @java.lang.Override
    public java.lang.String getField() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        field_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The symbol name of the static field 
     * </pre>
     *
     * <code>string field = 3;</code>
     * @return The bytes for field.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFieldBytes() {
      java.lang.Object ref = field_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        field_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, field_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(class__)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, class__);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(field_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, field_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.StaticFieldNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.StaticFieldNode other = (clojureRT.protobuf.Protobuf.StaticFieldNode) obj;

      if (hasIsAssignable() != other.hasIsAssignable()) return false;
      if (hasIsAssignable()) {
        if (getIsAssignable()
            != other.getIsAssignable()) return false;
      }
      if (!getClass_()
          .equals(other.getClass_())) return false;
      if (!getField()
          .equals(other.getField())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsAssignable()) {
        hash = (37 * hash) + ISASSIGNABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsAssignable());
      }
      hash = (37 * hash) + CLASS_FIELD_NUMBER;
      hash = (53 * hash) + getClass_().hashCode();
      hash = (37 * hash) + FIELD_FIELD_NUMBER;
      hash = (53 * hash) + getField().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.StaticFieldNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.StaticFieldNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a static field access 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.StaticFieldNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.StaticFieldNode)
        clojureRT.protobuf.Protobuf.StaticFieldNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticFieldNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticFieldNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.StaticFieldNode.class, clojureRT.protobuf.Protobuf.StaticFieldNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.StaticFieldNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isAssignable_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        class__ = "";

        field_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_StaticFieldNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticFieldNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticFieldNode build() {
        clojureRT.protobuf.Protobuf.StaticFieldNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.StaticFieldNode buildPartial() {
        clojureRT.protobuf.Protobuf.StaticFieldNode result = new clojureRT.protobuf.Protobuf.StaticFieldNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isAssignable_ = isAssignable_;
          to_bitField0_ |= 0x00000001;
        }
        result.class__ = class__;
        result.field_ = field_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.StaticFieldNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.StaticFieldNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.StaticFieldNode other) {
        if (other == clojureRT.protobuf.Protobuf.StaticFieldNode.getDefaultInstance()) return this;
        if (other.hasIsAssignable()) {
          setIsAssignable(other.getIsAssignable());
        }
        if (!other.getClass_().isEmpty()) {
          class__ = other.class__;
          onChanged();
        }
        if (!other.getField().isEmpty()) {
          field_ = other.field_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.StaticFieldNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.StaticFieldNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isAssignable_ ;
      /**
       * <pre>
       * `true` if the static field is set!able 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return Whether the isAssignable field is set.
       */
      @java.lang.Override
      public boolean hasIsAssignable() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * `true` if the static field is set!able 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return The isAssignable.
       */
      @java.lang.Override
      public boolean getIsAssignable() {
        return isAssignable_;
      }
      /**
       * <pre>
       * `true` if the static field is set!able 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @param value The isAssignable to set.
       * @return This builder for chaining.
       */
      public Builder setIsAssignable(boolean value) {
        bitField0_ |= 0x00000001;
        isAssignable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the static field is set!able 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsAssignable() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isAssignable_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object class__ = "";
      /**
       * <pre>
       * The Class the static field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The class.
       */
      public java.lang.String getClass_() {
        java.lang.Object ref = class__;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          class__ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Class the static field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return The bytes for class.
       */
      public com.google.protobuf.ByteString
          getClass_Bytes() {
        java.lang.Object ref = class__;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          class__ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Class the static field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        class__ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class the static field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearClass_() {
        
        class__ = getDefaultInstance().getClass_();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Class the static field belongs to 
       * </pre>
       *
       * <code>string class = 2;</code>
       * @param value The bytes for class to set.
       * @return This builder for chaining.
       */
      public Builder setClass_Bytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        class__ = value;
        onChanged();
        return this;
      }

      private java.lang.Object field_ = "";
      /**
       * <pre>
       * The symbol name of the static field 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return The field.
       */
      public java.lang.String getField() {
        java.lang.Object ref = field_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          field_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the static field 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return The bytes for field.
       */
      public com.google.protobuf.ByteString
          getFieldBytes() {
        java.lang.Object ref = field_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          field_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The symbol name of the static field 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @param value The field to set.
       * @return This builder for chaining.
       */
      public Builder setField(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        field_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the static field 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearField() {
        
        field_ = getDefaultInstance().getField();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The symbol name of the static field 
       * </pre>
       *
       * <code>string field = 3;</code>
       * @param value The bytes for field to set.
       * @return This builder for chaining.
       */
      public Builder setFieldBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        field_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.StaticFieldNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.StaticFieldNode)
    private static final clojureRT.protobuf.Protobuf.StaticFieldNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.StaticFieldNode();
    }

    public static clojureRT.protobuf.Protobuf.StaticFieldNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StaticFieldNode>
        PARSER = new com.google.protobuf.AbstractParser<StaticFieldNode>() {
      @java.lang.Override
      public StaticFieldNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StaticFieldNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StaticFieldNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StaticFieldNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.StaticFieldNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TheVarNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.TheVarNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The Var object this expression refers to 
     * </pre>
     *
     * <code>string var = 1;</code>
     * @return The var.
     */
    java.lang.String getVar();
    /**
     * <pre>
     * The Var object this expression refers to 
     * </pre>
     *
     * <code>string var = 1;</code>
     * @return The bytes for var.
     */
    com.google.protobuf.ByteString
        getVarBytes();
  }
  /**
   * <pre>
   * Node for a var special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.TheVarNode}
   */
  public static final class TheVarNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.TheVarNode)
      TheVarNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TheVarNode.newBuilder() to construct.
    private TheVarNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TheVarNode() {
      var_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TheVarNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TheVarNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              var_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TheVarNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TheVarNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.TheVarNode.class, clojureRT.protobuf.Protobuf.TheVarNode.Builder.class);
    }

    public static final int VAR_FIELD_NUMBER = 1;
    private volatile java.lang.Object var_;
    /**
     * <pre>
     * The Var object this expression refers to 
     * </pre>
     *
     * <code>string var = 1;</code>
     * @return The var.
     */
    @java.lang.Override
    public java.lang.String getVar() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        var_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Var object this expression refers to 
     * </pre>
     *
     * <code>string var = 1;</code>
     * @return The bytes for var.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVarBytes() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        var_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, var_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, var_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.TheVarNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.TheVarNode other = (clojureRT.protobuf.Protobuf.TheVarNode) obj;

      if (!getVar()
          .equals(other.getVar())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + VAR_FIELD_NUMBER;
      hash = (53 * hash) + getVar().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TheVarNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.TheVarNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a var special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.TheVarNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.TheVarNode)
        clojureRT.protobuf.Protobuf.TheVarNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TheVarNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TheVarNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.TheVarNode.class, clojureRT.protobuf.Protobuf.TheVarNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.TheVarNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        var_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TheVarNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TheVarNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TheVarNode build() {
        clojureRT.protobuf.Protobuf.TheVarNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TheVarNode buildPartial() {
        clojureRT.protobuf.Protobuf.TheVarNode result = new clojureRT.protobuf.Protobuf.TheVarNode(this);
        result.var_ = var_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.TheVarNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.TheVarNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.TheVarNode other) {
        if (other == clojureRT.protobuf.Protobuf.TheVarNode.getDefaultInstance()) return this;
        if (!other.getVar().isEmpty()) {
          var_ = other.var_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.TheVarNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.TheVarNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object var_ = "";
      /**
       * <pre>
       * The Var object this expression refers to 
       * </pre>
       *
       * <code>string var = 1;</code>
       * @return The var.
       */
      public java.lang.String getVar() {
        java.lang.Object ref = var_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          var_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Var object this expression refers to 
       * </pre>
       *
       * <code>string var = 1;</code>
       * @return The bytes for var.
       */
      public com.google.protobuf.ByteString
          getVarBytes() {
        java.lang.Object ref = var_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          var_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Var object this expression refers to 
       * </pre>
       *
       * <code>string var = 1;</code>
       * @param value The var to set.
       * @return This builder for chaining.
       */
      public Builder setVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        var_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object this expression refers to 
       * </pre>
       *
       * <code>string var = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearVar() {
        
        var_ = getDefaultInstance().getVar();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object this expression refers to 
       * </pre>
       *
       * <code>string var = 1;</code>
       * @param value The bytes for var to set.
       * @return This builder for chaining.
       */
      public Builder setVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        var_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.TheVarNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.TheVarNode)
    private static final clojureRT.protobuf.Protobuf.TheVarNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.TheVarNode();
    }

    public static clojureRT.protobuf.Protobuf.TheVarNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TheVarNode>
        PARSER = new com.google.protobuf.AbstractParser<TheVarNode>() {
      @java.lang.Override
      public TheVarNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TheVarNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TheVarNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TheVarNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TheVarNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface ThrowNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.ThrowNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     * @return Whether the exception field is set.
     */
    boolean hasException();
    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     * @return The exception.
     */
    clojureRT.protobuf.Protobuf.Node getException();
    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getExceptionOrBuilder();
  }
  /**
   * <pre>
   * Node for a throw special-form statement 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.ThrowNode}
   */
  public static final class ThrowNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.ThrowNode)
      ThrowNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ThrowNode.newBuilder() to construct.
    private ThrowNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ThrowNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ThrowNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ThrowNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (exception_ != null) {
                subBuilder = exception_.toBuilder();
              }
              exception_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(exception_);
                exception_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ThrowNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ThrowNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.ThrowNode.class, clojureRT.protobuf.Protobuf.ThrowNode.Builder.class);
    }

    public static final int EXCEPTION_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node exception_;
    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     * @return Whether the exception field is set.
     */
    @java.lang.Override
    public boolean hasException() {
      return exception_ != null;
    }
    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     * @return The exception.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getException() {
      return exception_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : exception_;
    }
    /**
     * <pre>
     * An AST node representing the exception to throw 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node exception = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getExceptionOrBuilder() {
      return getException();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (exception_ != null) {
        output.writeMessage(1, getException());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (exception_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getException());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.ThrowNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.ThrowNode other = (clojureRT.protobuf.Protobuf.ThrowNode) obj;

      if (hasException() != other.hasException()) return false;
      if (hasException()) {
        if (!getException()
            .equals(other.getException())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasException()) {
        hash = (37 * hash) + EXCEPTION_FIELD_NUMBER;
        hash = (53 * hash) + getException().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.ThrowNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.ThrowNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a throw special-form statement 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.ThrowNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.ThrowNode)
        clojureRT.protobuf.Protobuf.ThrowNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ThrowNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ThrowNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.ThrowNode.class, clojureRT.protobuf.Protobuf.ThrowNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.ThrowNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exceptionBuilder_ == null) {
          exception_ = null;
        } else {
          exception_ = null;
          exceptionBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_ThrowNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ThrowNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ThrowNode build() {
        clojureRT.protobuf.Protobuf.ThrowNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.ThrowNode buildPartial() {
        clojureRT.protobuf.Protobuf.ThrowNode result = new clojureRT.protobuf.Protobuf.ThrowNode(this);
        if (exceptionBuilder_ == null) {
          result.exception_ = exception_;
        } else {
          result.exception_ = exceptionBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.ThrowNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.ThrowNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.ThrowNode other) {
        if (other == clojureRT.protobuf.Protobuf.ThrowNode.getDefaultInstance()) return this;
        if (other.hasException()) {
          mergeException(other.getException());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.ThrowNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.ThrowNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node exception_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> exceptionBuilder_;
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       * @return Whether the exception field is set.
       */
      public boolean hasException() {
        return exceptionBuilder_ != null || exception_ != null;
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       * @return The exception.
       */
      public clojureRT.protobuf.Protobuf.Node getException() {
        if (exceptionBuilder_ == null) {
          return exception_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : exception_;
        } else {
          return exceptionBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public Builder setException(clojureRT.protobuf.Protobuf.Node value) {
        if (exceptionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          exception_ = value;
          onChanged();
        } else {
          exceptionBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public Builder setException(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exceptionBuilder_ == null) {
          exception_ = builderForValue.build();
          onChanged();
        } else {
          exceptionBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public Builder mergeException(clojureRT.protobuf.Protobuf.Node value) {
        if (exceptionBuilder_ == null) {
          if (exception_ != null) {
            exception_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(exception_).mergeFrom(value).buildPartial();
          } else {
            exception_ = value;
          }
          onChanged();
        } else {
          exceptionBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public Builder clearException() {
        if (exceptionBuilder_ == null) {
          exception_ = null;
          onChanged();
        } else {
          exception_ = null;
          exceptionBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getExceptionBuilder() {
        
        onChanged();
        return getExceptionFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getExceptionOrBuilder() {
        if (exceptionBuilder_ != null) {
          return exceptionBuilder_.getMessageOrBuilder();
        } else {
          return exception_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : exception_;
        }
      }
      /**
       * <pre>
       * An AST node representing the exception to throw 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node exception = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getExceptionFieldBuilder() {
        if (exceptionBuilder_ == null) {
          exceptionBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getException(),
                  getParentForChildren(),
                  isClean());
          exception_ = null;
        }
        return exceptionBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.ThrowNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.ThrowNode)
    private static final clojureRT.protobuf.Protobuf.ThrowNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.ThrowNode();
    }

    public static clojureRT.protobuf.Protobuf.ThrowNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ThrowNode>
        PARSER = new com.google.protobuf.AbstractParser<ThrowNode>() {
      @java.lang.Override
      public ThrowNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThrowNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ThrowNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ThrowNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.ThrowNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TryNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.TryNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    boolean hasBody();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    clojureRT.protobuf.Protobuf.Node getBody();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder();

    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getCatchesList();
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    clojureRT.protobuf.Protobuf.Node getCatches(int index);
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    int getCatchesCount();
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getCatchesOrBuilderList();
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getCatchesOrBuilder(
        int index);

    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     * @return Whether the finally field is set.
     */
    boolean hasFinally();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     * @return The finally.
     */
    clojureRT.protobuf.Protobuf.Node getFinally();
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getFinallyOrBuilder();
  }
  /**
   * <pre>
   * Node for a try special-form expression 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.TryNode}
   */
  public static final class TryNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.TryNode)
      TryNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TryNode.newBuilder() to construct.
    private TryNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TryNode() {
      catches_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new TryNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TryNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (body_ != null) {
                subBuilder = body_.toBuilder();
              }
              body_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(body_);
                body_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                catches_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              catches_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            case 26: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) != 0)) {
                subBuilder = finally_.toBuilder();
              }
              finally_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(finally_);
                finally_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          catches_ = java.util.Collections.unmodifiableList(catches_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TryNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TryNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.TryNode.class, clojureRT.protobuf.Protobuf.TryNode.Builder.class);
    }

    private int bitField0_;
    public static final int BODY_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node body_;
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return Whether the body field is set.
     */
    @java.lang.Override
    public boolean hasBody() {
      return body_ != null;
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     * @return The body.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getBody() {
      return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node body = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
      return getBody();
    }

    public static final int CATCHES_FIELD_NUMBER = 2;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> catches_;
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getCatchesList() {
      return catches_;
    }
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getCatchesOrBuilderList() {
      return catches_;
    }
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    @java.lang.Override
    public int getCatchesCount() {
      return catches_.size();
    }
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getCatches(int index) {
      return catches_.get(index);
    }
    /**
     * <pre>
     * A vector of :catch AST nodes representing the catch clauses of this try expression 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getCatchesOrBuilder(
        int index) {
      return catches_.get(index);
    }

    public static final int FINALLY_FIELD_NUMBER = 3;
    private clojureRT.protobuf.Protobuf.Node finally_;
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     * @return Whether the finally field is set.
     */
    @java.lang.Override
    public boolean hasFinally() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     * @return The finally.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getFinally() {
      return finally_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : finally_;
    }
    /**
     * <pre>
     * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
     * </pre>
     *
     * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getFinallyOrBuilder() {
      return finally_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : finally_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (body_ != null) {
        output.writeMessage(1, getBody());
      }
      for (int i = 0; i < catches_.size(); i++) {
        output.writeMessage(2, catches_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getFinally());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (body_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getBody());
      }
      for (int i = 0; i < catches_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, catches_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getFinally());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.TryNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.TryNode other = (clojureRT.protobuf.Protobuf.TryNode) obj;

      if (hasBody() != other.hasBody()) return false;
      if (hasBody()) {
        if (!getBody()
            .equals(other.getBody())) return false;
      }
      if (!getCatchesList()
          .equals(other.getCatchesList())) return false;
      if (hasFinally() != other.hasFinally()) return false;
      if (hasFinally()) {
        if (!getFinally()
            .equals(other.getFinally())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasBody()) {
        hash = (37 * hash) + BODY_FIELD_NUMBER;
        hash = (53 * hash) + getBody().hashCode();
      }
      if (getCatchesCount() > 0) {
        hash = (37 * hash) + CATCHES_FIELD_NUMBER;
        hash = (53 * hash) + getCatchesList().hashCode();
      }
      if (hasFinally()) {
        hash = (37 * hash) + FINALLY_FIELD_NUMBER;
        hash = (53 * hash) + getFinally().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.TryNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.TryNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a try special-form expression 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.TryNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.TryNode)
        clojureRT.protobuf.Protobuf.TryNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TryNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TryNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.TryNode.class, clojureRT.protobuf.Protobuf.TryNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.TryNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getCatchesFieldBuilder();
          getFinallyFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (bodyBuilder_ == null) {
          body_ = null;
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }
        if (catchesBuilder_ == null) {
          catches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          catchesBuilder_.clear();
        }
        if (finallyBuilder_ == null) {
          finally_ = null;
        } else {
          finallyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_TryNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TryNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TryNode build() {
        clojureRT.protobuf.Protobuf.TryNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.TryNode buildPartial() {
        clojureRT.protobuf.Protobuf.TryNode result = new clojureRT.protobuf.Protobuf.TryNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (bodyBuilder_ == null) {
          result.body_ = body_;
        } else {
          result.body_ = bodyBuilder_.build();
        }
        if (catchesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            catches_ = java.util.Collections.unmodifiableList(catches_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.catches_ = catches_;
        } else {
          result.catches_ = catchesBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          if (finallyBuilder_ == null) {
            result.finally_ = finally_;
          } else {
            result.finally_ = finallyBuilder_.build();
          }
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.TryNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.TryNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.TryNode other) {
        if (other == clojureRT.protobuf.Protobuf.TryNode.getDefaultInstance()) return this;
        if (other.hasBody()) {
          mergeBody(other.getBody());
        }
        if (catchesBuilder_ == null) {
          if (!other.catches_.isEmpty()) {
            if (catches_.isEmpty()) {
              catches_ = other.catches_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureCatchesIsMutable();
              catches_.addAll(other.catches_);
            }
            onChanged();
          }
        } else {
          if (!other.catches_.isEmpty()) {
            if (catchesBuilder_.isEmpty()) {
              catchesBuilder_.dispose();
              catchesBuilder_ = null;
              catches_ = other.catches_;
              bitField0_ = (bitField0_ & ~0x00000001);
              catchesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getCatchesFieldBuilder() : null;
            } else {
              catchesBuilder_.addAllMessages(other.catches_);
            }
          }
        }
        if (other.hasFinally()) {
          mergeFinally(other.getFinally());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.TryNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.TryNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private clojureRT.protobuf.Protobuf.Node body_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> bodyBuilder_;
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return Whether the body field is set.
       */
      public boolean hasBody() {
        return bodyBuilder_ != null || body_ != null;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       * @return The body.
       */
      public clojureRT.protobuf.Protobuf.Node getBody() {
        if (bodyBuilder_ == null) {
          return body_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        } else {
          return bodyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          body_ = value;
          onChanged();
        } else {
          bodyBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder setBody(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (bodyBuilder_ == null) {
          body_ = builderForValue.build();
          onChanged();
        } else {
          bodyBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder mergeBody(clojureRT.protobuf.Protobuf.Node value) {
        if (bodyBuilder_ == null) {
          if (body_ != null) {
            body_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(body_).mergeFrom(value).buildPartial();
          } else {
            body_ = value;
          }
          onChanged();
        } else {
          bodyBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public Builder clearBody() {
        if (bodyBuilder_ == null) {
          body_ = null;
          onChanged();
        } else {
          body_ = null;
          bodyBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getBodyBuilder() {
        
        onChanged();
        return getBodyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getBodyOrBuilder() {
        if (bodyBuilder_ != null) {
          return bodyBuilder_.getMessageOrBuilder();
        } else {
          return body_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : body_;
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the body of this try expression 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node body = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getBodyFieldBuilder() {
        if (bodyBuilder_ == null) {
          bodyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getBody(),
                  getParentForChildren(),
                  isClean());
          body_ = null;
        }
        return bodyBuilder_;
      }

      private java.util.List<clojureRT.protobuf.Protobuf.Node> catches_ =
        java.util.Collections.emptyList();
      private void ensureCatchesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          catches_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(catches_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> catchesBuilder_;

      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getCatchesList() {
        if (catchesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(catches_);
        } else {
          return catchesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public int getCatchesCount() {
        if (catchesBuilder_ == null) {
          return catches_.size();
        } else {
          return catchesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getCatches(int index) {
        if (catchesBuilder_ == null) {
          return catches_.get(index);
        } else {
          return catchesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder setCatches(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (catchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchesIsMutable();
          catches_.set(index, value);
          onChanged();
        } else {
          catchesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder setCatches(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (catchesBuilder_ == null) {
          ensureCatchesIsMutable();
          catches_.set(index, builderForValue.build());
          onChanged();
        } else {
          catchesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder addCatches(clojureRT.protobuf.Protobuf.Node value) {
        if (catchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchesIsMutable();
          catches_.add(value);
          onChanged();
        } else {
          catchesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder addCatches(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (catchesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureCatchesIsMutable();
          catches_.add(index, value);
          onChanged();
        } else {
          catchesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder addCatches(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (catchesBuilder_ == null) {
          ensureCatchesIsMutable();
          catches_.add(builderForValue.build());
          onChanged();
        } else {
          catchesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder addCatches(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (catchesBuilder_ == null) {
          ensureCatchesIsMutable();
          catches_.add(index, builderForValue.build());
          onChanged();
        } else {
          catchesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder addAllCatches(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (catchesBuilder_ == null) {
          ensureCatchesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, catches_);
          onChanged();
        } else {
          catchesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder clearCatches() {
        if (catchesBuilder_ == null) {
          catches_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          catchesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public Builder removeCatches(int index) {
        if (catchesBuilder_ == null) {
          ensureCatchesIsMutable();
          catches_.remove(index);
          onChanged();
        } else {
          catchesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getCatchesBuilder(
          int index) {
        return getCatchesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getCatchesOrBuilder(
          int index) {
        if (catchesBuilder_ == null) {
          return catches_.get(index);  } else {
          return catchesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getCatchesOrBuilderList() {
        if (catchesBuilder_ != null) {
          return catchesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(catches_);
        }
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addCatchesBuilder() {
        return getCatchesFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addCatchesBuilder(
          int index) {
        return getCatchesFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of :catch AST nodes representing the catch clauses of this try expression 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node catches = 2;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getCatchesBuilderList() {
        return getCatchesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getCatchesFieldBuilder() {
        if (catchesBuilder_ == null) {
          catchesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  catches_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          catches_ = null;
        }
        return catchesBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node finally_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> finallyBuilder_;
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       * @return Whether the finally field is set.
       */
      public boolean hasFinally() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       * @return The finally.
       */
      public clojureRT.protobuf.Protobuf.Node getFinally() {
        if (finallyBuilder_ == null) {
          return finally_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : finally_;
        } else {
          return finallyBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public Builder setFinally(clojureRT.protobuf.Protobuf.Node value) {
        if (finallyBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          finally_ = value;
          onChanged();
        } else {
          finallyBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public Builder setFinally(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (finallyBuilder_ == null) {
          finally_ = builderForValue.build();
          onChanged();
        } else {
          finallyBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public Builder mergeFinally(clojureRT.protobuf.Protobuf.Node value) {
        if (finallyBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
              finally_ != null &&
              finally_ != clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) {
            finally_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(finally_).mergeFrom(value).buildPartial();
          } else {
            finally_ = value;
          }
          onChanged();
        } else {
          finallyBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public Builder clearFinally() {
        if (finallyBuilder_ == null) {
          finally_ = null;
          onChanged();
        } else {
          finallyBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getFinallyBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getFinallyFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getFinallyOrBuilder() {
        if (finallyBuilder_ != null) {
          return finallyBuilder_.getMessageOrBuilder();
        } else {
          return finally_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : finally_;
        }
      }
      /**
       * <pre>
       * Synthetic :do AST node (with :body? `true`) representing the final clause of this try expression 
       * </pre>
       *
       * <code>optional .clojureRT.protobuf.Node finally = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getFinallyFieldBuilder() {
        if (finallyBuilder_ == null) {
          finallyBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getFinally(),
                  getParentForChildren(),
                  isClean());
          finally_ = null;
        }
        return finallyBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.TryNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.TryNode)
    private static final clojureRT.protobuf.Protobuf.TryNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.TryNode();
    }

    public static clojureRT.protobuf.Protobuf.TryNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TryNode>
        PARSER = new com.google.protobuf.AbstractParser<TryNode>() {
      @java.lang.Override
      public TryNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TryNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TryNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TryNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.TryNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VarNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.VarNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * `true` if the Var is :dynamic 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return Whether the isAssignable field is set.
     */
    boolean hasIsAssignable();
    /**
     * <pre>
     * `true` if the Var is :dynamic 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    boolean getIsAssignable();

    /**
     * <pre>
     * The Var object this symbol refers to 
     * </pre>
     *
     * <code>string var = 2;</code>
     * @return The var.
     */
    java.lang.String getVar();
    /**
     * <pre>
     * The Var object this symbol refers to 
     * </pre>
     *
     * <code>string var = 2;</code>
     * @return The bytes for var.
     */
    com.google.protobuf.ByteString
        getVarBytes();
  }
  /**
   * <pre>
   * Node for a var symbol 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.VarNode}
   */
  public static final class VarNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.VarNode)
      VarNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use VarNode.newBuilder() to construct.
    private VarNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VarNode() {
      var_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new VarNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VarNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              bitField0_ |= 0x00000001;
              isAssignable_ = input.readBool();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              var_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VarNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VarNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.VarNode.class, clojureRT.protobuf.Protobuf.VarNode.Builder.class);
    }

    private int bitField0_;
    public static final int ISASSIGNABLE_FIELD_NUMBER = 1;
    private boolean isAssignable_;
    /**
     * <pre>
     * `true` if the Var is :dynamic 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return Whether the isAssignable field is set.
     */
    @java.lang.Override
    public boolean hasIsAssignable() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if the Var is :dynamic 
     * </pre>
     *
     * <code>optional bool isAssignable = 1;</code>
     * @return The isAssignable.
     */
    @java.lang.Override
    public boolean getIsAssignable() {
      return isAssignable_;
    }

    public static final int VAR_FIELD_NUMBER = 2;
    private volatile java.lang.Object var_;
    /**
     * <pre>
     * The Var object this symbol refers to 
     * </pre>
     *
     * <code>string var = 2;</code>
     * @return The var.
     */
    @java.lang.Override
    public java.lang.String getVar() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        var_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The Var object this symbol refers to 
     * </pre>
     *
     * <code>string var = 2;</code>
     * @return The bytes for var.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getVarBytes() {
      java.lang.Object ref = var_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        var_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, var_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(1, isAssignable_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(var_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, var_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.VarNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.VarNode other = (clojureRT.protobuf.Protobuf.VarNode) obj;

      if (hasIsAssignable() != other.hasIsAssignable()) return false;
      if (hasIsAssignable()) {
        if (getIsAssignable()
            != other.getIsAssignable()) return false;
      }
      if (!getVar()
          .equals(other.getVar())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasIsAssignable()) {
        hash = (37 * hash) + ISASSIGNABLE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIsAssignable());
      }
      hash = (37 * hash) + VAR_FIELD_NUMBER;
      hash = (53 * hash) + getVar().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VarNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.VarNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a var symbol 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.VarNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.VarNode)
        clojureRT.protobuf.Protobuf.VarNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VarNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VarNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.VarNode.class, clojureRT.protobuf.Protobuf.VarNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.VarNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        isAssignable_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        var_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VarNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VarNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VarNode build() {
        clojureRT.protobuf.Protobuf.VarNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VarNode buildPartial() {
        clojureRT.protobuf.Protobuf.VarNode result = new clojureRT.protobuf.Protobuf.VarNode(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.isAssignable_ = isAssignable_;
          to_bitField0_ |= 0x00000001;
        }
        result.var_ = var_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.VarNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.VarNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.VarNode other) {
        if (other == clojureRT.protobuf.Protobuf.VarNode.getDefaultInstance()) return this;
        if (other.hasIsAssignable()) {
          setIsAssignable(other.getIsAssignable());
        }
        if (!other.getVar().isEmpty()) {
          var_ = other.var_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.VarNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.VarNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private boolean isAssignable_ ;
      /**
       * <pre>
       * `true` if the Var is :dynamic 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return Whether the isAssignable field is set.
       */
      @java.lang.Override
      public boolean hasIsAssignable() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * `true` if the Var is :dynamic 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return The isAssignable.
       */
      @java.lang.Override
      public boolean getIsAssignable() {
        return isAssignable_;
      }
      /**
       * <pre>
       * `true` if the Var is :dynamic 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @param value The isAssignable to set.
       * @return This builder for chaining.
       */
      public Builder setIsAssignable(boolean value) {
        bitField0_ |= 0x00000001;
        isAssignable_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if the Var is :dynamic 
       * </pre>
       *
       * <code>optional bool isAssignable = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearIsAssignable() {
        bitField0_ = (bitField0_ & ~0x00000001);
        isAssignable_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object var_ = "";
      /**
       * <pre>
       * The Var object this symbol refers to 
       * </pre>
       *
       * <code>string var = 2;</code>
       * @return The var.
       */
      public java.lang.String getVar() {
        java.lang.Object ref = var_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          var_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The Var object this symbol refers to 
       * </pre>
       *
       * <code>string var = 2;</code>
       * @return The bytes for var.
       */
      public com.google.protobuf.ByteString
          getVarBytes() {
        java.lang.Object ref = var_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          var_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The Var object this symbol refers to 
       * </pre>
       *
       * <code>string var = 2;</code>
       * @param value The var to set.
       * @return This builder for chaining.
       */
      public Builder setVar(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        var_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object this symbol refers to 
       * </pre>
       *
       * <code>string var = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearVar() {
        
        var_ = getDefaultInstance().getVar();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The Var object this symbol refers to 
       * </pre>
       *
       * <code>string var = 2;</code>
       * @param value The bytes for var to set.
       * @return This builder for chaining.
       */
      public Builder setVarBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        var_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.VarNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.VarNode)
    private static final clojureRT.protobuf.Protobuf.VarNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.VarNode();
    }

    public static clojureRT.protobuf.Protobuf.VarNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<VarNode>
        PARSER = new com.google.protobuf.AbstractParser<VarNode>() {
      @java.lang.Override
      public VarNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VarNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<VarNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VarNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VarNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface VectorNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.VectorNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    java.util.List<clojureRT.protobuf.Protobuf.Node> 
        getItemsList();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    clojureRT.protobuf.Protobuf.Node getItems(int index);
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    int getItemsCount();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getItemsOrBuilderList();
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Node for a vector literal with attached metadata and/or non literal elements 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.VectorNode}
   */
  public static final class VectorNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.VectorNode)
      VectorNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use VectorNode.newBuilder() to construct.
    private VectorNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private VectorNode() {
      items_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new VectorNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private VectorNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                items_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>();
                mutable_bitField0_ |= 0x00000001;
              }
              items_.add(
                  input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry));
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          items_ = java.util.Collections.unmodifiableList(items_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VectorNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VectorNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.VectorNode.class, clojureRT.protobuf.Protobuf.VectorNode.Builder.class);
    }

    public static final int ITEMS_FIELD_NUMBER = 1;
    private java.util.List<clojureRT.protobuf.Protobuf.Node> items_;
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public java.util.List<clojureRT.protobuf.Protobuf.Node> getItemsList() {
      return items_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
        getItemsOrBuilderList() {
      return items_;
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public int getItemsCount() {
      return items_.size();
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getItems(int index) {
      return items_.get(index);
    }
    /**
     * <pre>
     * A vector of AST nodes representing the items of the vector 
     * </pre>
     *
     * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
        int index) {
      return items_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < items_.size(); i++) {
        output.writeMessage(1, items_.get(i));
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < items_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, items_.get(i));
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.VectorNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.VectorNode other = (clojureRT.protobuf.Protobuf.VectorNode) obj;

      if (!getItemsList()
          .equals(other.getItemsList())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getItemsCount() > 0) {
        hash = (37 * hash) + ITEMS_FIELD_NUMBER;
        hash = (53 * hash) + getItemsList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.VectorNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.VectorNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a vector literal with attached metadata and/or non literal elements 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.VectorNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.VectorNode)
        clojureRT.protobuf.Protobuf.VectorNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VectorNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VectorNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.VectorNode.class, clojureRT.protobuf.Protobuf.VectorNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.VectorNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getItemsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_VectorNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VectorNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VectorNode build() {
        clojureRT.protobuf.Protobuf.VectorNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.VectorNode buildPartial() {
        clojureRT.protobuf.Protobuf.VectorNode result = new clojureRT.protobuf.Protobuf.VectorNode(this);
        int from_bitField0_ = bitField0_;
        if (itemsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            items_ = java.util.Collections.unmodifiableList(items_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.items_ = items_;
        } else {
          result.items_ = itemsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.VectorNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.VectorNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.VectorNode other) {
        if (other == clojureRT.protobuf.Protobuf.VectorNode.getDefaultInstance()) return this;
        if (itemsBuilder_ == null) {
          if (!other.items_.isEmpty()) {
            if (items_.isEmpty()) {
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureItemsIsMutable();
              items_.addAll(other.items_);
            }
            onChanged();
          }
        } else {
          if (!other.items_.isEmpty()) {
            if (itemsBuilder_.isEmpty()) {
              itemsBuilder_.dispose();
              itemsBuilder_ = null;
              items_ = other.items_;
              bitField0_ = (bitField0_ & ~0x00000001);
              itemsBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getItemsFieldBuilder() : null;
            } else {
              itemsBuilder_.addAllMessages(other.items_);
            }
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.VectorNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.VectorNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<clojureRT.protobuf.Protobuf.Node> items_ =
        java.util.Collections.emptyList();
      private void ensureItemsIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          items_ = new java.util.ArrayList<clojureRT.protobuf.Protobuf.Node>(items_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> itemsBuilder_;

      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node> getItemsList() {
        if (itemsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(items_);
        } else {
          return itemsBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public int getItemsCount() {
        if (itemsBuilder_ == null) {
          return items_.size();
        } else {
          return itemsBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node getItems(int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);
        } else {
          return itemsBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder setItems(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.set(index, value);
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder setItems(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.set(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          int index, clojureRT.protobuf.Protobuf.Node value) {
        if (itemsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureItemsIsMutable();
          items_.add(index, value);
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addItems(
          int index, clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.add(index, builderForValue.build());
          onChanged();
        } else {
          itemsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder addAllItems(
          java.lang.Iterable<? extends clojureRT.protobuf.Protobuf.Node> values) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, items_);
          onChanged();
        } else {
          itemsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder clearItems() {
        if (itemsBuilder_ == null) {
          items_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          itemsBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public Builder removeItems(int index) {
        if (itemsBuilder_ == null) {
          ensureItemsIsMutable();
          items_.remove(index);
          onChanged();
        } else {
          itemsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getItemsBuilder(
          int index) {
        return getItemsFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getItemsOrBuilder(
          int index) {
        if (itemsBuilder_ == null) {
          return items_.get(index);  } else {
          return itemsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<? extends clojureRT.protobuf.Protobuf.NodeOrBuilder> 
           getItemsOrBuilderList() {
        if (itemsBuilder_ != null) {
          return itemsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(items_);
        }
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addItemsBuilder() {
        return getItemsFieldBuilder().addBuilder(
            clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder addItemsBuilder(
          int index) {
        return getItemsFieldBuilder().addBuilder(
            index, clojureRT.protobuf.Protobuf.Node.getDefaultInstance());
      }
      /**
       * <pre>
       * A vector of AST nodes representing the items of the vector 
       * </pre>
       *
       * <code>repeated .clojureRT.protobuf.Node items = 1;</code>
       */
      public java.util.List<clojureRT.protobuf.Protobuf.Node.Builder> 
           getItemsBuilderList() {
        return getItemsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getItemsFieldBuilder() {
        if (itemsBuilder_ == null) {
          itemsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  items_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          items_ = null;
        }
        return itemsBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.VectorNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.VectorNode)
    private static final clojureRT.protobuf.Protobuf.VectorNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.VectorNode();
    }

    public static clojureRT.protobuf.Protobuf.VectorNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<VectorNode>
        PARSER = new com.google.protobuf.AbstractParser<VectorNode>() {
      @java.lang.Override
      public VectorNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VectorNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<VectorNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<VectorNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.VectorNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface WithMetaNodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.WithMetaNode)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return Whether the expr field is set.
     */
    boolean hasExpr();
    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return The expr.
     */
    clojureRT.protobuf.Protobuf.Node getExpr();
    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder();

    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     * @return Whether the meta field is set.
     */
    boolean hasMeta();
    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     * @return The meta.
     */
    clojureRT.protobuf.Protobuf.Node getMeta();
    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     */
    clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder();
  }
  /**
   * <pre>
   * Node for a non quoted collection literal or fn/reify expression with attached metadata 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.WithMetaNode}
   */
  public static final class WithMetaNode extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.WithMetaNode)
      WithMetaNodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use WithMetaNode.newBuilder() to construct.
    private WithMetaNode(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private WithMetaNode() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new WithMetaNode();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private WithMetaNode(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (expr_ != null) {
                subBuilder = expr_.toBuilder();
              }
              expr_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(expr_);
                expr_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              clojureRT.protobuf.Protobuf.Node.Builder subBuilder = null;
              if (meta_ != null) {
                subBuilder = meta_.toBuilder();
              }
              meta_ = input.readMessage(clojureRT.protobuf.Protobuf.Node.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(meta_);
                meta_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_WithMetaNode_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_WithMetaNode_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.WithMetaNode.class, clojureRT.protobuf.Protobuf.WithMetaNode.Builder.class);
    }

    public static final int EXPR_FIELD_NUMBER = 1;
    private clojureRT.protobuf.Protobuf.Node expr_;
    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return Whether the expr field is set.
     */
    @java.lang.Override
    public boolean hasExpr() {
      return expr_ != null;
    }
    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     * @return The expr.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getExpr() {
      return expr_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
    }
    /**
     * <pre>
     * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node expr = 1;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder() {
      return getExpr();
    }

    public static final int META_FIELD_NUMBER = 2;
    private clojureRT.protobuf.Protobuf.Node meta_;
    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     * @return Whether the meta field is set.
     */
    @java.lang.Override
    public boolean hasMeta() {
      return meta_ != null;
    }
    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     * @return The meta.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getMeta() {
      return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
    }
    /**
     * <pre>
     * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Node meta = 2;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
      return getMeta();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expr_ != null) {
        output.writeMessage(1, getExpr());
      }
      if (meta_ != null) {
        output.writeMessage(2, getMeta());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expr_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getExpr());
      }
      if (meta_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getMeta());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.WithMetaNode)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.WithMetaNode other = (clojureRT.protobuf.Protobuf.WithMetaNode) obj;

      if (hasExpr() != other.hasExpr()) return false;
      if (hasExpr()) {
        if (!getExpr()
            .equals(other.getExpr())) return false;
      }
      if (hasMeta() != other.hasMeta()) return false;
      if (hasMeta()) {
        if (!getMeta()
            .equals(other.getMeta())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasExpr()) {
        hash = (37 * hash) + EXPR_FIELD_NUMBER;
        hash = (53 * hash) + getExpr().hashCode();
      }
      if (hasMeta()) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMeta().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.WithMetaNode parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.WithMetaNode prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Node for a non quoted collection literal or fn/reify expression with attached metadata 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.WithMetaNode}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.WithMetaNode)
        clojureRT.protobuf.Protobuf.WithMetaNodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_WithMetaNode_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_WithMetaNode_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.WithMetaNode.class, clojureRT.protobuf.Protobuf.WithMetaNode.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.WithMetaNode.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (exprBuilder_ == null) {
          expr_ = null;
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }
        if (metaBuilder_ == null) {
          meta_ = null;
        } else {
          meta_ = null;
          metaBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_WithMetaNode_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.WithMetaNode getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.WithMetaNode build() {
        clojureRT.protobuf.Protobuf.WithMetaNode result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.WithMetaNode buildPartial() {
        clojureRT.protobuf.Protobuf.WithMetaNode result = new clojureRT.protobuf.Protobuf.WithMetaNode(this);
        if (exprBuilder_ == null) {
          result.expr_ = expr_;
        } else {
          result.expr_ = exprBuilder_.build();
        }
        if (metaBuilder_ == null) {
          result.meta_ = meta_;
        } else {
          result.meta_ = metaBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.WithMetaNode) {
          return mergeFrom((clojureRT.protobuf.Protobuf.WithMetaNode)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.WithMetaNode other) {
        if (other == clojureRT.protobuf.Protobuf.WithMetaNode.getDefaultInstance()) return this;
        if (other.hasExpr()) {
          mergeExpr(other.getExpr());
        }
        if (other.hasMeta()) {
          mergeMeta(other.getMeta());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.WithMetaNode parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.WithMetaNode) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private clojureRT.protobuf.Protobuf.Node expr_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> exprBuilder_;
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       * @return Whether the expr field is set.
       */
      public boolean hasExpr() {
        return exprBuilder_ != null || expr_ != null;
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       * @return The expr.
       */
      public clojureRT.protobuf.Protobuf.Node getExpr() {
        if (exprBuilder_ == null) {
          return expr_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
        } else {
          return exprBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder setExpr(clojureRT.protobuf.Protobuf.Node value) {
        if (exprBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expr_ = value;
          onChanged();
        } else {
          exprBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder setExpr(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (exprBuilder_ == null) {
          expr_ = builderForValue.build();
          onChanged();
        } else {
          exprBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder mergeExpr(clojureRT.protobuf.Protobuf.Node value) {
        if (exprBuilder_ == null) {
          if (expr_ != null) {
            expr_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(expr_).mergeFrom(value).buildPartial();
          } else {
            expr_ = value;
          }
          onChanged();
        } else {
          exprBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public Builder clearExpr() {
        if (exprBuilder_ == null) {
          expr_ = null;
          onChanged();
        } else {
          expr_ = null;
          exprBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getExprBuilder() {
        
        onChanged();
        return getExprFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getExprOrBuilder() {
        if (exprBuilder_ != null) {
          return exprBuilder_.getMessageOrBuilder();
        } else {
          return expr_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : expr_;
        }
      }
      /**
       * <pre>
       * The expression this metadata is attached to, :op is one of :vector, :map, :set, :fn or :reify 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node expr = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getExprFieldBuilder() {
        if (exprBuilder_ == null) {
          exprBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getExpr(),
                  getParentForChildren(),
                  isClean());
          expr_ = null;
        }
        return exprBuilder_;
      }

      private clojureRT.protobuf.Protobuf.Node meta_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> metaBuilder_;
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       * @return Whether the meta field is set.
       */
      public boolean hasMeta() {
        return metaBuilder_ != null || meta_ != null;
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       * @return The meta.
       */
      public clojureRT.protobuf.Protobuf.Node getMeta() {
        if (metaBuilder_ == null) {
          return meta_ == null ? clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        } else {
          return metaBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder setMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          meta_ = value;
          onChanged();
        } else {
          metaBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder setMeta(
          clojureRT.protobuf.Protobuf.Node.Builder builderForValue) {
        if (metaBuilder_ == null) {
          meta_ = builderForValue.build();
          onChanged();
        } else {
          metaBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder mergeMeta(clojureRT.protobuf.Protobuf.Node value) {
        if (metaBuilder_ == null) {
          if (meta_ != null) {
            meta_ =
              clojureRT.protobuf.Protobuf.Node.newBuilder(meta_).mergeFrom(value).buildPartial();
          } else {
            meta_ = value;
          }
          onChanged();
        } else {
          metaBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public Builder clearMeta() {
        if (metaBuilder_ == null) {
          meta_ = null;
          onChanged();
        } else {
          meta_ = null;
          metaBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.Node.Builder getMetaBuilder() {
        
        onChanged();
        return getMetaFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      public clojureRT.protobuf.Protobuf.NodeOrBuilder getMetaOrBuilder() {
        if (metaBuilder_ != null) {
          return metaBuilder_.getMessageOrBuilder();
        } else {
          return meta_ == null ?
              clojureRT.protobuf.Protobuf.Node.getDefaultInstance() : meta_;
        }
      }
      /**
       * <pre>
       * An AST node representing the metadata of expression. The node will be either a :map node or a :const node with :type :map 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Node meta = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder> 
          getMetaFieldBuilder() {
        if (metaBuilder_ == null) {
          metaBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Node, clojureRT.protobuf.Protobuf.Node.Builder, clojureRT.protobuf.Protobuf.NodeOrBuilder>(
                  getMeta(),
                  getParentForChildren(),
                  isClean());
          meta_ = null;
        }
        return metaBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.WithMetaNode)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.WithMetaNode)
    private static final clojureRT.protobuf.Protobuf.WithMetaNode DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.WithMetaNode();
    }

    public static clojureRT.protobuf.Protobuf.WithMetaNode getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<WithMetaNode>
        PARSER = new com.google.protobuf.AbstractParser<WithMetaNode>() {
      @java.lang.Override
      public WithMetaNode parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new WithMetaNode(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<WithMetaNode> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<WithMetaNode> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.WithMetaNode getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface NodeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:clojureRT.protobuf.Node)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The environment map 
     * </pre>
     *
     * <code>string env = 1;</code>
     * @return The env.
     */
    java.lang.String getEnv();
    /**
     * <pre>
     * The environment map 
     * </pre>
     *
     * <code>string env = 1;</code>
     * @return The bytes for env.
     */
    com.google.protobuf.ByteString
        getEnvBytes();

    /**
     * <pre>
     * The clojure form from which the node originated 
     * </pre>
     *
     * <code>string form = 2;</code>
     * @return The form.
     */
    java.lang.String getForm();
    /**
     * <pre>
     * The clojure form from which the node originated 
     * </pre>
     *
     * <code>string form = 2;</code>
     * @return The bytes for form.
     */
    com.google.protobuf.ByteString
        getFormBytes();

    /**
     * <pre>
     * `true` if this node returns a statement rather than an expression 
     * </pre>
     *
     * <code>optional bool ignoreTag = 3;</code>
     * @return Whether the ignoreTag field is set.
     */
    boolean hasIgnoreTag();
    /**
     * <pre>
     * `true` if this node returns a statement rather than an expression 
     * </pre>
     *
     * <code>optional bool ignoreTag = 3;</code>
     * @return The ignoreTag.
     */
    boolean getIgnoreTag();

    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @return A list containing the loops.
     */
    java.util.List<java.lang.String>
        getLoopsList();
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @return The count of loops.
     */
    int getLoopsCount();
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @param index The index of the element to return.
     * @return The loops at the given index.
     */
    java.lang.String getLoops(int index);
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the loops at the given index.
     */
    com.google.protobuf.ByteString
        getLoopsBytes(int index);

    /**
     * <pre>
     * The tag of this expression, based on the node's children 
     * </pre>
     *
     * <code>string oTag = 5;</code>
     * @return The oTag.
     */
    java.lang.String getOTag();
    /**
     * <pre>
     * The tag of this expression, based on the node's children 
     * </pre>
     *
     * <code>string oTag = 5;</code>
     * @return The bytes for oTag.
     */
    com.google.protobuf.ByteString
        getOTagBytes();

    /**
     * <pre>
     * The node op 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Op op = 6;</code>
     * @return The enum numeric value on the wire for op.
     */
    int getOpValue();
    /**
     * <pre>
     * The node op 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Op op = 6;</code>
     * @return The op.
     */
    clojureRT.protobuf.Protobuf.Op getOp();

    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @return A list containing the rawForms.
     */
    java.util.List<java.lang.String>
        getRawFormsList();
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @return The count of rawForms.
     */
    int getRawFormsCount();
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @param index The index of the element to return.
     * @return The rawForms at the given index.
     */
    java.lang.String getRawForms(int index);
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the rawForms at the given index.
     */
    com.google.protobuf.ByteString
        getRawFormsBytes(int index);

    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     * @return Whether the subnode field is set.
     */
    boolean hasSubnode();
    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     * @return The subnode.
     */
    clojureRT.protobuf.Protobuf.Subnode getSubnode();
    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     */
    clojureRT.protobuf.Protobuf.SubnodeOrBuilder getSubnodeOrBuilder();

    /**
     * <pre>
     * The tag this expression is required to have 
     * </pre>
     *
     * <code>string tag = 9;</code>
     * @return The tag.
     */
    java.lang.String getTag();
    /**
     * <pre>
     * The tag this expression is required to have 
     * </pre>
     *
     * <code>string tag = 9;</code>
     * @return The bytes for tag.
     */
    com.google.protobuf.ByteString
        getTagBytes();

    /**
     * <pre>
     * `true` if this is the root node 
     * </pre>
     *
     * <code>optional bool topLevel = 10;</code>
     * @return Whether the topLevel field is set.
     */
    boolean hasTopLevel();
    /**
     * <pre>
     * `true` if this is the root node 
     * </pre>
     *
     * <code>optional bool topLevel = 10;</code>
     * @return The topLevel.
     */
    boolean getTopLevel();
  }
  /**
   * <pre>
   * Universal node containing common fields 
   * </pre>
   *
   * Protobuf type {@code clojureRT.protobuf.Node}
   */
  public static final class Node extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:clojureRT.protobuf.Node)
      NodeOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use Node.newBuilder() to construct.
    private Node(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private Node() {
      env_ = "";
      form_ = "";
      loops_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      oTag_ = "";
      op_ = 0;
      rawForms_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      tag_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new Node();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private Node(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              env_ = s;
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              form_ = s;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000001;
              ignoreTag_ = input.readBool();
              break;
            }
            case 34: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                loops_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              loops_.add(s);
              break;
            }
            case 42: {
              java.lang.String s = input.readStringRequireUtf8();

              oTag_ = s;
              break;
            }
            case 48: {
              int rawValue = input.readEnum();

              op_ = rawValue;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000004) != 0)) {
                rawForms_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000004;
              }
              rawForms_.add(s);
              break;
            }
            case 66: {
              clojureRT.protobuf.Protobuf.Subnode.Builder subBuilder = null;
              if (subnode_ != null) {
                subBuilder = subnode_.toBuilder();
              }
              subnode_ = input.readMessage(clojureRT.protobuf.Protobuf.Subnode.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(subnode_);
                subnode_ = subBuilder.buildPartial();
              }

              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              tag_ = s;
              break;
            }
            case 80: {
              bitField0_ |= 0x00000002;
              topLevel_ = input.readBool();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          loops_ = loops_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000004) != 0)) {
          rawForms_ = rawForms_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Node_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Node_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              clojureRT.protobuf.Protobuf.Node.class, clojureRT.protobuf.Protobuf.Node.Builder.class);
    }

    private int bitField0_;
    public static final int ENV_FIELD_NUMBER = 1;
    private volatile java.lang.Object env_;
    /**
     * <pre>
     * The environment map 
     * </pre>
     *
     * <code>string env = 1;</code>
     * @return The env.
     */
    @java.lang.Override
    public java.lang.String getEnv() {
      java.lang.Object ref = env_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        env_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The environment map 
     * </pre>
     *
     * <code>string env = 1;</code>
     * @return The bytes for env.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEnvBytes() {
      java.lang.Object ref = env_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        env_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FORM_FIELD_NUMBER = 2;
    private volatile java.lang.Object form_;
    /**
     * <pre>
     * The clojure form from which the node originated 
     * </pre>
     *
     * <code>string form = 2;</code>
     * @return The form.
     */
    @java.lang.Override
    public java.lang.String getForm() {
      java.lang.Object ref = form_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        form_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The clojure form from which the node originated 
     * </pre>
     *
     * <code>string form = 2;</code>
     * @return The bytes for form.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getFormBytes() {
      java.lang.Object ref = form_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        form_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IGNORETAG_FIELD_NUMBER = 3;
    private boolean ignoreTag_;
    /**
     * <pre>
     * `true` if this node returns a statement rather than an expression 
     * </pre>
     *
     * <code>optional bool ignoreTag = 3;</code>
     * @return Whether the ignoreTag field is set.
     */
    @java.lang.Override
    public boolean hasIgnoreTag() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * `true` if this node returns a statement rather than an expression 
     * </pre>
     *
     * <code>optional bool ignoreTag = 3;</code>
     * @return The ignoreTag.
     */
    @java.lang.Override
    public boolean getIgnoreTag() {
      return ignoreTag_;
    }

    public static final int LOOPS_FIELD_NUMBER = 4;
    private com.google.protobuf.LazyStringList loops_;
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @return A list containing the loops.
     */
    public com.google.protobuf.ProtocolStringList
        getLoopsList() {
      return loops_;
    }
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @return The count of loops.
     */
    public int getLoopsCount() {
      return loops_.size();
    }
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @param index The index of the element to return.
     * @return The loops at the given index.
     */
    public java.lang.String getLoops(int index) {
      return loops_.get(index);
    }
    /**
     * <pre>
     * A set of the loop-ids that might cause this node to recur 
     * </pre>
     *
     * <code>repeated string loops = 4;</code>
     * @param index The index of the value to return.
     * @return The bytes of the loops at the given index.
     */
    public com.google.protobuf.ByteString
        getLoopsBytes(int index) {
      return loops_.getByteString(index);
    }

    public static final int OTAG_FIELD_NUMBER = 5;
    private volatile java.lang.Object oTag_;
    /**
     * <pre>
     * The tag of this expression, based on the node's children 
     * </pre>
     *
     * <code>string oTag = 5;</code>
     * @return The oTag.
     */
    @java.lang.Override
    public java.lang.String getOTag() {
      java.lang.Object ref = oTag_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        oTag_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The tag of this expression, based on the node's children 
     * </pre>
     *
     * <code>string oTag = 5;</code>
     * @return The bytes for oTag.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getOTagBytes() {
      java.lang.Object ref = oTag_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        oTag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int OP_FIELD_NUMBER = 6;
    private int op_;
    /**
     * <pre>
     * The node op 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Op op = 6;</code>
     * @return The enum numeric value on the wire for op.
     */
    @java.lang.Override public int getOpValue() {
      return op_;
    }
    /**
     * <pre>
     * The node op 
     * </pre>
     *
     * <code>.clojureRT.protobuf.Op op = 6;</code>
     * @return The op.
     */
    @java.lang.Override public clojureRT.protobuf.Protobuf.Op getOp() {
      @SuppressWarnings("deprecation")
      clojureRT.protobuf.Protobuf.Op result = clojureRT.protobuf.Protobuf.Op.valueOf(op_);
      return result == null ? clojureRT.protobuf.Protobuf.Op.UNRECOGNIZED : result;
    }

    public static final int RAWFORMS_FIELD_NUMBER = 7;
    private com.google.protobuf.LazyStringList rawForms_;
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @return A list containing the rawForms.
     */
    public com.google.protobuf.ProtocolStringList
        getRawFormsList() {
      return rawForms_;
    }
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @return The count of rawForms.
     */
    public int getRawFormsCount() {
      return rawForms_.size();
    }
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @param index The index of the element to return.
     * @return The rawForms at the given index.
     */
    public java.lang.String getRawForms(int index) {
      return rawForms_.get(index);
    }
    /**
     * <pre>
     * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
     * </pre>
     *
     * <code>repeated string rawForms = 7;</code>
     * @param index The index of the value to return.
     * @return The bytes of the rawForms at the given index.
     */
    public com.google.protobuf.ByteString
        getRawFormsBytes(int index) {
      return rawForms_.getByteString(index);
    }

    public static final int SUBNODE_FIELD_NUMBER = 8;
    private clojureRT.protobuf.Protobuf.Subnode subnode_;
    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     * @return Whether the subnode field is set.
     */
    @java.lang.Override
    public boolean hasSubnode() {
      return subnode_ != null;
    }
    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     * @return The subnode.
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Subnode getSubnode() {
      return subnode_ == null ? clojureRT.protobuf.Protobuf.Subnode.getDefaultInstance() : subnode_;
    }
    /**
     * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
     */
    @java.lang.Override
    public clojureRT.protobuf.Protobuf.SubnodeOrBuilder getSubnodeOrBuilder() {
      return getSubnode();
    }

    public static final int TAG_FIELD_NUMBER = 9;
    private volatile java.lang.Object tag_;
    /**
     * <pre>
     * The tag this expression is required to have 
     * </pre>
     *
     * <code>string tag = 9;</code>
     * @return The tag.
     */
    @java.lang.Override
    public java.lang.String getTag() {
      java.lang.Object ref = tag_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tag_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The tag this expression is required to have 
     * </pre>
     *
     * <code>string tag = 9;</code>
     * @return The bytes for tag.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getTagBytes() {
      java.lang.Object ref = tag_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TOPLEVEL_FIELD_NUMBER = 10;
    private boolean topLevel_;
    /**
     * <pre>
     * `true` if this is the root node 
     * </pre>
     *
     * <code>optional bool topLevel = 10;</code>
     * @return Whether the topLevel field is set.
     */
    @java.lang.Override
    public boolean hasTopLevel() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * `true` if this is the root node 
     * </pre>
     *
     * <code>optional bool topLevel = 10;</code>
     * @return The topLevel.
     */
    @java.lang.Override
    public boolean getTopLevel() {
      return topLevel_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(env_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, env_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(form_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, form_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeBool(3, ignoreTag_);
      }
      for (int i = 0; i < loops_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, loops_.getRaw(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(oTag_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 5, oTag_);
      }
      if (op_ != clojureRT.protobuf.Protobuf.Op.opBinding.getNumber()) {
        output.writeEnum(6, op_);
      }
      for (int i = 0; i < rawForms_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, rawForms_.getRaw(i));
      }
      if (subnode_ != null) {
        output.writeMessage(8, getSubnode());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tag_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, tag_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeBool(10, topLevel_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(env_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, env_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(form_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, form_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(3, ignoreTag_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < loops_.size(); i++) {
          dataSize += computeStringSizeNoTag(loops_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getLoopsList().size();
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(oTag_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(5, oTag_);
      }
      if (op_ != clojureRT.protobuf.Protobuf.Op.opBinding.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(6, op_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < rawForms_.size(); i++) {
          dataSize += computeStringSizeNoTag(rawForms_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getRawFormsList().size();
      }
      if (subnode_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getSubnode());
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tag_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, tag_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, topLevel_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof clojureRT.protobuf.Protobuf.Node)) {
        return super.equals(obj);
      }
      clojureRT.protobuf.Protobuf.Node other = (clojureRT.protobuf.Protobuf.Node) obj;

      if (!getEnv()
          .equals(other.getEnv())) return false;
      if (!getForm()
          .equals(other.getForm())) return false;
      if (hasIgnoreTag() != other.hasIgnoreTag()) return false;
      if (hasIgnoreTag()) {
        if (getIgnoreTag()
            != other.getIgnoreTag()) return false;
      }
      if (!getLoopsList()
          .equals(other.getLoopsList())) return false;
      if (!getOTag()
          .equals(other.getOTag())) return false;
      if (op_ != other.op_) return false;
      if (!getRawFormsList()
          .equals(other.getRawFormsList())) return false;
      if (hasSubnode() != other.hasSubnode()) return false;
      if (hasSubnode()) {
        if (!getSubnode()
            .equals(other.getSubnode())) return false;
      }
      if (!getTag()
          .equals(other.getTag())) return false;
      if (hasTopLevel() != other.hasTopLevel()) return false;
      if (hasTopLevel()) {
        if (getTopLevel()
            != other.getTopLevel()) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + ENV_FIELD_NUMBER;
      hash = (53 * hash) + getEnv().hashCode();
      hash = (37 * hash) + FORM_FIELD_NUMBER;
      hash = (53 * hash) + getForm().hashCode();
      if (hasIgnoreTag()) {
        hash = (37 * hash) + IGNORETAG_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getIgnoreTag());
      }
      if (getLoopsCount() > 0) {
        hash = (37 * hash) + LOOPS_FIELD_NUMBER;
        hash = (53 * hash) + getLoopsList().hashCode();
      }
      hash = (37 * hash) + OTAG_FIELD_NUMBER;
      hash = (53 * hash) + getOTag().hashCode();
      hash = (37 * hash) + OP_FIELD_NUMBER;
      hash = (53 * hash) + op_;
      if (getRawFormsCount() > 0) {
        hash = (37 * hash) + RAWFORMS_FIELD_NUMBER;
        hash = (53 * hash) + getRawFormsList().hashCode();
      }
      if (hasSubnode()) {
        hash = (37 * hash) + SUBNODE_FIELD_NUMBER;
        hash = (53 * hash) + getSubnode().hashCode();
      }
      hash = (37 * hash) + TAG_FIELD_NUMBER;
      hash = (53 * hash) + getTag().hashCode();
      if (hasTopLevel()) {
        hash = (37 * hash) + TOPLEVEL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getTopLevel());
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Node parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Node parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static clojureRT.protobuf.Protobuf.Node parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(clojureRT.protobuf.Protobuf.Node prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Universal node containing common fields 
     * </pre>
     *
     * Protobuf type {@code clojureRT.protobuf.Node}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:clojureRT.protobuf.Node)
        clojureRT.protobuf.Protobuf.NodeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Node_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Node_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                clojureRT.protobuf.Protobuf.Node.class, clojureRT.protobuf.Protobuf.Node.Builder.class);
      }

      // Construct using clojureRT.protobuf.Protobuf.Node.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        env_ = "";

        form_ = "";

        ignoreTag_ = false;
        bitField0_ = (bitField0_ & ~0x00000001);
        loops_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        oTag_ = "";

        op_ = 0;

        rawForms_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        if (subnodeBuilder_ == null) {
          subnode_ = null;
        } else {
          subnode_ = null;
          subnodeBuilder_ = null;
        }
        tag_ = "";

        topLevel_ = false;
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return clojureRT.protobuf.Protobuf.internal_static_clojureRT_protobuf_Node_descriptor;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Node getDefaultInstanceForType() {
        return clojureRT.protobuf.Protobuf.Node.getDefaultInstance();
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Node build() {
        clojureRT.protobuf.Protobuf.Node result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Node buildPartial() {
        clojureRT.protobuf.Protobuf.Node result = new clojureRT.protobuf.Protobuf.Node(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.env_ = env_;
        result.form_ = form_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.ignoreTag_ = ignoreTag_;
          to_bitField0_ |= 0x00000001;
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          loops_ = loops_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.loops_ = loops_;
        result.oTag_ = oTag_;
        result.op_ = op_;
        if (((bitField0_ & 0x00000004) != 0)) {
          rawForms_ = rawForms_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.rawForms_ = rawForms_;
        if (subnodeBuilder_ == null) {
          result.subnode_ = subnode_;
        } else {
          result.subnode_ = subnodeBuilder_.build();
        }
        result.tag_ = tag_;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.topLevel_ = topLevel_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof clojureRT.protobuf.Protobuf.Node) {
          return mergeFrom((clojureRT.protobuf.Protobuf.Node)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(clojureRT.protobuf.Protobuf.Node other) {
        if (other == clojureRT.protobuf.Protobuf.Node.getDefaultInstance()) return this;
        if (!other.getEnv().isEmpty()) {
          env_ = other.env_;
          onChanged();
        }
        if (!other.getForm().isEmpty()) {
          form_ = other.form_;
          onChanged();
        }
        if (other.hasIgnoreTag()) {
          setIgnoreTag(other.getIgnoreTag());
        }
        if (!other.loops_.isEmpty()) {
          if (loops_.isEmpty()) {
            loops_ = other.loops_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLoopsIsMutable();
            loops_.addAll(other.loops_);
          }
          onChanged();
        }
        if (!other.getOTag().isEmpty()) {
          oTag_ = other.oTag_;
          onChanged();
        }
        if (other.op_ != 0) {
          setOpValue(other.getOpValue());
        }
        if (!other.rawForms_.isEmpty()) {
          if (rawForms_.isEmpty()) {
            rawForms_ = other.rawForms_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureRawFormsIsMutable();
            rawForms_.addAll(other.rawForms_);
          }
          onChanged();
        }
        if (other.hasSubnode()) {
          mergeSubnode(other.getSubnode());
        }
        if (!other.getTag().isEmpty()) {
          tag_ = other.tag_;
          onChanged();
        }
        if (other.hasTopLevel()) {
          setTopLevel(other.getTopLevel());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        clojureRT.protobuf.Protobuf.Node parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (clojureRT.protobuf.Protobuf.Node) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.lang.Object env_ = "";
      /**
       * <pre>
       * The environment map 
       * </pre>
       *
       * <code>string env = 1;</code>
       * @return The env.
       */
      public java.lang.String getEnv() {
        java.lang.Object ref = env_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          env_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The environment map 
       * </pre>
       *
       * <code>string env = 1;</code>
       * @return The bytes for env.
       */
      public com.google.protobuf.ByteString
          getEnvBytes() {
        java.lang.Object ref = env_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          env_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The environment map 
       * </pre>
       *
       * <code>string env = 1;</code>
       * @param value The env to set.
       * @return This builder for chaining.
       */
      public Builder setEnv(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        env_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The environment map 
       * </pre>
       *
       * <code>string env = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEnv() {
        
        env_ = getDefaultInstance().getEnv();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The environment map 
       * </pre>
       *
       * <code>string env = 1;</code>
       * @param value The bytes for env to set.
       * @return This builder for chaining.
       */
      public Builder setEnvBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        env_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object form_ = "";
      /**
       * <pre>
       * The clojure form from which the node originated 
       * </pre>
       *
       * <code>string form = 2;</code>
       * @return The form.
       */
      public java.lang.String getForm() {
        java.lang.Object ref = form_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          form_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The clojure form from which the node originated 
       * </pre>
       *
       * <code>string form = 2;</code>
       * @return The bytes for form.
       */
      public com.google.protobuf.ByteString
          getFormBytes() {
        java.lang.Object ref = form_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          form_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The clojure form from which the node originated 
       * </pre>
       *
       * <code>string form = 2;</code>
       * @param value The form to set.
       * @return This builder for chaining.
       */
      public Builder setForm(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        form_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The clojure form from which the node originated 
       * </pre>
       *
       * <code>string form = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearForm() {
        
        form_ = getDefaultInstance().getForm();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The clojure form from which the node originated 
       * </pre>
       *
       * <code>string form = 2;</code>
       * @param value The bytes for form to set.
       * @return This builder for chaining.
       */
      public Builder setFormBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        form_ = value;
        onChanged();
        return this;
      }

      private boolean ignoreTag_ ;
      /**
       * <pre>
       * `true` if this node returns a statement rather than an expression 
       * </pre>
       *
       * <code>optional bool ignoreTag = 3;</code>
       * @return Whether the ignoreTag field is set.
       */
      @java.lang.Override
      public boolean hasIgnoreTag() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * `true` if this node returns a statement rather than an expression 
       * </pre>
       *
       * <code>optional bool ignoreTag = 3;</code>
       * @return The ignoreTag.
       */
      @java.lang.Override
      public boolean getIgnoreTag() {
        return ignoreTag_;
      }
      /**
       * <pre>
       * `true` if this node returns a statement rather than an expression 
       * </pre>
       *
       * <code>optional bool ignoreTag = 3;</code>
       * @param value The ignoreTag to set.
       * @return This builder for chaining.
       */
      public Builder setIgnoreTag(boolean value) {
        bitField0_ |= 0x00000001;
        ignoreTag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if this node returns a statement rather than an expression 
       * </pre>
       *
       * <code>optional bool ignoreTag = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIgnoreTag() {
        bitField0_ = (bitField0_ & ~0x00000001);
        ignoreTag_ = false;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList loops_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLoopsIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          loops_ = new com.google.protobuf.LazyStringArrayList(loops_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @return A list containing the loops.
       */
      public com.google.protobuf.ProtocolStringList
          getLoopsList() {
        return loops_.getUnmodifiableView();
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @return The count of loops.
       */
      public int getLoopsCount() {
        return loops_.size();
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param index The index of the element to return.
       * @return The loops at the given index.
       */
      public java.lang.String getLoops(int index) {
        return loops_.get(index);
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param index The index of the value to return.
       * @return The bytes of the loops at the given index.
       */
      public com.google.protobuf.ByteString
          getLoopsBytes(int index) {
        return loops_.getByteString(index);
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param index The index to set the value at.
       * @param value The loops to set.
       * @return This builder for chaining.
       */
      public Builder setLoops(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLoopsIsMutable();
        loops_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param value The loops to add.
       * @return This builder for chaining.
       */
      public Builder addLoops(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLoopsIsMutable();
        loops_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param values The loops to add.
       * @return This builder for chaining.
       */
      public Builder addAllLoops(
          java.lang.Iterable<java.lang.String> values) {
        ensureLoopsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, loops_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearLoops() {
        loops_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A set of the loop-ids that might cause this node to recur 
       * </pre>
       *
       * <code>repeated string loops = 4;</code>
       * @param value The bytes of the loops to add.
       * @return This builder for chaining.
       */
      public Builder addLoopsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureLoopsIsMutable();
        loops_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object oTag_ = "";
      /**
       * <pre>
       * The tag of this expression, based on the node's children 
       * </pre>
       *
       * <code>string oTag = 5;</code>
       * @return The oTag.
       */
      public java.lang.String getOTag() {
        java.lang.Object ref = oTag_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          oTag_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The tag of this expression, based on the node's children 
       * </pre>
       *
       * <code>string oTag = 5;</code>
       * @return The bytes for oTag.
       */
      public com.google.protobuf.ByteString
          getOTagBytes() {
        java.lang.Object ref = oTag_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          oTag_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The tag of this expression, based on the node's children 
       * </pre>
       *
       * <code>string oTag = 5;</code>
       * @param value The oTag to set.
       * @return This builder for chaining.
       */
      public Builder setOTag(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        oTag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tag of this expression, based on the node's children 
       * </pre>
       *
       * <code>string oTag = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearOTag() {
        
        oTag_ = getDefaultInstance().getOTag();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tag of this expression, based on the node's children 
       * </pre>
       *
       * <code>string oTag = 5;</code>
       * @param value The bytes for oTag to set.
       * @return This builder for chaining.
       */
      public Builder setOTagBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        oTag_ = value;
        onChanged();
        return this;
      }

      private int op_ = 0;
      /**
       * <pre>
       * The node op 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Op op = 6;</code>
       * @return The enum numeric value on the wire for op.
       */
      @java.lang.Override public int getOpValue() {
        return op_;
      }
      /**
       * <pre>
       * The node op 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Op op = 6;</code>
       * @param value The enum numeric value on the wire for op to set.
       * @return This builder for chaining.
       */
      public Builder setOpValue(int value) {
        
        op_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The node op 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Op op = 6;</code>
       * @return The op.
       */
      @java.lang.Override
      public clojureRT.protobuf.Protobuf.Op getOp() {
        @SuppressWarnings("deprecation")
        clojureRT.protobuf.Protobuf.Op result = clojureRT.protobuf.Protobuf.Op.valueOf(op_);
        return result == null ? clojureRT.protobuf.Protobuf.Op.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The node op 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Op op = 6;</code>
       * @param value The op to set.
       * @return This builder for chaining.
       */
      public Builder setOp(clojureRT.protobuf.Protobuf.Op value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        op_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The node op 
       * </pre>
       *
       * <code>.clojureRT.protobuf.Op op = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearOp() {
        
        op_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList rawForms_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureRawFormsIsMutable() {
        if (!((bitField0_ & 0x00000004) != 0)) {
          rawForms_ = new com.google.protobuf.LazyStringArrayList(rawForms_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @return A list containing the rawForms.
       */
      public com.google.protobuf.ProtocolStringList
          getRawFormsList() {
        return rawForms_.getUnmodifiableView();
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @return The count of rawForms.
       */
      public int getRawFormsCount() {
        return rawForms_.size();
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param index The index of the element to return.
       * @return The rawForms at the given index.
       */
      public java.lang.String getRawForms(int index) {
        return rawForms_.get(index);
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param index The index of the value to return.
       * @return The bytes of the rawForms at the given index.
       */
      public com.google.protobuf.ByteString
          getRawFormsBytes(int index) {
        return rawForms_.getByteString(index);
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param index The index to set the value at.
       * @param value The rawForms to set.
       * @return This builder for chaining.
       */
      public Builder setRawForms(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRawFormsIsMutable();
        rawForms_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param value The rawForms to add.
       * @return This builder for chaining.
       */
      public Builder addRawForms(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureRawFormsIsMutable();
        rawForms_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param values The rawForms to add.
       * @return This builder for chaining.
       */
      public Builder addAllRawForms(
          java.lang.Iterable<java.lang.String> values) {
        ensureRawFormsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, rawForms_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearRawForms() {
        rawForms_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * If this node's :form has been macroexpanded, a sequence of all the intermediate forms from the original form to the macroexpanded form 
       * </pre>
       *
       * <code>repeated string rawForms = 7;</code>
       * @param value The bytes of the rawForms to add.
       * @return This builder for chaining.
       */
      public Builder addRawFormsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureRawFormsIsMutable();
        rawForms_.add(value);
        onChanged();
        return this;
      }

      private clojureRT.protobuf.Protobuf.Subnode subnode_;
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Subnode, clojureRT.protobuf.Protobuf.Subnode.Builder, clojureRT.protobuf.Protobuf.SubnodeOrBuilder> subnodeBuilder_;
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       * @return Whether the subnode field is set.
       */
      public boolean hasSubnode() {
        return subnodeBuilder_ != null || subnode_ != null;
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       * @return The subnode.
       */
      public clojureRT.protobuf.Protobuf.Subnode getSubnode() {
        if (subnodeBuilder_ == null) {
          return subnode_ == null ? clojureRT.protobuf.Protobuf.Subnode.getDefaultInstance() : subnode_;
        } else {
          return subnodeBuilder_.getMessage();
        }
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public Builder setSubnode(clojureRT.protobuf.Protobuf.Subnode value) {
        if (subnodeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          subnode_ = value;
          onChanged();
        } else {
          subnodeBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public Builder setSubnode(
          clojureRT.protobuf.Protobuf.Subnode.Builder builderForValue) {
        if (subnodeBuilder_ == null) {
          subnode_ = builderForValue.build();
          onChanged();
        } else {
          subnodeBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public Builder mergeSubnode(clojureRT.protobuf.Protobuf.Subnode value) {
        if (subnodeBuilder_ == null) {
          if (subnode_ != null) {
            subnode_ =
              clojureRT.protobuf.Protobuf.Subnode.newBuilder(subnode_).mergeFrom(value).buildPartial();
          } else {
            subnode_ = value;
          }
          onChanged();
        } else {
          subnodeBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public Builder clearSubnode() {
        if (subnodeBuilder_ == null) {
          subnode_ = null;
          onChanged();
        } else {
          subnode_ = null;
          subnodeBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.Subnode.Builder getSubnodeBuilder() {
        
        onChanged();
        return getSubnodeFieldBuilder().getBuilder();
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      public clojureRT.protobuf.Protobuf.SubnodeOrBuilder getSubnodeOrBuilder() {
        if (subnodeBuilder_ != null) {
          return subnodeBuilder_.getMessageOrBuilder();
        } else {
          return subnode_ == null ?
              clojureRT.protobuf.Protobuf.Subnode.getDefaultInstance() : subnode_;
        }
      }
      /**
       * <code>.clojureRT.protobuf.Subnode subnode = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          clojureRT.protobuf.Protobuf.Subnode, clojureRT.protobuf.Protobuf.Subnode.Builder, clojureRT.protobuf.Protobuf.SubnodeOrBuilder> 
          getSubnodeFieldBuilder() {
        if (subnodeBuilder_ == null) {
          subnodeBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              clojureRT.protobuf.Protobuf.Subnode, clojureRT.protobuf.Protobuf.Subnode.Builder, clojureRT.protobuf.Protobuf.SubnodeOrBuilder>(
                  getSubnode(),
                  getParentForChildren(),
                  isClean());
          subnode_ = null;
        }
        return subnodeBuilder_;
      }

      private java.lang.Object tag_ = "";
      /**
       * <pre>
       * The tag this expression is required to have 
       * </pre>
       *
       * <code>string tag = 9;</code>
       * @return The tag.
       */
      public java.lang.String getTag() {
        java.lang.Object ref = tag_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tag_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The tag this expression is required to have 
       * </pre>
       *
       * <code>string tag = 9;</code>
       * @return The bytes for tag.
       */
      public com.google.protobuf.ByteString
          getTagBytes() {
        java.lang.Object ref = tag_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tag_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The tag this expression is required to have 
       * </pre>
       *
       * <code>string tag = 9;</code>
       * @param value The tag to set.
       * @return This builder for chaining.
       */
      public Builder setTag(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        tag_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tag this expression is required to have 
       * </pre>
       *
       * <code>string tag = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearTag() {
        
        tag_ = getDefaultInstance().getTag();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The tag this expression is required to have 
       * </pre>
       *
       * <code>string tag = 9;</code>
       * @param value The bytes for tag to set.
       * @return This builder for chaining.
       */
      public Builder setTagBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        tag_ = value;
        onChanged();
        return this;
      }

      private boolean topLevel_ ;
      /**
       * <pre>
       * `true` if this is the root node 
       * </pre>
       *
       * <code>optional bool topLevel = 10;</code>
       * @return Whether the topLevel field is set.
       */
      @java.lang.Override
      public boolean hasTopLevel() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * `true` if this is the root node 
       * </pre>
       *
       * <code>optional bool topLevel = 10;</code>
       * @return The topLevel.
       */
      @java.lang.Override
      public boolean getTopLevel() {
        return topLevel_;
      }
      /**
       * <pre>
       * `true` if this is the root node 
       * </pre>
       *
       * <code>optional bool topLevel = 10;</code>
       * @param value The topLevel to set.
       * @return This builder for chaining.
       */
      public Builder setTopLevel(boolean value) {
        bitField0_ |= 0x00000008;
        topLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * `true` if this is the root node 
       * </pre>
       *
       * <code>optional bool topLevel = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearTopLevel() {
        bitField0_ = (bitField0_ & ~0x00000008);
        topLevel_ = false;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:clojureRT.protobuf.Node)
    }

    // @@protoc_insertion_point(class_scope:clojureRT.protobuf.Node)
    private static final clojureRT.protobuf.Protobuf.Node DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new clojureRT.protobuf.Protobuf.Node();
    }

    public static clojureRT.protobuf.Protobuf.Node getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<Node>
        PARSER = new com.google.protobuf.AbstractParser<Node>() {
      @java.lang.Override
      public Node parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Node(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<Node> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<Node> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public clojureRT.protobuf.Protobuf.Node getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_Subnode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_Subnode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_BindingNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_BindingNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_CaseNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_CaseNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_CaseTestNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_CaseTestNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_CaseThenNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_CaseThenNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_CatchNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_CatchNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_ConstNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_ConstNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_DefNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_DefNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_DeftypeNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_DeftypeNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_DoNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_DoNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_FnNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_FnNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_FnMethodNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_FnMethodNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_HostInteropNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_HostInteropNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_IfNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_IfNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_ImportNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_ImportNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_InstanceCallNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_InstanceCallNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_InstanceFieldNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_IsInstanceNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_IsInstanceNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_InvokeNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_InvokeNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_KeywordInvokeNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_LetNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_LetNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_LetfnNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_LetfnNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_LocalNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_LocalNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_LoopNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_LoopNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_MapNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_MapNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_MethodNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_MethodNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_MonitorEnterNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_MonitorExitNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_MonitorExitNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_NewNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_NewNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_PrimInvokeNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_ProtocolInvokeNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_QuoteNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_QuoteNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_RecurNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_RecurNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_ReifyNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_ReifyNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_SetNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_SetNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_MutateSetNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_MutateSetNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_StaticCallNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_StaticCallNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_StaticFieldNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_StaticFieldNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_TheVarNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_TheVarNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_ThrowNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_ThrowNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_TryNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_TryNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_VarNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_VarNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_VectorNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_VectorNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_WithMetaNode_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_WithMetaNode_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_clojureRT_protobuf_Node_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_clojureRT_protobuf_Node_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\016bytecode.proto\022\022clojureRT.protobuf\"\262\021\n" +
      "\007Subnode\0222\n\007binding\030\001 \001(\0132\037.clojureRT.pr" +
      "otobuf.BindingNodeH\000\022,\n\004case\030\002 \001(\0132\034.clo" +
      "jureRT.protobuf.CaseNodeH\000\0224\n\010caseTest\030\003" +
      " \001(\0132 .clojureRT.protobuf.CaseTestNodeH\000" +
      "\0224\n\010caseThen\030\004 \001(\0132 .clojureRT.protobuf." +
      "CaseThenNodeH\000\022.\n\005catch\030\005 \001(\0132\035.clojureR" +
      "T.protobuf.CatchNodeH\000\022.\n\005const\030\006 \001(\0132\035." +
      "clojureRT.protobuf.ConstNodeH\000\022*\n\003def\030\007 " +
      "\001(\0132\033.clojureRT.protobuf.DefNodeH\000\0222\n\007de" +
      "ftype\030\010 \001(\0132\037.clojureRT.protobuf.Deftype" +
      "NodeH\000\022(\n\002do\030\t \001(\0132\032.clojureRT.protobuf." +
      "DoNodeH\000\022(\n\002fn\030\n \001(\0132\032.clojureRT.protobu" +
      "f.FnNodeH\000\0224\n\010fnMethod\030\013 \001(\0132 .clojureRT" +
      ".protobuf.FnMethodNodeH\000\022:\n\013hostInterop\030" +
      "\014 \001(\0132#.clojureRT.protobuf.HostInteropNo" +
      "deH\000\022(\n\002if\030\r \001(\0132\032.clojureRT.protobuf.If" +
      "NodeH\000\0220\n\006import\030\016 \001(\0132\036.clojureRT.proto" +
      "buf.ImportNodeH\000\022<\n\014instanceCall\030\017 \001(\0132$" +
      ".clojureRT.protobuf.InstanceCallNodeH\000\022>" +
      "\n\rinstanceField\030\020 \001(\0132%.clojureRT.protob" +
      "uf.InstanceFieldNodeH\000\0228\n\nisInstance\030\021 \001" +
      "(\0132\".clojureRT.protobuf.IsInstanceNodeH\000" +
      "\0220\n\006invoke\030\022 \001(\0132\036.clojureRT.protobuf.In" +
      "vokeNodeH\000\022>\n\rkeywordInvoke\030\023 \001(\0132%.cloj" +
      "ureRT.protobuf.KeywordInvokeNodeH\000\022*\n\003le" +
      "t\030\024 \001(\0132\033.clojureRT.protobuf.LetNodeH\000\022." +
      "\n\005letfn\030\025 \001(\0132\035.clojureRT.protobuf.Letfn" +
      "NodeH\000\022.\n\005local\030\026 \001(\0132\035.clojureRT.protob" +
      "uf.LocalNodeH\000\022,\n\004loop\030\027 \001(\0132\034.clojureRT" +
      ".protobuf.LoopNodeH\000\022*\n\003map\030\030 \001(\0132\033.cloj" +
      "ureRT.protobuf.MapNodeH\000\0220\n\006method\030\031 \001(\013" +
      "2\036.clojureRT.protobuf.MethodNodeH\000\022<\n\014mo" +
      "nitorEnter\030\032 \001(\0132$.clojureRT.protobuf.Mo" +
      "nitorEnterNodeH\000\022:\n\013monitorExit\030\033 \001(\0132#." +
      "clojureRT.protobuf.MonitorExitNodeH\000\022*\n\003" +
      "new\030\034 \001(\0132\033.clojureRT.protobuf.NewNodeH\000" +
      "\0228\n\nprimInvoke\030\035 \001(\0132\".clojureRT.protobu" +
      "f.PrimInvokeNodeH\000\022@\n\016protocolInvoke\030\036 \001" +
      "(\0132&.clojureRT.protobuf.ProtocolInvokeNo" +
      "deH\000\022.\n\005quote\030\037 \001(\0132\035.clojureRT.protobuf" +
      ".QuoteNodeH\000\022.\n\005recur\030  \001(\0132\035.clojureRT." +
      "protobuf.RecurNodeH\000\022.\n\005reify\030! \001(\0132\035.cl" +
      "ojureRT.protobuf.ReifyNodeH\000\022*\n\003set\030\" \001(" +
      "\0132\033.clojureRT.protobuf.SetNodeH\000\0226\n\tmuta" +
      "teSet\030# \001(\0132!.clojureRT.protobuf.MutateS" +
      "etNodeH\000\0228\n\nstaticCall\030$ \001(\0132\".clojureRT" +
      ".protobuf.StaticCallNodeH\000\022:\n\013staticFiel" +
      "d\030% \001(\0132#.clojureRT.protobuf.StaticField" +
      "NodeH\000\0220\n\006theVar\030& \001(\0132\036.clojureRT.proto" +
      "buf.TheVarNodeH\000\022.\n\005throw\030\' \001(\0132\035.clojur" +
      "eRT.protobuf.ThrowNodeH\000\022*\n\003try\030( \001(\0132\033." +
      "clojureRT.protobuf.TryNodeH\000\022*\n\003var\030) \001(" +
      "\0132\033.clojureRT.protobuf.VarNodeH\000\0220\n\006vect" +
      "or\030* \001(\0132\036.clojureRT.protobuf.VectorNode" +
      "H\000\0224\n\010withMeta\030+ \001(\0132 .clojureRT.protobu" +
      "f.WithMetaNodeH\000B\007\n\005types\"\305\001\n\013BindingNod" +
      "e\022\022\n\005argId\030\001 \001(\rH\000\210\001\001\022+\n\004init\030\002 \001(\0132\030.cl" +
      "ojureRT.protobuf.NodeH\001\210\001\001\022,\n\005local\030\003 \001(" +
      "\0162\035.clojureRT.protobuf.LocalType\022\014\n\004name" +
      "\030\004 \001(\t\022\027\n\nisVariadic\030\005 \001(\010H\002\210\001\001B\010\n\006_argI" +
      "dB\007\n\005_initB\r\n\013_isVariadic\"\373\003\n\010CaseNode\022)" +
      "\n\007default\030\001 \001(\0132\030.clojureRT.protobuf.Nod" +
      "e\022\014\n\004high\030\002 \001(\t\022\013\n\003low\030\003 \001(\t\022\014\n\004mask\030\004 \001" +
      "(\r\022\r\n\005shift\030\005 \001(\r\022\023\n\013isSkipCheck\030\006 \001(\t\022;" +
      "\n\nswitchType\030\007 \001(\0162\'.clojureRT.protobuf." +
      "CaseNode.SwitchType\022&\n\004test\030\010 \001(\0132\030.cloj" +
      "ureRT.protobuf.Node\0227\n\010testType\030\t \001(\0162%." +
      "clojureRT.protobuf.CaseNode.TestType\022\'\n\005" +
      "tests\030\n \003(\0132\030.clojureRT.protobuf.Node\022\'\n" +
      "\005thens\030\013 \003(\0132\030.clojureRT.protobuf.Node\"9" +
      "\n\nSwitchType\022\024\n\020switchTypeSparse\020\000\022\025\n\021sw" +
      "itchTypeCompact\020\001\"L\n\010TestType\022\017\n\013testTyp" +
      "eInt\020\000\022\025\n\021testTypeHashEquiv\020\001\022\030\n\024testTyp" +
      "eHashIdentity\020\002\"D\n\014CaseTestNode\022\014\n\004hash\030" +
      "\001 \001(\r\022&\n\004test\030\002 \001(\0132\030.clojureRT.protobuf" +
      ".Node\"D\n\014CaseThenNode\022\014\n\004hash\030\001 \001(\r\022&\n\004t" +
      "hen\030\002 \001(\0132\030.clojureRT.protobuf.Node\"\205\001\n\t" +
      "CatchNode\022&\n\004body\030\001 \001(\0132\030.clojureRT.prot" +
      "obuf.Node\022\'\n\005class\030\002 \001(\0132\030.clojureRT.pro" +
      "tobuf.Node\022\'\n\005local\030\003 \001(\0132\030.clojureRT.pr" +
      "otobuf.Node\"\366\003\n\tConstNode\022\021\n\tisLiteral\030\001" +
      " \001(\010\022+\n\004meta\030\002 \001(\0132\030.clojureRT.protobuf." +
      "NodeH\000\210\001\001\0225\n\004type\030\003 \001(\0162\'.clojureRT.prot" +
      "obuf.ConstNode.ConstType\022\013\n\003val\030\004 \001(\t\"\333\002" +
      "\n\tConstType\022\020\n\014constTypeNil\020\000\022\021\n\rconstTy" +
      "peBool\020\001\022\024\n\020constTypeKeyword\020\002\022\023\n\017constT" +
      "ypeSymbol\020\003\022\023\n\017constTypeString\020\004\022\023\n\017cons" +
      "tTypeNumber\020\005\022\021\n\rconstTypeType\020\006\022\023\n\017cons" +
      "tTypeRecord\020\007\022\020\n\014constTypeMap\020\010\022\023\n\017const" +
      "TypeVector\020\t\022\020\n\014constTypeSet\020\n\022\020\n\014constT" +
      "ypeSeq\020\013\022\021\n\rconstTypeChar\020\014\022\022\n\016constType" +
      "Regex\020\r\022\022\n\016constTypeClass\020\016\022\020\n\014constType" +
      "Var\020\017\022\024\n\020constTypeUnknown\020\020B\007\n\005_meta\"\252\001\n" +
      "\007DefNode\022\020\n\003doc\030\001 \001(\tH\000\210\001\001\022+\n\004init\030\002 \001(\013" +
      "2\030.clojureRT.protobuf.NodeH\001\210\001\001\022+\n\004meta\030" +
      "\003 \001(\0132\030.clojureRT.protobuf.NodeH\002\210\001\001\022\014\n\004" +
      "name\030\004 \001(\t\022\013\n\003var\030\005 \001(\tB\006\n\004_docB\007\n\005_init" +
      "B\007\n\005_meta\"\227\001\n\013DeftypeNode\022\021\n\tclassName\030\001" +
      " \001(\t\022(\n\006fields\030\002 \003(\0132\030.clojureRT.protobu" +
      "f.Node\022\022\n\ninterfaces\030\003 \003(\t\022)\n\007methods\030\004 " +
      "\003(\0132\030.clojureRT.protobuf.Node\022\014\n\004name\030\005 " +
      "\001(\t\"}\n\006DoNode\022\023\n\006isBody\030\001 \001(\010H\000\210\001\001\022%\n\003re" +
      "t\030\002 \001(\0132\030.clojureRT.protobuf.Node\022,\n\nsta" +
      "tements\030\003 \003(\0132\030.clojureRT.protobuf.NodeB" +
      "\t\n\007_isBody\"\244\001\n\006FnNode\022,\n\005local\030\001 \001(\0132\030.c" +
      "lojureRT.protobuf.NodeH\000\210\001\001\022\025\n\rmaxFixedA" +
      "rity\030\002 \001(\r\022)\n\007methods\030\003 \003(\0132\030.clojureRT." +
      "protobuf.Node\022\014\n\004once\030\004 \001(\010\022\022\n\nisVariadi" +
      "c\030\005 \001(\010B\010\n\006_local\"\230\001\n\014FnMethodNode\022&\n\004bo" +
      "dy\030\001 \001(\0132\030.clojureRT.protobuf.Node\022\022\n\nfi" +
      "xedArity\030\002 \001(\r\022\016\n\006loopId\030\003 \001(\t\022(\n\006params" +
      "\030\004 \003(\0132\030.clojureRT.protobuf.Node\022\022\n\nisVa" +
      "riadic\030\005 \001(\010\"_\n\017HostInteropNode\022\024\n\014isAss" +
      "ignable\030\001 \001(\010\022\014\n\004mOrF\030\002 \001(\t\022(\n\006target\030\003 " +
      "\001(\0132\030.clojureRT.protobuf.Node\"\200\001\n\006IfNode" +
      "\022&\n\004else\030\001 \001(\0132\030.clojureRT.protobuf.Node" +
      "\022&\n\004test\030\002 \001(\0132\030.clojureRT.protobuf.Node" +
      "\022&\n\004then\030\003 \001(\0132\030.clojureRT.protobuf.Node" +
      "\"\033\n\nImportNode\022\r\n\005class\030\001 \001(\t\"\276\001\n\020Instan" +
      "ceCallNode\022&\n\004args\030\001 \003(\0132\030.clojureRT.pro" +
      "tobuf.Node\022\022\n\005class\030\002 \001(\tH\000\210\001\001\022*\n\010instan" +
      "ce\030\003 \001(\0132\030.clojureRT.protobuf.Node\022\016\n\006me" +
      "thod\030\004 \001(\t\022\030\n\013isValidated\030\005 \001(\010H\001\210\001\001B\010\n\006" +
      "_classB\016\n\014_isValidated\"s\n\021InstanceFieldN" +
      "ode\022\024\n\014isAssignable\030\001 \001(\010\022\r\n\005class\030\002 \001(\t" +
      "\022\r\n\005field\030\003 \001(\t\022*\n\010instance\030\004 \001(\0132\030.cloj" +
      "ureRT.protobuf.Node\"I\n\016IsInstanceNode\022\r\n" +
      "\005class\030\001 \001(\t\022(\n\006target\030\002 \001(\0132\030.clojureRT" +
      ".protobuf.Node\"v\n\nInvokeNode\022&\n\004args\030\001 \003" +
      "(\0132\030.clojureRT.protobuf.Node\022$\n\002fn\030\002 \001(\013" +
      "2\030.clojureRT.protobuf.Node\022\021\n\004meta\030\003 \001(\t" +
      "H\000\210\001\001B\007\n\005_meta\"h\n\021KeywordInvokeNode\022)\n\007k" +
      "eyword\030\001 \001(\0132\030.clojureRT.protobuf.Node\022(" +
      "\n\006target\030\002 \001(\0132\030.clojureRT.protobuf.Node" +
      "\"]\n\007LetNode\022*\n\010bindings\030\001 \003(\0132\030.clojureR" +
      "T.protobuf.Node\022&\n\004body\030\002 \001(\0132\030.clojureR" +
      "T.protobuf.Node\"_\n\tLetfnNode\022*\n\010bindings" +
      "\030\001 \003(\0132\030.clojureRT.protobuf.Node\022&\n\004body" +
      "\030\002 \001(\0132\030.clojureRT.protobuf.Node\"\243\001\n\tLoc" +
      "alNode\022\022\n\005argId\030\001 \001(\rH\000\210\001\001\022\024\n\014isAssignab" +
      "le\030\002 \001(\010\022,\n\005local\030\003 \001(\0162\035.clojureRT.prot" +
      "obuf.LocalType\022\014\n\004name\030\004 \001(\t\022\027\n\nisVariad" +
      "ic\030\005 \001(\010H\001\210\001\001B\010\n\006_argIdB\r\n\013_isVariadic\"n" +
      "\n\010LoopNode\022*\n\010bindings\030\001 \003(\0132\030.clojureRT" +
      ".protobuf.Node\022&\n\004body\030\002 \001(\0132\030.clojureRT" +
      ".protobuf.Node\022\016\n\006loopId\030\003 \001(\t\"Y\n\007MapNod" +
      "e\022&\n\004keys\030\001 \003(\0132\030.clojureRT.protobuf.Nod" +
      "e\022&\n\004vals\030\002 \003(\0132\030.clojureRT.protobuf.Nod" +
      "e\"\334\001\n\nMethodNode\022&\n\004body\030\001 \001(\0132\030.clojure" +
      "RT.protobuf.Node\022\017\n\007bridges\030\002 \003(\t\022\022\n\nfix" +
      "edArity\030\003 \001(\r\022\021\n\tinterface\030\004 \001(\t\022\016\n\006loop" +
      "Id\030\005 \001(\t\022\014\n\004name\030\006 \001(\t\022(\n\006params\030\007 \003(\0132\030" +
      ".clojureRT.protobuf.Node\022&\n\004this\030\010 \001(\0132\030" +
      ".clojureRT.protobuf.Node\"<\n\020MonitorEnter" +
      "Node\022(\n\006target\030\001 \001(\0132\030.clojureRT.protobu" +
      "f.Node\";\n\017MonitorExitNode\022(\n\006target\030\001 \001(" +
      "\0132\030.clojureRT.protobuf.Node\"\204\001\n\007NewNode\022" +
      "&\n\004args\030\001 \003(\0132\030.clojureRT.protobuf.Node\022" +
      "\'\n\005class\030\002 \001(\0132\030.clojureRT.protobuf.Node" +
      "\022\030\n\013isValidated\030\003 \001(\010H\000\210\001\001B\016\n\014_isValidat" +
      "ed\"\221\001\n\016PrimInvokeNode\022&\n\004args\030\001 \003(\0132\030.cl" +
      "ojureRT.protobuf.Node\022$\n\002fn\030\002 \001(\0132\030.cloj" +
      "ureRT.protobuf.Node\022\021\n\004meta\030\003 \001(\tH\000\210\001\001\022\025" +
      "\n\rprimInterface\030\004 \001(\tB\007\n\005_meta\"\224\001\n\022Proto" +
      "colInvokeNode\022&\n\004args\030\001 \003(\0132\030.clojureRT." +
      "protobuf.Node\022,\n\nprotocolFn\030\002 \001(\0132\030.cloj" +
      "ureRT.protobuf.Node\022(\n\006target\030\003 \001(\0132\030.cl" +
      "ojureRT.protobuf.Node\"F\n\tQuoteNode\022&\n\004ex" +
      "pr\030\001 \001(\0132\030.clojureRT.protobuf.Node\022\021\n\tis" +
      "Literal\030\002 \001(\010\"D\n\tRecurNode\022\'\n\005exprs\030\001 \003(" +
      "\0132\030.clojureRT.protobuf.Node\022\016\n\006loopId\030\002 " +
      "\001(\t\"]\n\tReifyNode\022\021\n\tclassName\030\001 \001(\t\022\022\n\ni" +
      "nterfaces\030\002 \003(\t\022)\n\007methods\030\003 \003(\0132\030.cloju" +
      "reRT.protobuf.Node\"2\n\007SetNode\022\'\n\005items\030\001" +
      " \003(\0132\030.clojureRT.protobuf.Node\"`\n\rMutate" +
      "SetNode\022(\n\006target\030\001 \001(\0132\030.clojureRT.prot" +
      "obuf.Node\022%\n\003val\030\002 \001(\0132\030.clojureRT.proto" +
      "buf.Node\"\201\001\n\016StaticCallNode\022&\n\004args\030\001 \003(" +
      "\0132\030.clojureRT.protobuf.Node\022\r\n\005class\030\002 \001" +
      "(\t\022\016\n\006method\030\003 \001(\t\022\030\n\013isValidated\030\004 \001(\010H" +
      "\000\210\001\001B\016\n\014_isValidated\"[\n\017StaticFieldNode\022" +
      "\031\n\014isAssignable\030\001 \001(\010H\000\210\001\001\022\r\n\005class\030\002 \001(" +
      "\t\022\r\n\005field\030\003 \001(\tB\017\n\r_isAssignable\"\031\n\nThe" +
      "VarNode\022\013\n\003var\030\001 \001(\t\"8\n\tThrowNode\022+\n\texc" +
      "eption\030\001 \001(\0132\030.clojureRT.protobuf.Node\"\230" +
      "\001\n\007TryNode\022&\n\004body\030\001 \001(\0132\030.clojureRT.pro" +
      "tobuf.Node\022)\n\007catches\030\002 \003(\0132\030.clojureRT." +
      "protobuf.Node\022.\n\007finally\030\003 \001(\0132\030.clojure" +
      "RT.protobuf.NodeH\000\210\001\001B\n\n\010_finally\"B\n\007Var" +
      "Node\022\031\n\014isAssignable\030\001 \001(\010H\000\210\001\001\022\013\n\003var\030\002" +
      " \001(\tB\017\n\r_isAssignable\"5\n\nVectorNode\022\'\n\005i" +
      "tems\030\001 \003(\0132\030.clojureRT.protobuf.Node\"^\n\014" +
      "WithMetaNode\022&\n\004expr\030\001 \001(\0132\030.clojureRT.p" +
      "rotobuf.Node\022&\n\004meta\030\002 \001(\0132\030.clojureRT.p" +
      "rotobuf.Node\"\371\001\n\004Node\022\013\n\003env\030\001 \001(\t\022\014\n\004fo" +
      "rm\030\002 \001(\t\022\026\n\tignoreTag\030\003 \001(\010H\000\210\001\001\022\r\n\005loop" +
      "s\030\004 \003(\t\022\014\n\004oTag\030\005 \001(\t\022\"\n\002op\030\006 \001(\0162\026.cloj" +
      "ureRT.protobuf.Op\022\020\n\010rawForms\030\007 \003(\t\022,\n\007s" +
      "ubnode\030\010 \001(\0132\033.clojureRT.protobuf.Subnod" +
      "e\022\013\n\003tag\030\t \001(\t\022\025\n\010topLevel\030\n \001(\010H\001\210\001\001B\014\n" +
      "\n_ignoreTagB\013\n\t_topLevel*\373\004\n\002Op\022\r\n\topBin" +
      "ding\020\000\022\n\n\006opCase\020\001\022\016\n\nopCaseTest\020\002\022\016\n\nop" +
      "CaseThen\020\003\022\013\n\007opCatch\020\004\022\013\n\007opConst\020\005\022\t\n\005" +
      "opDef\020\006\022\r\n\topDeftype\020\007\022\010\n\004opDo\020\010\022\010\n\004opFn" +
      "\020\t\022\016\n\nopFnMethod\020\n\022\021\n\ropHostInterop\020\013\022\010\n" +
      "\004opIf\020\014\022\014\n\010opImport\020\r\022\022\n\016opInstanceCall\020" +
      "\016\022\023\n\017opInstanceField\020\017\022\020\n\014opIsInstance\020\020" +
      "\022\014\n\010opInvoke\020\021\022\023\n\017opKeywordInvoke\020\022\022\t\n\005o" +
      "pLet\020\023\022\013\n\007opLetfn\020\024\022\013\n\007opLocal\020\025\022\n\n\006opLo" +
      "op\020\026\022\t\n\005opMap\020\027\022\014\n\010opMethod\020\030\022\022\n\016opMonit" +
      "orEnter\020\031\022\021\n\ropMonitorExit\020\032\022\t\n\005opNew\020\033\022" +
      "\020\n\014opPrimInvoke\020\034\022\024\n\020opProtocolInvoke\020\035\022" +
      "\013\n\007opQuote\020\036\022\013\n\007opRecur\020\037\022\013\n\007opReify\020 \022\t" +
      "\n\005opSet\020!\022\017\n\013opMutateSet\020\"\022\020\n\014opStaticCa" +
      "ll\020#\022\021\n\ropStaticField\020$\022\014\n\010opTheVar\020%\022\013\n" +
      "\007opThrow\020&\022\t\n\005opTry\020\'\022\t\n\005opVar\020(\022\014\n\010opVe" +
      "ctor\020)\022\016\n\nopWithMeta\020**\242\001\n\tLocalType\022\020\n\014" +
      "localTypeArg\020\000\022\022\n\016localTypeCatch\020\001\022\017\n\013lo" +
      "calTypeFn\020\002\022\020\n\014localTypeLet\020\003\022\022\n\016localTy" +
      "peLetfn\020\004\022\021\n\rlocalTypeLoop\020\005\022\022\n\016localTyp" +
      "eField\020\006\022\021\n\rlocalTypeThis\020\007B\nB\010Protobufb" +
      "\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_clojureRT_protobuf_Subnode_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_clojureRT_protobuf_Subnode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_Subnode_descriptor,
        new java.lang.String[] { "Binding", "Case", "CaseTest", "CaseThen", "Catch", "Const", "Def", "Deftype", "Do", "Fn", "FnMethod", "HostInterop", "If", "Import", "InstanceCall", "InstanceField", "IsInstance", "Invoke", "KeywordInvoke", "Let", "Letfn", "Local", "Loop", "Map", "Method", "MonitorEnter", "MonitorExit", "New", "PrimInvoke", "ProtocolInvoke", "Quote", "Recur", "Reify", "Set", "MutateSet", "StaticCall", "StaticField", "TheVar", "Throw", "Try", "Var", "Vector", "WithMeta", "Types", });
    internal_static_clojureRT_protobuf_BindingNode_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_clojureRT_protobuf_BindingNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_BindingNode_descriptor,
        new java.lang.String[] { "ArgId", "Init", "Local", "Name", "IsVariadic", "ArgId", "Init", "IsVariadic", });
    internal_static_clojureRT_protobuf_CaseNode_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_clojureRT_protobuf_CaseNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_CaseNode_descriptor,
        new java.lang.String[] { "Default", "High", "Low", "Mask", "Shift", "IsSkipCheck", "SwitchType", "Test", "TestType", "Tests", "Thens", });
    internal_static_clojureRT_protobuf_CaseTestNode_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_clojureRT_protobuf_CaseTestNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_CaseTestNode_descriptor,
        new java.lang.String[] { "Hash", "Test", });
    internal_static_clojureRT_protobuf_CaseThenNode_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_clojureRT_protobuf_CaseThenNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_CaseThenNode_descriptor,
        new java.lang.String[] { "Hash", "Then", });
    internal_static_clojureRT_protobuf_CatchNode_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_clojureRT_protobuf_CatchNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_CatchNode_descriptor,
        new java.lang.String[] { "Body", "Class_", "Local", });
    internal_static_clojureRT_protobuf_ConstNode_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_clojureRT_protobuf_ConstNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_ConstNode_descriptor,
        new java.lang.String[] { "IsLiteral", "Meta", "Type", "Val", "Meta", });
    internal_static_clojureRT_protobuf_DefNode_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_clojureRT_protobuf_DefNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_DefNode_descriptor,
        new java.lang.String[] { "Doc", "Init", "Meta", "Name", "Var", "Doc", "Init", "Meta", });
    internal_static_clojureRT_protobuf_DeftypeNode_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_clojureRT_protobuf_DeftypeNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_DeftypeNode_descriptor,
        new java.lang.String[] { "ClassName", "Fields", "Interfaces", "Methods", "Name", });
    internal_static_clojureRT_protobuf_DoNode_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_clojureRT_protobuf_DoNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_DoNode_descriptor,
        new java.lang.String[] { "IsBody", "Ret", "Statements", "IsBody", });
    internal_static_clojureRT_protobuf_FnNode_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_clojureRT_protobuf_FnNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_FnNode_descriptor,
        new java.lang.String[] { "Local", "MaxFixedArity", "Methods", "Once", "IsVariadic", "Local", });
    internal_static_clojureRT_protobuf_FnMethodNode_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_clojureRT_protobuf_FnMethodNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_FnMethodNode_descriptor,
        new java.lang.String[] { "Body", "FixedArity", "LoopId", "Params", "IsVariadic", });
    internal_static_clojureRT_protobuf_HostInteropNode_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_clojureRT_protobuf_HostInteropNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_HostInteropNode_descriptor,
        new java.lang.String[] { "IsAssignable", "MOrF", "Target", });
    internal_static_clojureRT_protobuf_IfNode_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_clojureRT_protobuf_IfNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_IfNode_descriptor,
        new java.lang.String[] { "Else", "Test", "Then", });
    internal_static_clojureRT_protobuf_ImportNode_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_clojureRT_protobuf_ImportNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_ImportNode_descriptor,
        new java.lang.String[] { "Class_", });
    internal_static_clojureRT_protobuf_InstanceCallNode_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_clojureRT_protobuf_InstanceCallNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_InstanceCallNode_descriptor,
        new java.lang.String[] { "Args", "Class_", "Instance", "Method", "IsValidated", "Class", "IsValidated", });
    internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_clojureRT_protobuf_InstanceFieldNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_InstanceFieldNode_descriptor,
        new java.lang.String[] { "IsAssignable", "Class_", "Field", "Instance", });
    internal_static_clojureRT_protobuf_IsInstanceNode_descriptor =
      getDescriptor().getMessageTypes().get(17);
    internal_static_clojureRT_protobuf_IsInstanceNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_IsInstanceNode_descriptor,
        new java.lang.String[] { "Class_", "Target", });
    internal_static_clojureRT_protobuf_InvokeNode_descriptor =
      getDescriptor().getMessageTypes().get(18);
    internal_static_clojureRT_protobuf_InvokeNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_InvokeNode_descriptor,
        new java.lang.String[] { "Args", "Fn", "Meta", "Meta", });
    internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor =
      getDescriptor().getMessageTypes().get(19);
    internal_static_clojureRT_protobuf_KeywordInvokeNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_KeywordInvokeNode_descriptor,
        new java.lang.String[] { "Keyword", "Target", });
    internal_static_clojureRT_protobuf_LetNode_descriptor =
      getDescriptor().getMessageTypes().get(20);
    internal_static_clojureRT_protobuf_LetNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_LetNode_descriptor,
        new java.lang.String[] { "Bindings", "Body", });
    internal_static_clojureRT_protobuf_LetfnNode_descriptor =
      getDescriptor().getMessageTypes().get(21);
    internal_static_clojureRT_protobuf_LetfnNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_LetfnNode_descriptor,
        new java.lang.String[] { "Bindings", "Body", });
    internal_static_clojureRT_protobuf_LocalNode_descriptor =
      getDescriptor().getMessageTypes().get(22);
    internal_static_clojureRT_protobuf_LocalNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_LocalNode_descriptor,
        new java.lang.String[] { "ArgId", "IsAssignable", "Local", "Name", "IsVariadic", "ArgId", "IsVariadic", });
    internal_static_clojureRT_protobuf_LoopNode_descriptor =
      getDescriptor().getMessageTypes().get(23);
    internal_static_clojureRT_protobuf_LoopNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_LoopNode_descriptor,
        new java.lang.String[] { "Bindings", "Body", "LoopId", });
    internal_static_clojureRT_protobuf_MapNode_descriptor =
      getDescriptor().getMessageTypes().get(24);
    internal_static_clojureRT_protobuf_MapNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_MapNode_descriptor,
        new java.lang.String[] { "Keys", "Vals", });
    internal_static_clojureRT_protobuf_MethodNode_descriptor =
      getDescriptor().getMessageTypes().get(25);
    internal_static_clojureRT_protobuf_MethodNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_MethodNode_descriptor,
        new java.lang.String[] { "Body", "Bridges", "FixedArity", "Interface", "LoopId", "Name", "Params", "This", });
    internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor =
      getDescriptor().getMessageTypes().get(26);
    internal_static_clojureRT_protobuf_MonitorEnterNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_MonitorEnterNode_descriptor,
        new java.lang.String[] { "Target", });
    internal_static_clojureRT_protobuf_MonitorExitNode_descriptor =
      getDescriptor().getMessageTypes().get(27);
    internal_static_clojureRT_protobuf_MonitorExitNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_MonitorExitNode_descriptor,
        new java.lang.String[] { "Target", });
    internal_static_clojureRT_protobuf_NewNode_descriptor =
      getDescriptor().getMessageTypes().get(28);
    internal_static_clojureRT_protobuf_NewNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_NewNode_descriptor,
        new java.lang.String[] { "Args", "Class_", "IsValidated", "IsValidated", });
    internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor =
      getDescriptor().getMessageTypes().get(29);
    internal_static_clojureRT_protobuf_PrimInvokeNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_PrimInvokeNode_descriptor,
        new java.lang.String[] { "Args", "Fn", "Meta", "PrimInterface", "Meta", });
    internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor =
      getDescriptor().getMessageTypes().get(30);
    internal_static_clojureRT_protobuf_ProtocolInvokeNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_ProtocolInvokeNode_descriptor,
        new java.lang.String[] { "Args", "ProtocolFn", "Target", });
    internal_static_clojureRT_protobuf_QuoteNode_descriptor =
      getDescriptor().getMessageTypes().get(31);
    internal_static_clojureRT_protobuf_QuoteNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_QuoteNode_descriptor,
        new java.lang.String[] { "Expr", "IsLiteral", });
    internal_static_clojureRT_protobuf_RecurNode_descriptor =
      getDescriptor().getMessageTypes().get(32);
    internal_static_clojureRT_protobuf_RecurNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_RecurNode_descriptor,
        new java.lang.String[] { "Exprs", "LoopId", });
    internal_static_clojureRT_protobuf_ReifyNode_descriptor =
      getDescriptor().getMessageTypes().get(33);
    internal_static_clojureRT_protobuf_ReifyNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_ReifyNode_descriptor,
        new java.lang.String[] { "ClassName", "Interfaces", "Methods", });
    internal_static_clojureRT_protobuf_SetNode_descriptor =
      getDescriptor().getMessageTypes().get(34);
    internal_static_clojureRT_protobuf_SetNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_SetNode_descriptor,
        new java.lang.String[] { "Items", });
    internal_static_clojureRT_protobuf_MutateSetNode_descriptor =
      getDescriptor().getMessageTypes().get(35);
    internal_static_clojureRT_protobuf_MutateSetNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_MutateSetNode_descriptor,
        new java.lang.String[] { "Target", "Val", });
    internal_static_clojureRT_protobuf_StaticCallNode_descriptor =
      getDescriptor().getMessageTypes().get(36);
    internal_static_clojureRT_protobuf_StaticCallNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_StaticCallNode_descriptor,
        new java.lang.String[] { "Args", "Class_", "Method", "IsValidated", "IsValidated", });
    internal_static_clojureRT_protobuf_StaticFieldNode_descriptor =
      getDescriptor().getMessageTypes().get(37);
    internal_static_clojureRT_protobuf_StaticFieldNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_StaticFieldNode_descriptor,
        new java.lang.String[] { "IsAssignable", "Class_", "Field", "IsAssignable", });
    internal_static_clojureRT_protobuf_TheVarNode_descriptor =
      getDescriptor().getMessageTypes().get(38);
    internal_static_clojureRT_protobuf_TheVarNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_TheVarNode_descriptor,
        new java.lang.String[] { "Var", });
    internal_static_clojureRT_protobuf_ThrowNode_descriptor =
      getDescriptor().getMessageTypes().get(39);
    internal_static_clojureRT_protobuf_ThrowNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_ThrowNode_descriptor,
        new java.lang.String[] { "Exception", });
    internal_static_clojureRT_protobuf_TryNode_descriptor =
      getDescriptor().getMessageTypes().get(40);
    internal_static_clojureRT_protobuf_TryNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_TryNode_descriptor,
        new java.lang.String[] { "Body", "Catches", "Finally", "Finally", });
    internal_static_clojureRT_protobuf_VarNode_descriptor =
      getDescriptor().getMessageTypes().get(41);
    internal_static_clojureRT_protobuf_VarNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_VarNode_descriptor,
        new java.lang.String[] { "IsAssignable", "Var", "IsAssignable", });
    internal_static_clojureRT_protobuf_VectorNode_descriptor =
      getDescriptor().getMessageTypes().get(42);
    internal_static_clojureRT_protobuf_VectorNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_VectorNode_descriptor,
        new java.lang.String[] { "Items", });
    internal_static_clojureRT_protobuf_WithMetaNode_descriptor =
      getDescriptor().getMessageTypes().get(43);
    internal_static_clojureRT_protobuf_WithMetaNode_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_WithMetaNode_descriptor,
        new java.lang.String[] { "Expr", "Meta", });
    internal_static_clojureRT_protobuf_Node_descriptor =
      getDescriptor().getMessageTypes().get(44);
    internal_static_clojureRT_protobuf_Node_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_clojureRT_protobuf_Node_descriptor,
        new java.lang.String[] { "Env", "Form", "IgnoreTag", "Loops", "OTag", "Op", "RawForms", "Subnode", "Tag", "TopLevel", "IgnoreTag", "TopLevel", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
