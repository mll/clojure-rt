{:binding {:name :string
           :local :local-type
           :arg-id :int 
           :variadic? :bool
           :init :node}
 :case {:test :node
        :tests [:node]
        :thens [:node] 
        :default :node
        :shift :int
        :mask :int
        :low :string
        :high :string
        :switch-type :switch-type
        :test-type :test-type
        :skip-check? :string
        :enums {:switch-type [:sparse :compact]
                :test-type [:int :hash-equiv :hash-identity]}}
 :case-test {:test :node
             :hash :int}
 :case-then {:then :node
             :hash :int}
 :catch {:class :node                                       
         :local :node
         :body :node}
 :const {:literal? :bool
         :type :const-type
         :val :string
         :meta :node
         :enums {:const-type [:nil :bool :keyword :symbol :string :number :type :record :map :vector :set :seq :char :regex :class :var :unknown]}}
 :def {:name :string
       :var :string
       :meta :node
       :init :node
       :doc :string}
 :deftype {:interfaces [:string]
           :name :string
           :class-name :string
           :fields [:node] 
           :methods [:node]}
 :do {:statements [:node] 
      :ret :node
      :body? :bool}
 :fn {:variadic? :bool
      :max-fixed-arity :int
      :local :node
      :methods [:node]
      :once :bool}
 :fn-method {:loop-id :string
             :variadic? :bool
             :params [:node] 
             :fixed-arity :int
             :body :node
             :closed-overs [:node]}
 :host-interop {:target :node
                :m-or-f :string
                :assignable? :bool}
 :if {:test :node
      :then :node
      :else :node}
 :import {:class :string}
 :instance-call {:method :string
                 :instance :node
                 :args [:node] 
                 :validated? :bool
                 :class :string}
 :instance-field {:field :string
                  :instance :node
                  :assignable? :bool
                  :class :string}
 :instance? {:class :string
             :target :node}
 :invoke {:fn :node
          :args [:node]
          :meta :string}
 :keyword-invoke {:keyword :node
                  :target :node}
 :let {:bindings [:node]
       :body :node}
 :letfn {:bindings [:node]
         :body :node}
 :local {:assignable? :bool
         :name :string
         :local :local-type 
         :arg-id :int
         :variadic? :bool}
 :loop {:bindings [:node]
        :body :node
        :loop-id :string}
 :map {:keys [:node]
       :vals [:node]}
 :method {:bridges [:string]
          :interface :string
          :this :node
          :loop-id :string
          :name :string
          :params [:node]
          :fixed-arity :int
          :body :node}
 :monitor-enter {:target :node}
 :monitor-exit {:target :node}
 :new {:class :node
       :args [:node]
       :validated? :bool}
 :prim-invoke {:fn :node
               :args [:node]
               :prim-interface :string
               :meta :string}
 :protocol-invoke {:protocol-fn :node
                   :target :node
                   :args [:node]}
 :quote {:literal? :bool
         :expr :node}
 :recur {:exprs [:node]
         :loop-id :string
         :recur-this :node}
 :reify {:interfaces [:string]
         :class-name :string
         :methods [:node]}
 :set {:items [:node]}
 :set! {:target :node
        :val :node}
 :static-call {:class :string
               :method :string
               :args [:node]
               :validated? :bool}
 :static-field {:class :string
                :field :string
                :assignable? :bool}
 :the-var {:var :string}
 :throw {:exception :node}
 :try {:body :node
       :catches [:node]
       :finally :node
       :all-catches-owned [:memory]}
 :var {:var :string
       :assignable? :bool}
 :vector {:items [:node]}
 :with-meta {:meta :node
             :expr :node}}
