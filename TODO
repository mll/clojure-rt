
* - not done
v - done
<-- - in progress

Runtime:

* Make decision about integer types (64 bit or 32 bit or compiler/options-dependent?)
* Double / float / quad - the same
* Double / float / quad array

* UTF8 strings (library from Julia is already there) 

v String
v PersistentList
v PersistentVector
v Integer
v Double
v Boolean   
v nil 
v Symbol 
v Keyword 
v ConcurrentHashMap (TODO resizing) 
v Var (TODO wartosc zwracana)
v Function (generic) 
v FunctionMethod (generic)
v Keyword uniquing

* Symbol uniquing 
* Character
* Ratio
* BigInteger
* PersistentArrayMap <--
* PersistentHashMap
* PersistentSet

* Implement all java methods for runtime functions (horrible)

Compiler:

* JIT infrastructure + arg type deduction

* Const 
  v Integer
  v Double
  v Boolean 
  v Nil 
  v String 
  v Symbol 
  v Keyword
  * Keyword uniquing
  * Symbol uniquing 

  * Map
  v Vector
  v List
  * Ratio
  * BigInteger

v StaticCall (works for simple math, framework prepared to add more functionality)
* StaticCall with dynamic args <--
v WithMeta (for now just ignores meta)
v If 
v Def and vars system
v Dynamic Def and vars system
v Binding (dziala dla funkcji)
v Fn
v FnMethod
* Let 
v Invoke statyczne (z dynamicznymi argumentami) <--
v Invoke dynamiczne 
* Invoke lambda 
* Invoke lambda once
* Invoke variadic  
v Recur (for Fn)

* Loop (+ recur for loop)
v Vector
* Case (CaseTest CaseThen)

* HUGE Memory management ref counting (let us start with string)
* HUGE Exception model 

....




// Hashers:

// from code.google.com/p/smhasher/wiki/MurmurHash3

